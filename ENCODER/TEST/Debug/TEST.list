
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000275c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002894  08002894  0000403c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002894  08002894  0000403c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002894  08002894  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002894  08002894  00003894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002898  08002898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  0800289c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000003c  080028d8  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080028d8  0000418c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b097  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e6  00000000  00000000  0000f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000109e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093f  00000000  00000000  000115a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017680  00000000  00000000  00011ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c412  00000000  00000000  00029567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a2ee  00000000  00000000  00035979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfc67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003178  00000000  00000000  000bfcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000c2e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002850 	.word	0x08002850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002850 	.word	0x08002850

0800014c <prinLedStatus>:
uint16_t pins[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin,
                     LED5_Pin, LED6_Pin, LED7_Pin, LED8_Pin};
//----------------------------------------------------------------------
uint8_t Ledstatus;
void prinLedStatus()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  for (int i = 0; i < 8; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e025      	b.n	80001a4 <prinLedStatus+0x58>
  {
	if (Ledstatus & (1 << i))
 8000158:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <prinLedStatus+0x68>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	461a      	mov	r2, r3
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	fa42 f303 	asr.w	r3, r2, r3
 8000164:	f003 0301 	and.w	r3, r3, #1
 8000168:	2b00      	cmp	r3, #0
 800016a:	d00c      	beq.n	8000186 <prinLedStatus+0x3a>
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 800016c:	4a12      	ldr	r2, [pc, #72]	@ (80001b8 <prinLedStatus+0x6c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000174:	4a11      	ldr	r2, [pc, #68]	@ (80001bc <prinLedStatus+0x70>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800017c:	2201      	movs	r2, #1
 800017e:	4619      	mov	r1, r3
 8000180:	f001 f85b 	bl	800123a <HAL_GPIO_WritePin>
 8000184:	e00b      	b.n	800019e <prinLedStatus+0x52>
	}else
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000186:	4a0c      	ldr	r2, [pc, #48]	@ (80001b8 <prinLedStatus+0x6c>)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800018e:	4a0b      	ldr	r2, [pc, #44]	@ (80001bc <prinLedStatus+0x70>)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000196:	2200      	movs	r2, #0
 8000198:	4619      	mov	r1, r3
 800019a:	f001 f84e 	bl	800123a <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	3301      	adds	r3, #1
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b07      	cmp	r3, #7
 80001a8:	ddd6      	ble.n	8000158 <prinLedStatus+0xc>
	}
  }

}
 80001aa:	bf00      	nop
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000178 	.word	0x20000178
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000020 	.word	0x20000020

080001c0 <HandleButtons>:
//-----------------------------------------------------------------------------
void HandleButtons(uint16_t GPIO_Pin)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	80fb      	strh	r3, [r7, #6]
    if (Ledstatus == 0)
 80001ca:	4b16      	ldr	r3, [pc, #88]	@ (8000224 <HandleButtons+0x64>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d102      	bne.n	80001d8 <HandleButtons+0x18>
    {
        Ledstatus = 1;
 80001d2:	4b14      	ldr	r3, [pc, #80]	@ (8000224 <HandleButtons+0x64>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == BTN1_Pin)
 80001d8:	88fb      	ldrh	r3, [r7, #6]
 80001da:	2b02      	cmp	r3, #2
 80001dc:	d10d      	bne.n	80001fa <HandleButtons+0x3a>
    {
        Ledstatus <<= 1;
 80001de:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <HandleButtons+0x64>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	005b      	lsls	r3, r3, #1
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000224 <HandleButtons+0x64>)
 80001e8:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 1;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <HandleButtons+0x64>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d113      	bne.n	800021a <HandleButtons+0x5a>
 80001f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000224 <HandleButtons+0x64>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
    else if (GPIO_Pin == BTN2_Pin)
    {
        Ledstatus >>= 1;
        if (Ledstatus == 0) Ledstatus = 0x80;
    }
}
 80001f8:	e00f      	b.n	800021a <HandleButtons+0x5a>
    else if (GPIO_Pin == BTN2_Pin)
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	2b04      	cmp	r3, #4
 80001fe:	d10c      	bne.n	800021a <HandleButtons+0x5a>
        Ledstatus >>= 1;
 8000200:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <HandleButtons+0x64>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	085b      	lsrs	r3, r3, #1
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <HandleButtons+0x64>)
 800020a:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 0x80;
 800020c:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <HandleButtons+0x64>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d102      	bne.n	800021a <HandleButtons+0x5a>
 8000214:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <HandleButtons+0x64>)
 8000216:	2280      	movs	r2, #128	@ 0x80
 8000218:	701a      	strb	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	20000178 	.word	0x20000178

08000228 <HAL_GPIO_EXTI_Callback>:


//--------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t PGIO_Pin)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	80fb      	strh	r3, [r7, #6]
	HandleButtons(PGIO_Pin);
 8000232:	88fb      	ldrh	r3, [r7, #6]
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ffc3 	bl	80001c0 <HandleButtons>
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <handlSlideSwitch>:
//--------------------------------------------------------------------------

void handlSlideSwitch()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 800024a:	2101      	movs	r1, #1
 800024c:	480b      	ldr	r0, [pc, #44]	@ (800027c <handlSlideSwitch+0x38>)
 800024e:	f000 ffdd 	bl	800120c <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d105      	bne.n	8000268 <handlSlideSwitch+0x24>
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	2110      	movs	r1, #16
 8000260:	4806      	ldr	r0, [pc, #24]	@ (800027c <handlSlideSwitch+0x38>)
 8000262:	f000 ffea 	bl	800123a <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
	}
}
 8000266:	e004      	b.n	8000272 <handlSlideSwitch+0x2e>
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2110      	movs	r1, #16
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <handlSlideSwitch+0x38>)
 800026e:	f000 ffe4 	bl	800123a <HAL_GPIO_WritePin>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40011000 	.word	0x40011000

08000280 <Buzzer_SetDuty>:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, g); // Зелёный
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, b); // Синий
}
//---------------------------------------------------------------------------

void Buzzer_SetDuty(uint16_t duty) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
    if (duty > htim2.Init.Period) duty = htim2.Init.Period;
 800028a:	88fa      	ldrh	r2, [r7, #6]
 800028c:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <Buzzer_SetDuty+0x2c>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	429a      	cmp	r2, r3
 8000292:	d902      	bls.n	800029a <Buzzer_SetDuty+0x1a>
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <Buzzer_SetDuty+0x2c>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 800029a:	4b04      	ldr	r3, [pc, #16]	@ (80002ac <Buzzer_SetDuty+0x2c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	88fa      	ldrh	r2, [r7, #6]
 80002a0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	20000058 	.word	0x20000058

080002b0 <handlSlideToBuzzer>:


//--------------------------------------------------------------------------
void handlSlideToBuzzer()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 80002b6:	2101      	movs	r1, #1
 80002b8:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <handlSlideToBuzzer+0x44>)
 80002ba:	f000 ffa7 	bl	800120c <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d10c      	bne.n	80002e2 <handlSlideToBuzzer+0x32>
	{
		 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <handlSlideToBuzzer+0x48>)
 80002cc:	f001 fc46 	bl	8001b5c <HAL_TIM_PWM_Start>
		 Buzzer_SetDuty( (htim2.Init.Period + 1) / 2 );
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <handlSlideToBuzzer+0x48>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	085b      	lsrs	r3, r3, #1
 80002d8:	b29b      	uxth	r3, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffd0 	bl	8000280 <Buzzer_SetDuty>
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	}
}
 80002e0:	e003      	b.n	80002ea <handlSlideToBuzzer+0x3a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80002e2:	2100      	movs	r1, #0
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <handlSlideToBuzzer+0x48>)
 80002e6:	f001 fcdb 	bl	8001ca0 <HAL_TIM_PWM_Stop>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40011000 	.word	0x40011000
 80002f8:	20000058 	.word	0x20000058

080002fc <UpdateEncoder>:
int32_t encoder_value = 0;
uint8_t active_leds = 0;
const uint8_t led_sequence[8] = {1, 3, 7, 15, 31, 63, 127, 255};

void UpdateEncoder()
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	    uint16_t curr_cnt = TIM3->CNT;
 8000302:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <UpdateEncoder+0xbc>)
 8000304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000306:	80bb      	strh	r3, [r7, #4]
	    int16_t diff = curr_cnt - last_cnt;
 8000308:	4b2c      	ldr	r3, [pc, #176]	@ (80003bc <UpdateEncoder+0xc0>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	88ba      	ldrh	r2, [r7, #4]
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	b29b      	uxth	r3, r3
 8000312:	80fb      	strh	r3, [r7, #6]

	    // Обработка переполнения с ARR = 30
	    if(diff > 15) {
 8000314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000318:	2b0f      	cmp	r3, #15
 800031a:	dd04      	ble.n	8000326 <UpdateEncoder+0x2a>
	        diff -= 30;
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	3b1e      	subs	r3, #30
 8000320:	b29b      	uxth	r3, r3
 8000322:	80fb      	strh	r3, [r7, #6]
 8000324:	e008      	b.n	8000338 <UpdateEncoder+0x3c>
	    }
	    else if(diff < -15) {
 8000326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800032a:	f113 0f0f 	cmn.w	r3, #15
 800032e:	da03      	bge.n	8000338 <UpdateEncoder+0x3c>
	        diff += 30;
 8000330:	88fb      	ldrh	r3, [r7, #6]
 8000332:	331e      	adds	r3, #30
 8000334:	b29b      	uxth	r3, r3
 8000336:	80fb      	strh	r3, [r7, #6]
	    }

	    encoder_value += diff;
 8000338:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800033c:	4b20      	ldr	r3, [pc, #128]	@ (80003c0 <UpdateEncoder+0xc4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4413      	add	r3, r2
 8000342:	4a1f      	ldr	r2, [pc, #124]	@ (80003c0 <UpdateEncoder+0xc4>)
 8000344:	6013      	str	r3, [r2, #0]
	    last_cnt = curr_cnt;
 8000346:	4a1d      	ldr	r2, [pc, #116]	@ (80003bc <UpdateEncoder+0xc0>)
 8000348:	88bb      	ldrh	r3, [r7, #4]
 800034a:	8013      	strh	r3, [r2, #0]

	    // Изменяем индекс только при значительном изменении положения
	    static int8_t accumulated_diff = 0;
	    accumulated_diff += diff;
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <UpdateEncoder+0xc8>)
 8000352:	f993 3000 	ldrsb.w	r3, [r3]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	4413      	add	r3, r2
 800035a:	b2db      	uxtb	r3, r3
 800035c:	b25a      	sxtb	r2, r3
 800035e:	4b19      	ldr	r3, [pc, #100]	@ (80003c4 <UpdateEncoder+0xc8>)
 8000360:	701a      	strb	r2, [r3, #0]

	    if(accumulated_diff >= 4) { // Порог срабатывания +
 8000362:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <UpdateEncoder+0xc8>)
 8000364:	f993 3000 	ldrsb.w	r3, [r3]
 8000368:	2b03      	cmp	r3, #3
 800036a:	dd0d      	ble.n	8000388 <UpdateEncoder+0x8c>
	        if(active_leds < 7) active_leds++;
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <UpdateEncoder+0xcc>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b06      	cmp	r3, #6
 8000372:	d805      	bhi.n	8000380 <UpdateEncoder+0x84>
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <UpdateEncoder+0xcc>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <UpdateEncoder+0xcc>)
 800037e:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 8000380:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <UpdateEncoder+0xc8>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
	        if(active_leds > 0) active_leds--;
	        accumulated_diff = 0;
	    }

}
 8000386:	e012      	b.n	80003ae <UpdateEncoder+0xb2>
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <UpdateEncoder+0xc8>)
 800038a:	f993 3000 	ldrsb.w	r3, [r3]
 800038e:	f113 0f03 	cmn.w	r3, #3
 8000392:	da0c      	bge.n	80003ae <UpdateEncoder+0xb2>
	        if(active_leds > 0) active_leds--;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <UpdateEncoder+0xcc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d005      	beq.n	80003a8 <UpdateEncoder+0xac>
 800039c:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <UpdateEncoder+0xcc>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <UpdateEncoder+0xcc>)
 80003a6:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <UpdateEncoder+0xc8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40000400 	.word	0x40000400
 80003bc:	20000182 	.word	0x20000182
 80003c0:	2000017c 	.word	0x2000017c
 80003c4:	20000184 	.word	0x20000184
 80003c8:	20000180 	.word	0x20000180

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 fc28 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f834 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f000 f9b8 	bl	800074c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003dc:	f000 f98c 	bl	80006f8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80003e0:	f000 f870 	bl	80004c4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80003e4:	f000 f91a 	bl	800061c <MX_TIM4_Init>
  MX_TIM3_Init();
 80003e8:	f000 f8c4 	bl	8000574 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80003ec:	213c      	movs	r1, #60	@ 0x3c
 80003ee:	4810      	ldr	r0, [pc, #64]	@ (8000430 <main+0x64>)
 80003f0:	f001 fd5c 	bl	8001eac <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80003f4:	2100      	movs	r1, #0
 80003f6:	480f      	ldr	r0, [pc, #60]	@ (8000434 <main+0x68>)
 80003f8:	f001 fbb0 	bl	8001b5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80003fc:	2104      	movs	r1, #4
 80003fe:	480d      	ldr	r0, [pc, #52]	@ (8000434 <main+0x68>)
 8000400:	f001 fbac 	bl	8001b5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000404:	2108      	movs	r1, #8
 8000406:	480b      	ldr	r0, [pc, #44]	@ (8000434 <main+0x68>)
 8000408:	f001 fba8 	bl	8001b5c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Ledstatus = 0;
 800040c:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <main+0x6c>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  UpdateEncoder();
 8000412:	f7ff ff73 	bl	80002fc <UpdateEncoder>

	  // Управляем светодиодами в зависимости от положения энкодера
	  Ledstatus = active_leds;
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <main+0x70>)
 8000418:	781a      	ldrb	r2, [r3, #0]
 800041a:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <main+0x6c>)
 800041c:	701a      	strb	r2, [r3, #0]
	  prinLedStatus();
 800041e:	f7ff fe95 	bl	800014c <prinLedStatus>
	  handlSlideSwitch();
 8000422:	f7ff ff0f 	bl	8000244 <handlSlideSwitch>


	  handlSlideToBuzzer();
 8000426:	f7ff ff43 	bl	80002b0 <handlSlideToBuzzer>
	  UpdateEncoder();
 800042a:	bf00      	nop
 800042c:	e7f1      	b.n	8000412 <main+0x46>
 800042e:	bf00      	nop
 8000430:	200000a0 	.word	0x200000a0
 8000434:	200000e8 	.word	0x200000e8
 8000438:	20000178 	.word	0x20000178
 800043c:	20000180 	.word	0x20000180

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b090      	sub	sp, #64	@ 0x40
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	f107 0318 	add.w	r3, r7, #24
 800044a:	2228      	movs	r2, #40	@ 0x28
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f002 f9d2 	bl	80027f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000462:	2302      	movs	r3, #2
 8000464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046a:	2310      	movs	r3, #16
 800046c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	2302      	movs	r3, #2
 8000470:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000472:	2300      	movs	r3, #0
 8000474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000476:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800047a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	f107 0318 	add.w	r3, r7, #24
 8000480:	4618      	mov	r0, r3
 8000482:	f000 ff0b 	bl	800129c <HAL_RCC_OscConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800048c:	f000 f9f6 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000490:	230f      	movs	r3, #15
 8000492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	2302      	movs	r3, #2
 8000496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2102      	movs	r1, #2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f978 	bl	80017a0 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004b6:	f000 f9e1 	bl	800087c <Error_Handler>
  }
}
 80004ba:	bf00      	nop
 80004bc:	3740      	adds	r7, #64	@ 0x40
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ca:	f107 0320 	add.w	r3, r7, #32
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e6:	4b22      	ldr	r3, [pc, #136]	@ (8000570 <MX_TIM2_Init+0xac>)
 80004e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80004ee:	4b20      	ldr	r3, [pc, #128]	@ (8000570 <MX_TIM2_Init+0xac>)
 80004f0:	223f      	movs	r2, #63	@ 0x3f
 80004f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <MX_TIM2_Init+0xac>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 80004fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000570 <MX_TIM2_Init+0xac>)
 80004fc:	22f9      	movs	r2, #249	@ 0xf9
 80004fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_TIM2_Init+0xac>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_TIM2_Init+0xac>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800050c:	4818      	ldr	r0, [pc, #96]	@ (8000570 <MX_TIM2_Init+0xac>)
 800050e:	f001 fad5 	bl	8001abc <HAL_TIM_PWM_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000518:	f000 f9b0 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	4619      	mov	r1, r3
 800052a:	4811      	ldr	r0, [pc, #68]	@ (8000570 <MX_TIM2_Init+0xac>)
 800052c:	f002 f828 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000536:	f000 f9a1 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053a:	2360      	movs	r3, #96	@ 0x60
 800053c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	4807      	ldr	r0, [pc, #28]	@ (8000570 <MX_TIM2_Init+0xac>)
 8000552:	f001 fd39 	bl	8001fc8 <HAL_TIM_PWM_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800055c:	f000 f98e 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <MX_TIM2_Init+0xac>)
 8000562:	f000 fa45 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	@ 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000058 	.word	0x20000058

08000574 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	@ 0x30
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2224      	movs	r2, #36	@ 0x24
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f938 	bl	80027f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <MX_TIM3_Init+0xa0>)
 8000592:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <MX_TIM3_Init+0xa4>)
 8000594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000596:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <MX_TIM3_Init+0xa0>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <MX_TIM3_Init+0xa0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <MX_TIM3_Init+0xa0>)
 80005a4:	221e      	movs	r2, #30
 80005a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <MX_TIM3_Init+0xa0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <MX_TIM3_Init+0xa0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005cc:	2301      	movs	r3, #1
 80005ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_TIM3_Init+0xa0>)
 80005e0:	f001 fbc2 	bl	8001d68 <HAL_TIM_Encoder_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80005ea:	f000 f947 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	@ (8000614 <MX_TIM3_Init+0xa0>)
 80005fc:	f001 ffc0 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000606:	f000 f939 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	3730      	adds	r7, #48	@ 0x30
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000a0 	.word	0x200000a0
 8000618:	40000400 	.word	0x40000400

0800061c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <MX_TIM4_Init+0xd8>)
 8000642:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 8000646:	223f      	movs	r2, #63	@ 0x3f
 8000648:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 8000652:	22ff      	movs	r2, #255	@ 0xff
 8000654:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000656:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000662:	4823      	ldr	r0, [pc, #140]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 8000664:	f001 fa2a 	bl	8001abc <HAL_TIM_PWM_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800066e:	f000 f905 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4619      	mov	r1, r3
 8000680:	481b      	ldr	r0, [pc, #108]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 8000682:	f001 ff7d 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800068c:	f000 f8f6 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000690:	2360      	movs	r3, #96	@ 0x60
 8000692:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4812      	ldr	r0, [pc, #72]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 80006a8:	f001 fc8e 	bl	8001fc8 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f8e3 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2204      	movs	r2, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 80006be:	f001 fc83 	bl	8001fc8 <HAL_TIM_PWM_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006c8:	f000 f8d8 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2208      	movs	r2, #8
 80006d0:	4619      	mov	r1, r3
 80006d2:	4807      	ldr	r0, [pc, #28]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 80006d4:	f001 fc78 	bl	8001fc8 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80006de:	f000 f8cd 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006e2:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <MX_TIM4_Init+0xd4>)
 80006e4:	f000 f984 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	@ 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000e8 	.word	0x200000e8
 80006f4:	40000800 	.word	0x40000800

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_USART1_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART1_UART_Init+0x4c>)
 8000730:	f001 ff84 	bl	800263c <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f89f 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000130 	.word	0x20000130
 8000748:	40013800 	.word	0x40013800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000760:	4b42      	ldr	r3, [pc, #264]	@ (800086c <MX_GPIO_Init+0x120>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a41      	ldr	r2, [pc, #260]	@ (800086c <MX_GPIO_Init+0x120>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b3f      	ldr	r3, [pc, #252]	@ (800086c <MX_GPIO_Init+0x120>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0310 	and.w	r3, r3, #16
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b3c      	ldr	r3, [pc, #240]	@ (800086c <MX_GPIO_Init+0x120>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a3b      	ldr	r2, [pc, #236]	@ (800086c <MX_GPIO_Init+0x120>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b39      	ldr	r3, [pc, #228]	@ (800086c <MX_GPIO_Init+0x120>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b36      	ldr	r3, [pc, #216]	@ (800086c <MX_GPIO_Init+0x120>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a35      	ldr	r2, [pc, #212]	@ (800086c <MX_GPIO_Init+0x120>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b33      	ldr	r3, [pc, #204]	@ (800086c <MX_GPIO_Init+0x120>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80007ae:	4830      	ldr	r0, [pc, #192]	@ (8000870 <MX_GPIO_Init+0x124>)
 80007b0:	f000 fd43 	bl	800123a <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2110      	movs	r1, #16
 80007b8:	482e      	ldr	r0, [pc, #184]	@ (8000874 <MX_GPIO_Init+0x128>)
 80007ba:	f000 fd3e 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SlideSwitch_Pin */
  GPIO_InitStruct.Pin = SlideSwitch_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SlideSwitch_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4828      	ldr	r0, [pc, #160]	@ (8000874 <MX_GPIO_Init+0x128>)
 80007d2:	f000 fb97 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80007d6:	2306      	movs	r3, #6
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <MX_GPIO_Init+0x12c>)
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4822      	ldr	r0, [pc, #136]	@ (8000874 <MX_GPIO_Init+0x128>)
 80007ea:	f000 fb8b 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80007ee:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 80007f2:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	481a      	ldr	r0, [pc, #104]	@ (8000870 <MX_GPIO_Init+0x124>)
 8000808:	f000 fb7c 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDR_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin;
 800080c:	2310      	movs	r3, #16
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDR_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4814      	ldr	r0, [pc, #80]	@ (8000874 <MX_GPIO_Init+0x128>)
 8000824:	f000 fb6e 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_GPIO_Init+0x12c>)
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_GPIO_Init+0x128>)
 800083e:	f000 fb61 	bl	8000f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2007      	movs	r0, #7
 8000848:	f000 fb25 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800084c:	2007      	movs	r0, #7
 800084e:	f000 fb3e 	bl	8000ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2008      	movs	r0, #8
 8000858:	f000 fb1d 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800085c:	2008      	movs	r0, #8
 800085e:	f000 fb36 	bl	8000ece <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800
 8000874:	40011000 	.word	0x40011000
 8000878:	10110000 	.word	0x10110000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_MspInit+0x5c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <HAL_MspInit+0x5c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x5c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	@ (80008e4 <HAL_MspInit+0x5c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <HAL_MspInit+0x60>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_MspInit+0x60>)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010000 	.word	0x40010000

080008ec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008fc:	d10c      	bne.n	8000918 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <HAL_TIM_PWM_MspInit+0x58>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <HAL_TIM_PWM_MspInit+0x58>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_TIM_PWM_MspInit+0x58>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000916:	e010      	b.n	800093a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <HAL_TIM_PWM_MspInit+0x5c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d10b      	bne.n	800093a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_TIM_PWM_MspInit+0x58>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_TIM_PWM_MspInit+0x58>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_TIM_PWM_MspInit+0x58>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000
 8000948:	40000800 	.word	0x40000800

0800094c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <HAL_TIM_Encoder_MspInit+0x94>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d135      	bne.n	80009d8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a16      	ldr	r2, [pc, #88]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0x98>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 800099c:	2330      	movs	r3, #48	@ 0x30
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80009b0:	f000 faa8 	bl	8000f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_TIM_Encoder_MspInit+0xa0>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009d2:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <HAL_TIM_Encoder_MspInit+0xa0>)
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	@ 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40000400 	.word	0x40000400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	40010000 	.word	0x40010000

080009f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a0e:	d12b      	bne.n	8000a68 <HAL_TIM_MspPostInit+0x78>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <HAL_TIM_MspPostInit+0xbc>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a25      	ldr	r2, [pc, #148]	@ (8000aac <HAL_TIM_MspPostInit+0xbc>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <HAL_TIM_MspPostInit+0xbc>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481c      	ldr	r0, [pc, #112]	@ (8000ab0 <HAL_TIM_MspPostInit+0xc0>)
 8000a3e:	f000 fa61 	bl	8000f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_TIM_MspPostInit+0xc4>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a52:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a60:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <HAL_TIM_MspPostInit+0xc4>)
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a66:	e01d      	b.n	8000aa4 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM4)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <HAL_TIM_MspPostInit+0xc8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d118      	bne.n	8000aa4 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_TIM_MspPostInit+0xbc>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <HAL_TIM_MspPostInit+0xbc>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <HAL_TIM_MspPostInit+0xbc>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000a8a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4807      	ldr	r0, [pc, #28]	@ (8000abc <HAL_TIM_MspPostInit+0xcc>)
 8000aa0:	f000 fa30 	bl	8000f04 <HAL_GPIO_Init>
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	40000800 	.word	0x40000800
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <HAL_UART_MspInit+0x8c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d131      	bne.n	8000b44 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_UART_MspInit+0x90>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <HAL_UART_MspInit+0x90>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_UART_MspInit+0x90>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_UART_MspInit+0x90>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <HAL_UART_MspInit+0x90>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_UART_MspInit+0x90>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <HAL_UART_MspInit+0x94>)
 8000b26:	f000 f9ed 	bl	8000f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <HAL_UART_MspInit+0x94>)
 8000b40:	f000 f9e0 	bl	8000f04 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f882 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f000 fb59 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f000 fb52 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd8:	f7ff fff8 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bde:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000be0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a09      	ldr	r2, [pc, #36]	@ (8000c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf4:	4c09      	ldr	r4, [pc, #36]	@ (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f001 fe01 	bl	8002808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c06:	f7ff fbe1 	bl	80003cc <main>
  bx lr
 8000c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000c14:	0800289c 	.word	0x0800289c
  ldr r2, =_sbss
 8000c18:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000c1c:	2000018c 	.word	0x2000018c

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <HAL_Init+0x28>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <HAL_Init+0x28>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f923 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe22 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f93b 	bl	8000eea <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f903 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000030 	.word	0x20000030
 8000ca8:	20000038 	.word	0x20000038
 8000cac:	20000034 	.word	0x20000034

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a03      	ldr	r2, [pc, #12]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000038 	.word	0x20000038
 8000cd0:	20000188 	.word	0x20000188

08000cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	@ (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000188 	.word	0x20000188

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4906      	ldr	r1, [pc, #24]	@ (8000d80 <__NVIC_EnableIRQ+0x34>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	@ (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	@ (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	@ 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff90 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff2d 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff42 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff90 	bl	8000dd8 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5f 	bl	8000d84 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff35 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffa2 	bl	8000e3c <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b08b      	sub	sp, #44	@ 0x2c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e169      	b.n	80011ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8158 	bne.w	80011e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a9a      	ldr	r2, [pc, #616]	@ (80011a4 <HAL_GPIO_Init+0x2a0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d05e      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f40:	4a98      	ldr	r2, [pc, #608]	@ (80011a4 <HAL_GPIO_Init+0x2a0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d875      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f46:	4a98      	ldr	r2, [pc, #608]	@ (80011a8 <HAL_GPIO_Init+0x2a4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d058      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f4c:	4a96      	ldr	r2, [pc, #600]	@ (80011a8 <HAL_GPIO_Init+0x2a4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d86f      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f52:	4a96      	ldr	r2, [pc, #600]	@ (80011ac <HAL_GPIO_Init+0x2a8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d052      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f58:	4a94      	ldr	r2, [pc, #592]	@ (80011ac <HAL_GPIO_Init+0x2a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d869      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f5e:	4a94      	ldr	r2, [pc, #592]	@ (80011b0 <HAL_GPIO_Init+0x2ac>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d04c      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f64:	4a92      	ldr	r2, [pc, #584]	@ (80011b0 <HAL_GPIO_Init+0x2ac>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d863      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f6a:	4a92      	ldr	r2, [pc, #584]	@ (80011b4 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d046      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f70:	4a90      	ldr	r2, [pc, #576]	@ (80011b4 <HAL_GPIO_Init+0x2b0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d85d      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f76:	2b12      	cmp	r3, #18
 8000f78:	d82a      	bhi.n	8000fd0 <HAL_GPIO_Init+0xcc>
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d859      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f84 <HAL_GPIO_Init+0x80>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08000fd9 	.word	0x08000fd9
 8000f8c:	08000feb 	.word	0x08000feb
 8000f90:	0800102d 	.word	0x0800102d
 8000f94:	08001033 	.word	0x08001033
 8000f98:	08001033 	.word	0x08001033
 8000f9c:	08001033 	.word	0x08001033
 8000fa0:	08001033 	.word	0x08001033
 8000fa4:	08001033 	.word	0x08001033
 8000fa8:	08001033 	.word	0x08001033
 8000fac:	08001033 	.word	0x08001033
 8000fb0:	08001033 	.word	0x08001033
 8000fb4:	08001033 	.word	0x08001033
 8000fb8:	08001033 	.word	0x08001033
 8000fbc:	08001033 	.word	0x08001033
 8000fc0:	08001033 	.word	0x08001033
 8000fc4:	08001033 	.word	0x08001033
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000ff5 	.word	0x08000ff5
 8000fd0:	4a79      	ldr	r2, [pc, #484]	@ (80011b8 <HAL_GPIO_Init+0x2b4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fd6:	e02c      	b.n	8001032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e029      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e024      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e01f      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	330c      	adds	r3, #12
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e01a      	b.n	8001034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001006:	2304      	movs	r3, #4
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e013      	b.n	8001034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d105      	bne.n	8001020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001014:	2308      	movs	r3, #8
 8001016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	611a      	str	r2, [r3, #16]
          break;
 800101e:	e009      	b.n	8001034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001020:	2308      	movs	r3, #8
 8001022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	615a      	str	r2, [r3, #20]
          break;
 800102a:	e003      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x130>
          break;
 8001032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2bff      	cmp	r3, #255	@ 0xff
 8001038:	d801      	bhi.n	800103e <HAL_GPIO_Init+0x13a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e001      	b.n	8001042 <HAL_GPIO_Init+0x13e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3304      	adds	r3, #4
 8001042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2bff      	cmp	r3, #255	@ 0xff
 8001048:	d802      	bhi.n	8001050 <HAL_GPIO_Init+0x14c>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x152>
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	3b08      	subs	r3, #8
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	210f      	movs	r1, #15
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	6a39      	ldr	r1, [r7, #32]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	431a      	orrs	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80b1 	beq.w	80011e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001084:	4b4d      	ldr	r3, [pc, #308]	@ (80011bc <HAL_GPIO_Init+0x2b8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a4c      	ldr	r2, [pc, #304]	@ (80011bc <HAL_GPIO_Init+0x2b8>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b4a      	ldr	r3, [pc, #296]	@ (80011bc <HAL_GPIO_Init+0x2b8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800109c:	4a48      	ldr	r2, [pc, #288]	@ (80011c0 <HAL_GPIO_Init+0x2bc>)
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a40      	ldr	r2, [pc, #256]	@ (80011c4 <HAL_GPIO_Init+0x2c0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d013      	beq.n	80010f0 <HAL_GPIO_Init+0x1ec>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a3f      	ldr	r2, [pc, #252]	@ (80011c8 <HAL_GPIO_Init+0x2c4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00d      	beq.n	80010ec <HAL_GPIO_Init+0x1e8>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a3e      	ldr	r2, [pc, #248]	@ (80011cc <HAL_GPIO_Init+0x2c8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1e4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a3d      	ldr	r2, [pc, #244]	@ (80011d0 <HAL_GPIO_Init+0x2cc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_GPIO_Init+0x1e0>
 80010e0:	2303      	movs	r3, #3
 80010e2:	e006      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010f0:	2300      	movs	r3, #0
 80010f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001102:	492f      	ldr	r1, [pc, #188]	@ (80011c0 <HAL_GPIO_Init+0x2bc>)
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800111c:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	492c      	ldr	r1, [pc, #176]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800112a:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	43db      	mvns	r3, r3
 8001132:	4928      	ldr	r1, [pc, #160]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001134:	4013      	ands	r3, r2
 8001136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	4922      	ldr	r1, [pc, #136]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	60cb      	str	r3, [r1, #12]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	491e      	ldr	r1, [pc, #120]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800115c:	4013      	ands	r3, r2
 800115e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4918      	ldr	r1, [pc, #96]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4914      	ldr	r1, [pc, #80]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d021      	beq.n	80011d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	490e      	ldr	r1, [pc, #56]	@ (80011d4 <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e021      	b.n	80011e6 <HAL_GPIO_Init+0x2e2>
 80011a2:	bf00      	nop
 80011a4:	10320000 	.word	0x10320000
 80011a8:	10310000 	.word	0x10310000
 80011ac:	10220000 	.word	0x10220000
 80011b0:	10210000 	.word	0x10210000
 80011b4:	10120000 	.word	0x10120000
 80011b8:	10110000 	.word	0x10110000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_GPIO_Init+0x304>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	4909      	ldr	r1, [pc, #36]	@ (8001208 <HAL_GPIO_Init+0x304>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	3301      	adds	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f ae8e 	bne.w	8000f18 <HAL_GPIO_Init+0x14>
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	372c      	adds	r7, #44	@ 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124a:	787b      	ldrb	r3, [r7, #1]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001256:	e003      	b.n	8001260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
	...

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f7fe ffcc 	bl	8000228 <HAL_GPIO_EXTI_Callback>
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e272      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8087 	beq.w	80013ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012bc:	4b92      	ldr	r3, [pc, #584]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d00c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d112      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
 80012d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e0:	d10b      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4b89      	ldr	r3, [pc, #548]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d06c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x12c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d168      	bne.n	80013c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e24c      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x76>
 8001304:	4b80      	ldr	r3, [pc, #512]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a7f      	ldr	r2, [pc, #508]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e02e      	b.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x98>
 800131a:	4b7b      	ldr	r3, [pc, #492]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7a      	ldr	r2, [pc, #488]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a77      	ldr	r2, [pc, #476]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800132c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0xbc>
 800133e:	4b72      	ldr	r3, [pc, #456]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a71      	ldr	r2, [pc, #452]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b6f      	ldr	r3, [pc, #444]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6e      	ldr	r2, [pc, #440]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001358:	4b6b      	ldr	r3, [pc, #428]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a6a      	ldr	r2, [pc, #424]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b68      	ldr	r3, [pc, #416]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a67      	ldr	r2, [pc, #412]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcac 	bl	8000cd4 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fca8 	bl	8000cd4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e200      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xe4>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc98 	bl	8000cd4 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc94 	bl	8000cd4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	@ 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1ec      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b53      	ldr	r3, [pc, #332]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x10c>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x18c>
 80013ee:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b43      	ldr	r3, [pc, #268]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c0      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4939      	ldr	r1, [pc, #228]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fc4d 	bl	8000cd4 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc49 	bl	8000cd4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a1      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4927      	ldr	r1, [pc, #156]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc2c 	bl	8000cd4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc28 	bl	8000cd4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e180      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d03a      	beq.n	8001520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d019      	beq.n	80014e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_RCC_OscConfig+0x274>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fc0c 	bl	8000cd4 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fc08 	bl	8000cd4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e160      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 face 	bl	8001a80 <RCC_Delay>
 80014e4:	e01c      	b.n	8001520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbf2 	bl	8000cd4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f2:	e00f      	b.n	8001514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbee 	bl	8000cd4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d908      	bls.n	8001514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e146      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	42420000 	.word	0x42420000
 8001510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b92      	ldr	r3, [pc, #584]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e9      	bne.n	80014f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a6 	beq.w	800167a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b8b      	ldr	r3, [pc, #556]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10d      	bne.n	800155a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b88      	ldr	r3, [pc, #544]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a87      	ldr	r2, [pc, #540]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b85      	ldr	r3, [pc, #532]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b82      	ldr	r3, [pc, #520]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b7f      	ldr	r3, [pc, #508]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7e      	ldr	r2, [pc, #504]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbaf 	bl	8000cd4 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fbab 	bl	8000cd4 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	@ 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e103      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b75      	ldr	r3, [pc, #468]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x312>
 80015a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6213      	str	r3, [r2, #32]
 80015ac:	e02d      	b.n	800160a <HAL_RCC_OscConfig+0x36e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x334>
 80015b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	4b67      	ldr	r3, [pc, #412]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a66      	ldr	r2, [pc, #408]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	e01c      	b.n	800160a <HAL_RCC_OscConfig+0x36e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x356>
 80015d8:	4b61      	ldr	r3, [pc, #388]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a60      	ldr	r2, [pc, #384]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x36e>
 80015f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	4b58      	ldr	r3, [pc, #352]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a57      	ldr	r2, [pc, #348]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fb5f 	bl	8000cd4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb5b 	bl	8000cd4 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0b1      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b4b      	ldr	r3, [pc, #300]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCC_OscConfig+0x37e>
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb49 	bl	8000cd4 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fb45 	bl	8000cd4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e09b      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4b3c      	ldr	r3, [pc, #240]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a3b      	ldr	r2, [pc, #236]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8087 	beq.w	8001792 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d061      	beq.n	8001754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d146      	bne.n	8001726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b33      	ldr	r3, [pc, #204]	@ (8001768 <HAL_RCC_OscConfig+0x4cc>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fb19 	bl	8000cd4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fb15 	bl	8000cd4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e06d      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4921      	ldr	r1, [pc, #132]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a19      	ldr	r1, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	430b      	orrs	r3, r1
 80016f2:	491b      	ldr	r1, [pc, #108]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x4cc>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fae9 	bl	8000cd4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fae5 	bl	8000cd4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x46a>
 8001724:	e035      	b.n	8001792 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fad2 	bl	8000cd4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff face 	bl	8000cd4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e026      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x498>
 8001752:	e01e      	b.n	8001792 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e019      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
 8001760:	40021000 	.word	0x40021000
 8001764:	40007000 	.word	0x40007000
 8001768:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_RCC_OscConfig+0x500>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0d0      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d910      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	4965      	ldr	r1, [pc, #404]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a52      	ldr	r2, [pc, #328]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800181e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d040      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e073      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06b      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187e:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f023 0203 	bic.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4936      	ldr	r1, [pc, #216]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff fa20 	bl	8000cd4 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff fa1c 	bl	8000cd4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e053      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 020c 	and.w	r2, r3, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1eb      	bne.n	8001898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d210      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 0207 	bic.w	r2, r3, #7
 80018d6:	4922      	ldr	r1, [pc, #136]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	@ (8001968 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1cc>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1d0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f97e 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	08002868 	.word	0x08002868
 800196c:	20000030 	.word	0x20000030
 8001970:	20000034 	.word	0x20000034

08001974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x30>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x36>
 80019a2:	e027      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019a6:	613b      	str	r3, [r7, #16]
      break;
 80019a8:	e027      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0c5b      	lsrs	r3, r3, #17
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	4a11      	ldr	r2, [pc, #68]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019d6:	fb03 f202 	mul.w	r2, r3, r2
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e004      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	613b      	str	r3, [r7, #16]
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	613b      	str	r3, [r7, #16]
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	693b      	ldr	r3, [r7, #16]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	007a1200 	.word	0x007a1200
 8001a10:	08002880 	.word	0x08002880
 8001a14:	08002890 	.word	0x08002890
 8001a18:	003d0900 	.word	0x003d0900

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b02      	ldr	r3, [pc, #8]	@ (8001a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000030 	.word	0x20000030

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff2 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08002878 	.word	0x08002878

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0adb      	lsrs	r3, r3, #11
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	@ (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08002878 	.word	0x08002878

08001a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <RCC_Delay+0x34>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <RCC_Delay+0x38>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0a5b      	lsrs	r3, r3, #9
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a9c:	bf00      	nop
  }
  while (Delay --);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <RCC_Delay+0x1c>
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000030 	.word	0x20000030
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe ff02 	bl	80008ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 fb26 	bl	800214c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_TIM_PWM_Start+0x24>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	e022      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x6a>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d109      	bne.n	8001b9a <HAL_TIM_PWM_Start+0x3e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	bf14      	ite	ne
 8001b92:	2301      	movne	r3, #1
 8001b94:	2300      	moveq	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	e015      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x6a>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d109      	bne.n	8001bb4 <HAL_TIM_PWM_Start+0x58>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e008      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x6a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e05e      	b.n	8001c8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <HAL_TIM_PWM_Start+0x82>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bdc:	e013      	b.n	8001c06 <HAL_TIM_PWM_Start+0xaa>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d104      	bne.n	8001bee <HAL_TIM_PWM_Start+0x92>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bec:	e00b      	b.n	8001c06 <HAL_TIM_PWM_Start+0xaa>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_PWM_Start+0xa2>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bfc:	e003      	b.n	8001c06 <HAL_TIM_PWM_Start+0xaa>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fc92 	bl	8002538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <HAL_TIM_PWM_Start+0x138>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d107      	bne.n	8001c2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_TIM_PWM_Start+0x138>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00e      	beq.n	8001c56 <HAL_TIM_PWM_Start+0xfa>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d009      	beq.n	8001c56 <HAL_TIM_PWM_Start+0xfa>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <HAL_TIM_PWM_Start+0x13c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d004      	beq.n	8001c56 <HAL_TIM_PWM_Start+0xfa>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <HAL_TIM_PWM_Start+0x140>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d111      	bne.n	8001c7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d010      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	e007      	b.n	8001c8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800

08001ca0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fc40 	bl	8002538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a29      	ldr	r2, [pc, #164]	@ (8001d64 <HAL_TIM_PWM_Stop+0xc4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d117      	bne.n	8001cf2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_TIM_PWM_Stop+0x52>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a1a      	ldr	r2, [r3, #32]
 8001cd8:	f240 4344 	movw	r3, #1092	@ 0x444
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_TIM_PWM_Stop+0x52>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a1a      	ldr	r2, [r3, #32]
 8001cf8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_TIM_PWM_Stop+0x82>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	f240 4344 	movw	r3, #1092	@ 0x444
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_TIM_PWM_Stop+0x82>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <HAL_TIM_PWM_Stop+0x92>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d30:	e013      	b.n	8001d5a <HAL_TIM_PWM_Stop+0xba>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d104      	bne.n	8001d42 <HAL_TIM_PWM_Stop+0xa2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d40:	e00b      	b.n	8001d5a <HAL_TIM_PWM_Stop+0xba>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_PWM_Stop+0xb2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d50:	e003      	b.n	8001d5a <HAL_TIM_PWM_Stop+0xba>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40012c00 	.word	0x40012c00

08001d68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e093      	b.n	8001ea4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fddb 	bl	800094c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dac:	f023 0307 	bic.w	r3, r3, #7
 8001db0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3304      	adds	r3, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f000 f9c5 	bl	800214c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001e08:	f023 030c 	bic.w	r3, r3, #12
 8001e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	4313      	orrs	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	011a      	lsls	r2, r3, #4
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4313      	orrs	r3, r2
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ebc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ec4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ecc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001ed4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d110      	bne.n	8001efe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e069      	b.n	8001fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001efc:	e031      	b.n	8001f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d110      	bne.n	8001f26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f04:	7bbb      	ldrb	r3, [r7, #14]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f0a:	7b3b      	ldrb	r3, [r7, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e055      	b.n	8001fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f24:	e01d      	b.n	8001f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f32:	7b7b      	ldrb	r3, [r7, #13]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d102      	bne.n	8001f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f38:	7b3b      	ldrb	r3, [r7, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e03e      	b.n	8001fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_TIM_Encoder_Start+0xc4>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d008      	beq.n	8001f80 <HAL_TIM_Encoder_Start+0xd4>
 8001f6e:	e00f      	b.n	8001f90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2201      	movs	r2, #1
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fadd 	bl	8002538 <TIM_CCxChannelCmd>
      break;
 8001f7e:	e016      	b.n	8001fae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	2104      	movs	r1, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fad5 	bl	8002538 <TIM_CCxChannelCmd>
      break;
 8001f8e:	e00e      	b.n	8001fae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 facd 	bl	8002538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fac6 	bl	8002538 <TIM_CCxChannelCmd>
      break;
 8001fac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0ae      	b.n	8002144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	f200 809f 	bhi.w	8002134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	08002031 	.word	0x08002031
 8002000:	08002135 	.word	0x08002135
 8002004:	08002135 	.word	0x08002135
 8002008:	08002135 	.word	0x08002135
 800200c:	08002071 	.word	0x08002071
 8002010:	08002135 	.word	0x08002135
 8002014:	08002135 	.word	0x08002135
 8002018:	08002135 	.word	0x08002135
 800201c:	080020b3 	.word	0x080020b3
 8002020:	08002135 	.word	0x08002135
 8002024:	08002135 	.word	0x08002135
 8002028:	08002135 	.word	0x08002135
 800202c:	080020f3 	.word	0x080020f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f8f6 	bl	8002228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0208 	orr.w	r2, r2, #8
 800204a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6999      	ldr	r1, [r3, #24]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	619a      	str	r2, [r3, #24]
      break;
 800206e:	e064      	b.n	800213a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f93c 	bl	80022f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800208a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800209a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6999      	ldr	r1, [r3, #24]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	021a      	lsls	r2, r3, #8
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	619a      	str	r2, [r3, #24]
      break;
 80020b0:	e043      	b.n	800213a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f985 	bl	80023c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0208 	orr.w	r2, r2, #8
 80020cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0204 	bic.w	r2, r2, #4
 80020dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69d9      	ldr	r1, [r3, #28]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	61da      	str	r2, [r3, #28]
      break;
 80020f0:	e023      	b.n	800213a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f9cf 	bl	800249c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800210c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69d9      	ldr	r1, [r3, #28]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	021a      	lsls	r2, r3, #8
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	61da      	str	r2, [r3, #28]
      break;
 8002132:	e002      	b.n	800213a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	75fb      	strb	r3, [r7, #23]
      break;
 8002138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002142:	7dfb      	ldrb	r3, [r7, #23]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a2f      	ldr	r2, [pc, #188]	@ (800221c <TIM_Base_SetConfig+0xd0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00b      	beq.n	800217c <TIM_Base_SetConfig+0x30>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d007      	beq.n	800217c <TIM_Base_SetConfig+0x30>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a2c      	ldr	r2, [pc, #176]	@ (8002220 <TIM_Base_SetConfig+0xd4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0x30>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a2b      	ldr	r2, [pc, #172]	@ (8002224 <TIM_Base_SetConfig+0xd8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d108      	bne.n	800218e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a22      	ldr	r2, [pc, #136]	@ (800221c <TIM_Base_SetConfig+0xd0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00b      	beq.n	80021ae <TIM_Base_SetConfig+0x62>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <TIM_Base_SetConfig+0xd4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002224 <TIM_Base_SetConfig+0xd8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <TIM_Base_SetConfig+0xd0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f023 0201 	bic.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
  }
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800

08002228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f023 0201 	bic.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f023 0302 	bic.w	r3, r3, #2
 8002270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <TIM_OC1_SetConfig+0xc8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10c      	bne.n	800229e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0308 	bic.w	r3, r3, #8
 800228a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a13      	ldr	r2, [pc, #76]	@ (80022f0 <TIM_OC1_SetConfig+0xc8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d111      	bne.n	80022ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	621a      	str	r2, [r3, #32]
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00

080022f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f023 0210 	bic.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800232a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0320 	bic.w	r3, r3, #32
 800233e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <TIM_OC2_SetConfig+0xd0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10d      	bne.n	8002370 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800235a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800236e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <TIM_OC2_SetConfig+0xd0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d113      	bne.n	80023a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800237e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	621a      	str	r2, [r3, #32]
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40012c00 	.word	0x40012c00

080023c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <TIM_OC3_SetConfig+0xd0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10d      	bne.n	8002442 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800242c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <TIM_OC3_SetConfig+0xd0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d113      	bne.n	8002472 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	621a      	str	r2, [r3, #32]
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40012c00 	.word	0x40012c00

0800249c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	031b      	lsls	r3, r3, #12
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002534 <TIM_OC4_SetConfig+0x98>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d109      	bne.n	8002510 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	019b      	lsls	r3, r3, #6
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	621a      	str	r2, [r3, #32]
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40012c00 	.word	0x40012c00

08002538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2201      	movs	r2, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002594:	2302      	movs	r3, #2
 8002596:	e046      	b.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a16      	ldr	r2, [pc, #88]	@ (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00e      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e4:	d009      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a10      	ldr	r2, [pc, #64]	@ (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10c      	bne.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40000400 	.word	0x40000400
 8002638:	40000800 	.word	0x40000800

0800263c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e042      	b.n	80026d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fa2c 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	@ 0x24
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800267e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f82b 	bl	80026dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002716:	f023 030c 	bic.w	r3, r3, #12
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	430b      	orrs	r3, r1
 8002722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2c      	ldr	r2, [pc, #176]	@ (80027f0 <UART_SetConfig+0x114>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d103      	bne.n	800274c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002744:	f7ff f988 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	e002      	b.n	8002752 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800274c:	f7ff f970 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8002750:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	4a22      	ldr	r2, [pc, #136]	@ (80027f4 <UART_SetConfig+0x118>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	0119      	lsls	r1, r3, #4
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fbb2 f2f3 	udiv	r2, r2, r3
 8002788:	4b1a      	ldr	r3, [pc, #104]	@ (80027f4 <UART_SetConfig+0x118>)
 800278a:	fba3 0302 	umull	r0, r3, r3, r2
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2064      	movs	r0, #100	@ 0x64
 8002792:	fb00 f303 	mul.w	r3, r0, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	3332      	adds	r3, #50	@ 0x32
 800279c:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <UART_SetConfig+0x118>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a8:	4419      	add	r1, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009a      	lsls	r2, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <UART_SetConfig+0x118>)
 80027c2:	fba3 0302 	umull	r0, r3, r3, r2
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2064      	movs	r0, #100	@ 0x64
 80027ca:	fb00 f303 	mul.w	r3, r0, r3
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	3332      	adds	r3, #50	@ 0x32
 80027d4:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <UART_SetConfig+0x118>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	440a      	add	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40013800 	.word	0x40013800
 80027f4:	51eb851f 	.word	0x51eb851f

080027f8 <memset>:
 80027f8:	4603      	mov	r3, r0
 80027fa:	4402      	add	r2, r0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <memset+0xa>
 8002800:	4770      	bx	lr
 8002802:	f803 1b01 	strb.w	r1, [r3], #1
 8002806:	e7f9      	b.n	80027fc <memset+0x4>

08002808 <__libc_init_array>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	2600      	movs	r6, #0
 800280c:	4d0c      	ldr	r5, [pc, #48]	@ (8002840 <__libc_init_array+0x38>)
 800280e:	4c0d      	ldr	r4, [pc, #52]	@ (8002844 <__libc_init_array+0x3c>)
 8002810:	1b64      	subs	r4, r4, r5
 8002812:	10a4      	asrs	r4, r4, #2
 8002814:	42a6      	cmp	r6, r4
 8002816:	d109      	bne.n	800282c <__libc_init_array+0x24>
 8002818:	f000 f81a 	bl	8002850 <_init>
 800281c:	2600      	movs	r6, #0
 800281e:	4d0a      	ldr	r5, [pc, #40]	@ (8002848 <__libc_init_array+0x40>)
 8002820:	4c0a      	ldr	r4, [pc, #40]	@ (800284c <__libc_init_array+0x44>)
 8002822:	1b64      	subs	r4, r4, r5
 8002824:	10a4      	asrs	r4, r4, #2
 8002826:	42a6      	cmp	r6, r4
 8002828:	d105      	bne.n	8002836 <__libc_init_array+0x2e>
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002830:	4798      	blx	r3
 8002832:	3601      	adds	r6, #1
 8002834:	e7ee      	b.n	8002814 <__libc_init_array+0xc>
 8002836:	f855 3b04 	ldr.w	r3, [r5], #4
 800283a:	4798      	blx	r3
 800283c:	3601      	adds	r6, #1
 800283e:	e7f2      	b.n	8002826 <__libc_init_array+0x1e>
 8002840:	08002894 	.word	0x08002894
 8002844:	08002894 	.word	0x08002894
 8002848:	08002894 	.word	0x08002894
 800284c:	08002898 	.word	0x08002898

08002850 <_init>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	bf00      	nop
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr

0800285c <_fini>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	bf00      	nop
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr
