
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  0800a0d0  0800a0d0  0000b0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac74  0800ac74  0000c214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac74  0800ac74  0000bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac7c  0800ac7c  0000c214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac7c  0800ac7c  0000bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac80  0800ac80  0000bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800ac84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000214  0800ae98  0000c214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  0800ae98  0000c9b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d45  00000000  00000000  0000c23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002920  00000000  00000000  0001ef82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  000218a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdb  00000000  00000000  00022cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a172  00000000  00000000  00023ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001679d  00000000  00000000  0003de15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f56  00000000  00000000  000545b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea508  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  000ea54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000f0d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0b8 	.word	0x0800a0b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	0800a0b8 	.word	0x0800a0b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <_write>:
/* USER CODE BEGIN 0 */

uint8_t Ledstatus;
//----------------------------------------------------------------------
// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d002      	beq.n	8000fa8 <_write+0x18>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d111      	bne.n	8000fcc <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <_write+0x48>)
 8000fb4:	f006 f852 	bl	800705c <HAL_UART_Transmit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <_write+0x36>
      return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e004      	b.n	8000fd0 <_write+0x40>
    else
      return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e001      	b.n	8000fd0 <_write+0x40>
  }
  return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200003e4 	.word	0x200003e4

08000fdc <prinLedStatus>:
uint16_t pins[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin,
                     LED5_Pin, LED6_Pin, LED7_Pin, LED8_Pin};
//----------------------------------------------------------------------
uint8_t Ledstatus;
void prinLedStatus()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  for (int i = 0; i < 8; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	e025      	b.n	8001034 <prinLedStatus+0x58>
  {
	if (Ledstatus & (1 << i))
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <prinLedStatus+0x68>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	fa42 f303 	asr.w	r3, r2, r3
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <prinLedStatus+0x3a>
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000ffc:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <prinLedStatus+0x6c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001004:	4a11      	ldr	r2, [pc, #68]	@ (800104c <prinLedStatus+0x70>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	f002 fd71 	bl	8003af6 <HAL_GPIO_WritePin>
 8001014:	e00b      	b.n	800102e <prinLedStatus+0x52>
	}else
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8001016:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <prinLedStatus+0x6c>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800101e:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <prinLedStatus+0x70>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	f002 fd64 	bl	8003af6 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b07      	cmp	r3, #7
 8001038:	ddd6      	ble.n	8000fe8 <prinLedStatus+0xc>
	}
  }

}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000042c 	.word	0x2000042c
 8001048:	20000008 	.word	0x20000008
 800104c:	20000028 	.word	0x20000028

08001050 <HandleButtons>:
//-----------------------------------------------------------------------------
void HandleButtons(uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
    if (Ledstatus == 0)
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HandleButtons+0x64>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HandleButtons+0x18>
    {
        Ledstatus = 1;
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HandleButtons+0x64>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == BTN1_Pin)
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d10d      	bne.n	800108a <HandleButtons+0x3a>
    {
        Ledstatus <<= 1;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HandleButtons+0x64>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HandleButtons+0x64>)
 8001078:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 1;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HandleButtons+0x64>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <HandleButtons+0x5a>
 8001082:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <HandleButtons+0x64>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
    else if (GPIO_Pin == BTN2_Pin)
    {
        Ledstatus >>= 1;
        if (Ledstatus == 0) Ledstatus = 0x80;
    }
}
 8001088:	e00f      	b.n	80010aa <HandleButtons+0x5a>
    else if (GPIO_Pin == BTN2_Pin)
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d10c      	bne.n	80010aa <HandleButtons+0x5a>
        Ledstatus >>= 1;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HandleButtons+0x64>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	085b      	lsrs	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HandleButtons+0x64>)
 800109a:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 0x80;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HandleButtons+0x64>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <HandleButtons+0x5a>
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HandleButtons+0x64>)
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	701a      	strb	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	2000042c 	.word	0x2000042c

080010b8 <HAL_GPIO_EXTI_Callback>:


//--------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t PGIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	HandleButtons(PGIO_Pin);
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffc3 	bl	8001050 <HandleButtons>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <handlSlideSwitch>:
//--------------------------------------------------------------------------

void handlSlideSwitch()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 80010da:	2101      	movs	r1, #1
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <handlSlideSwitch+0x38>)
 80010de:	f002 fcf3 	bl	8003ac8 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <handlSlideSwitch+0x24>
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2110      	movs	r1, #16
 80010f0:	4806      	ldr	r0, [pc, #24]	@ (800110c <handlSlideSwitch+0x38>)
 80010f2:	f002 fd00 	bl	8003af6 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
	}
}
 80010f6:	e004      	b.n	8001102 <handlSlideSwitch+0x2e>
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2110      	movs	r1, #16
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <handlSlideSwitch+0x38>)
 80010fe:	f002 fcfa 	bl	8003af6 <HAL_GPIO_WritePin>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40011000 	.word	0x40011000

08001110 <Buzzer_SetDuty>:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, g); // Зелёный
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, b); // Синий
}
//---------------------------------------------------------------------------

void Buzzer_SetDuty(uint16_t duty) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
    if (duty > htim2.Init.Period) duty = htim2.Init.Period;
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <Buzzer_SetDuty+0x2c>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d902      	bls.n	800112a <Buzzer_SetDuty+0x1a>
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <Buzzer_SetDuty+0x2c>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <Buzzer_SetDuty+0x2c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	2000030c 	.word	0x2000030c

08001140 <handlSlideToBuzzer>:


//--------------------------------------------------------------------------
void handlSlideToBuzzer()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 8001146:	2101      	movs	r1, #1
 8001148:	480e      	ldr	r0, [pc, #56]	@ (8001184 <handlSlideToBuzzer+0x44>)
 800114a:	f002 fcbd 	bl	8003ac8 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10c      	bne.n	8001172 <handlSlideToBuzzer+0x32>
	{
		 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001158:	2100      	movs	r1, #0
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <handlSlideToBuzzer+0x48>)
 800115c:	f005 f9be 	bl	80064dc <HAL_TIM_PWM_Start>
		 Buzzer_SetDuty( (htim2.Init.Period + 1) / 2 );
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <handlSlideToBuzzer+0x48>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffd0 	bl	8001110 <Buzzer_SetDuty>
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	}
}
 8001170:	e003      	b.n	800117a <handlSlideToBuzzer+0x3a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <handlSlideToBuzzer+0x48>)
 8001176:	f005 fa53 	bl	8006620 <HAL_TIM_PWM_Stop>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40011000 	.word	0x40011000
 8001188:	2000030c 	.word	0x2000030c

0800118c <UpdateEncoder>:
const uint8_t led_sequence[8] = {1, 3, 7, 15, 31, 63, 127, 255};
uint16_t adc_value = 0;
//-------------------------------------------------------------------------

void UpdateEncoder()
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	    uint16_t curr_cnt = TIM3->CNT;
 8001192:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <UpdateEncoder+0xbc>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	80bb      	strh	r3, [r7, #4]
	    int16_t diff = curr_cnt - last_cnt;
 8001198:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <UpdateEncoder+0xc0>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	88ba      	ldrh	r2, [r7, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	80fb      	strh	r3, [r7, #6]

	    // Обработка переполнения с ARR = 30
	    if(diff > 15) {
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	dd04      	ble.n	80011b6 <UpdateEncoder+0x2a>
	        diff -= 30;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	3b1e      	subs	r3, #30
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	e008      	b.n	80011c8 <UpdateEncoder+0x3c>
	    }
	    else if(diff < -15) {
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	f113 0f0f 	cmn.w	r3, #15
 80011be:	da03      	bge.n	80011c8 <UpdateEncoder+0x3c>
	        diff += 30;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	331e      	adds	r3, #30
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
	    }

	    encoder_value += diff;
 80011c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <UpdateEncoder+0xc4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <UpdateEncoder+0xc4>)
 80011d4:	6013      	str	r3, [r2, #0]
	    last_cnt = curr_cnt;
 80011d6:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <UpdateEncoder+0xc0>)
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	8013      	strh	r3, [r2, #0]

	    // Изменяем индекс только при значительном изменении положения
	    static int8_t accumulated_diff = 0;
	    accumulated_diff += diff;
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <UpdateEncoder+0xc8>)
 80011e2:	f993 3000 	ldrsb.w	r3, [r3]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <UpdateEncoder+0xc8>)
 80011f0:	701a      	strb	r2, [r3, #0]

	    if(accumulated_diff >= 4) { // Порог срабатывания +
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <UpdateEncoder+0xc8>)
 80011f4:	f993 3000 	ldrsb.w	r3, [r3]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	dd0d      	ble.n	8001218 <UpdateEncoder+0x8c>
	        if(active_leds < 7) active_leds++;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <UpdateEncoder+0xcc>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b06      	cmp	r3, #6
 8001202:	d805      	bhi.n	8001210 <UpdateEncoder+0x84>
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <UpdateEncoder+0xcc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <UpdateEncoder+0xcc>)
 800120e:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 8001210:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <UpdateEncoder+0xc8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
	        if(active_leds > 0) active_leds--;
	        accumulated_diff = 0;
	    }

}
 8001216:	e012      	b.n	800123e <UpdateEncoder+0xb2>
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <UpdateEncoder+0xc8>)
 800121a:	f993 3000 	ldrsb.w	r3, [r3]
 800121e:	f113 0f03 	cmn.w	r3, #3
 8001222:	da0c      	bge.n	800123e <UpdateEncoder+0xb2>
	        if(active_leds > 0) active_leds--;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <UpdateEncoder+0xcc>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <UpdateEncoder+0xac>
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <UpdateEncoder+0xcc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <UpdateEncoder+0xcc>)
 8001236:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <UpdateEncoder+0xc8>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40000400 	.word	0x40000400
 800124c:	20000454 	.word	0x20000454
 8001250:	20000430 	.word	0x20000430
 8001254:	20000456 	.word	0x20000456
 8001258:	20000434 	.word	0x20000434

0800125c <HandlAdctoLed>:


//-------------------------------------------------------------------------

int HandlAdctoLed(float value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	int index = (int)(value / 0.5f); // шаг 0.5 В
 8001264:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fdcf 	bl	8000e0c <__aeabi_fdiv>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe67 	bl	8000f44 <__aeabi_f2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	60fb      	str	r3, [r7, #12]
	if(index > 7) index = 7;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b07      	cmp	r3, #7
 800127e:	dd01      	ble.n	8001284 <HandlAdctoLed+0x28>
 8001280:	2307      	movs	r3, #7
 8001282:	60fb      	str	r3, [r7, #12]
	return led_sequence[index];
 8001284:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <HandlAdctoLed+0x38>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800a8bc 	.word	0x0800a8bc

08001298 <AHT10_Init>:
float AHT10_Temperature;
float AHT10_Humidity;


void AHT10_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
    uint8_t init_cmd[3] = {AHT10_INIT_CMD, 0x08, 0x00}; // 0x08 — калибровка
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <AHT10_Init+0x38>)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	4611      	mov	r1, r2
 80012a6:	8019      	strh	r1, [r3, #0]
 80012a8:	3302      	adds	r3, #2
 80012aa:	0c12      	lsrs	r2, r2, #16
 80012ac:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADDR, init_cmd, 3, 100);
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	2364      	movs	r3, #100	@ 0x64
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2303      	movs	r3, #3
 80012b6:	2170      	movs	r1, #112	@ 0x70
 80012b8:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <AHT10_Init+0x3c>)
 80012ba:	f002 fd91 	bl	8003de0 <HAL_I2C_Master_Transmit>
    HAL_Delay(500);
 80012be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c2:	f001 fd1f 	bl	8002d04 <HAL_Delay>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800a0d0 	.word	0x0800a0d0
 80012d4:	20000260 	.word	0x20000260

080012d8 <AHT10_ReadData>:


void AHT10_ReadData(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8
    uint8_t measure_cmd[3] = {AHT10_MEASURE_CMD, AHT10_DATA0, AHT10_DATA1};
 80012de:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <AHT10_ReadData+0xd0>)
 80012e0:	463b      	mov	r3, r7
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	4611      	mov	r1, r2
 80012e6:	8019      	strh	r1, [r3, #0]
 80012e8:	3302      	adds	r3, #2
 80012ea:	0c12      	lsrs	r2, r2, #16
 80012ec:	701a      	strb	r2, [r3, #0]


    HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADDR, measure_cmd, 3, 100);
 80012ee:	463a      	mov	r2, r7
 80012f0:	2364      	movs	r3, #100	@ 0x64
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2303      	movs	r3, #3
 80012f6:	2170      	movs	r1, #112	@ 0x70
 80012f8:	482c      	ldr	r0, [pc, #176]	@ (80013ac <AHT10_ReadData+0xd4>)
 80012fa:	f002 fd71 	bl	8003de0 <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 80012fe:	2064      	movs	r0, #100	@ 0x64
 8001300:	f001 fd00 	bl	8002d04 <HAL_Delay>


    HAL_I2C_Master_Receive(&hi2c2, AHT10_ADDR, AHT10_RX_Data, 6, 100);
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2306      	movs	r3, #6
 800130a:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <AHT10_ReadData+0xd8>)
 800130c:	2170      	movs	r1, #112	@ 0x70
 800130e:	4827      	ldr	r0, [pc, #156]	@ (80013ac <AHT10_ReadData+0xd4>)
 8001310:	f002 fe64 	bl	8003fdc <HAL_I2C_Master_Receive>


    uint32_t hum_raw = ((uint32_t)(AHT10_RX_Data[1]) << 12) |
 8001314:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	031a      	lsls	r2, r3, #12
                       ((uint32_t)(AHT10_RX_Data[2]) << 4)  |
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <AHT10_ReadData+0xd8>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	011b      	lsls	r3, r3, #4
    uint32_t hum_raw = ((uint32_t)(AHT10_RX_Data[1]) << 12) |
 8001320:	4313      	orrs	r3, r2
                       ((AHT10_RX_Data[3] & 0xF0) >> 4);
 8001322:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001324:	78d2      	ldrb	r2, [r2, #3]
 8001326:	0912      	lsrs	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
    uint32_t hum_raw = ((uint32_t)(AHT10_RX_Data[1]) << 12) |
 800132a:	4313      	orrs	r3, r2
 800132c:	607b      	str	r3, [r7, #4]

    AHT10_Humidity = ((float)hum_raw / 1048576.0f) * 100.0f;
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fc60 	bl	8000bf4 <__aeabi_ui2f>
 8001334:	4603      	mov	r3, r0
 8001336:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd66 	bl	8000e0c <__aeabi_fdiv>
 8001340:	4603      	mov	r3, r0
 8001342:	491c      	ldr	r1, [pc, #112]	@ (80013b4 <AHT10_ReadData+0xdc>)
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fcad 	bl	8000ca4 <__aeabi_fmul>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <AHT10_ReadData+0xe0>)
 8001350:	601a      	str	r2, [r3, #0]


    AHT10_ADC_Raw = ((uint32_t)(AHT10_RX_Data[3] & 0x0F) << 16) |
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                    ((uint32_t)(AHT10_RX_Data[4]) << 8) |
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <AHT10_ReadData+0xd8>)
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	021b      	lsls	r3, r3, #8
    AHT10_ADC_Raw = ((uint32_t)(AHT10_RX_Data[3] & 0x0F) << 16) |
 8001362:	4313      	orrs	r3, r2
                    (AHT10_RX_Data[5]);
 8001364:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001366:	7952      	ldrb	r2, [r2, #5]
                    ((uint32_t)(AHT10_RX_Data[4]) << 8) |
 8001368:	4313      	orrs	r3, r2
    AHT10_ADC_Raw = ((uint32_t)(AHT10_RX_Data[3] & 0x0F) << 16) |
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <AHT10_ReadData+0xe4>)
 800136c:	6013      	str	r3, [r2, #0]

    AHT10_Temperature = ((float)AHT10_ADC_Raw / 1048576.0f) * 200.0f - 50.0f;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <AHT10_ReadData+0xe4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fc3e 	bl	8000bf4 <__aeabi_ui2f>
 8001378:	4603      	mov	r3, r0
 800137a:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd44 	bl	8000e0c <__aeabi_fdiv>
 8001384:	4603      	mov	r3, r0
 8001386:	490e      	ldr	r1, [pc, #56]	@ (80013c0 <AHT10_ReadData+0xe8>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc8b 	bl	8000ca4 <__aeabi_fmul>
 800138e:	4603      	mov	r3, r0
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <AHT10_ReadData+0xec>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb7c 	bl	8000a90 <__aeabi_fsub>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <AHT10_ReadData+0xf0>)
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	0800a0d4 	.word	0x0800a0d4
 80013ac:	20000260 	.word	0x20000260
 80013b0:	20000438 	.word	0x20000438
 80013b4:	42c80000 	.word	0x42c80000
 80013b8:	20000448 	.word	0x20000448
 80013bc:	20000440 	.word	0x20000440
 80013c0:	43480000 	.word	0x43480000
 80013c4:	42480000 	.word	0x42480000
 80013c8:	20000444 	.word	0x20000444

080013cc <EEPROM_CS_Enable>:
#define T_WP_MAX_MS    5    // Maximum write cycle time

static SPI_HandleTypeDef *eeprom_spi = &hspi2;

// Chip Select control
static inline void EEPROM_CS_Enable(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2140      	movs	r1, #64	@ 0x40
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <EEPROM_CS_Enable+0x18>)
 80013d6:	f002 fb8e 	bl	8003af6 <HAL_GPIO_WritePin>
    HAL_Delay(T_CS_MIN_US);  // Meet tCS requirement
 80013da:	2001      	movs	r0, #1
 80013dc:	f001 fc92 	bl	8002d04 <HAL_Delay>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40011000 	.word	0x40011000

080013e8 <EEPROM_CS_Disable>:

static inline void EEPROM_CS_Disable(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2140      	movs	r1, #64	@ 0x40
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <EEPROM_CS_Disable+0x14>)
 80013f2:	f002 fb80 	bl	8003af6 <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40011000 	.word	0x40011000

08001400 <EEPROM_CheckReady>:

// Check Ready/Busy status (via DO pin)
static bool EEPROM_CheckReady(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    uint8_t status;
    EEPROM_CS_Enable();
 8001406:	f7ff ffe1 	bl	80013cc <EEPROM_CS_Enable>
    HAL_SPI_Receive(eeprom_spi, &status, 1, HAL_MAX_DELAY);
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <EEPROM_CheckReady+0x38>)
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	1df9      	adds	r1, r7, #7
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	2201      	movs	r2, #1
 8001416:	f004 fc45 	bl	8005ca4 <HAL_SPI_Receive>
    EEPROM_CS_Disable();
 800141a:	f7ff ffe5 	bl	80013e8 <EEPROM_CS_Disable>
    return (status & 0x01);  // Ready when DO = 1
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000038 	.word	0x20000038

0800143c <EEPROM_WaitReady>:

// Wait for write completion with timeout
static bool EEPROM_WaitReady(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
    uint32_t start = HAL_GetTick();
 8001442:	f001 fc55 	bl	8002cf0 <HAL_GetTick>
 8001446:	6078      	str	r0, [r7, #4]
    while(!EEPROM_CheckReady()) {
 8001448:	e008      	b.n	800145c <EEPROM_WaitReady+0x20>
        if(HAL_GetTick() - start > T_WP_MAX_MS) {
 800144a:	f001 fc51 	bl	8002cf0 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d901      	bls.n	800145c <EEPROM_WaitReady+0x20>
            return false;  // Timeout
 8001458:	2300      	movs	r3, #0
 800145a:	e008      	b.n	800146e <EEPROM_WaitReady+0x32>
    while(!EEPROM_CheckReady()) {
 800145c:	f7ff ffd0 	bl	8001400 <EEPROM_CheckReady>
 8001460:	4603      	mov	r3, r0
 8001462:	f083 0301 	eor.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <EEPROM_WaitReady+0xe>
        }
    }
    return true;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <EEPROM_EWEN>:


// Enable Write Operations
void EEPROM_EWEN(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
    uint16_t cmd = (1 << 8) | (CMD_EWEN << 6) | (EWEN_ADDR << 0);
 800147e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8001482:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2] = {cmd >> 8, cmd & 0xFF};
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b29b      	uxth	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	713b      	strb	r3, [r7, #4]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	717b      	strb	r3, [r7, #5]
    EEPROM_CS_Enable();
 8001494:	f7ff ff9a 	bl	80013cc <EEPROM_CS_Enable>
    HAL_SPI_Transmit(eeprom_spi, buf, 2, HAL_MAX_DELAY);
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <EEPROM_EWEN+0x3c>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2202      	movs	r2, #2
 80014a4:	f004 faba 	bl	8005a1c <HAL_SPI_Transmit>
    EEPROM_CS_Disable();
 80014a8:	f7ff ff9e 	bl	80013e8 <EEPROM_CS_Disable>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000038 	.word	0x20000038

080014b8 <EEPROM_EWDS>:

// Disable Write Operations
void EEPROM_EWDS(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
    uint16_t cmd = (1 << 8) | (CMD_EWDS << 6) | (EWDS_ADDR << 0);
 80014be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c2:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2] = {cmd >> 8, cmd & 0xFF};
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	713b      	strb	r3, [r7, #4]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	717b      	strb	r3, [r7, #5]
    EEPROM_CS_Enable();
 80014d4:	f7ff ff7a 	bl	80013cc <EEPROM_CS_Enable>
    HAL_SPI_Transmit(eeprom_spi, buf, 2, HAL_MAX_DELAY);
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <EEPROM_EWDS+0x3c>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	1d39      	adds	r1, r7, #4
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	2202      	movs	r2, #2
 80014e4:	f004 fa9a 	bl	8005a1c <HAL_SPI_Transmit>
    EEPROM_CS_Disable();
 80014e8:	f7ff ff7e 	bl	80013e8 <EEPROM_CS_Disable>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000038 	.word	0x20000038

080014f8 <EEPROM_ReadWord>:
    // Shift right by 7 bits to remove trailing 1s, then mask 16 bits
    return (raw_data >> 7) & 0xFFFF;
}

// Read 16-bit word (with proper dummy bit handling)
uint16_t EEPROM_ReadWord(uint8_t address) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint16_t cmd = (1 << 8) | (CMD_READ << 6) | (address & 0x3F);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	b21b      	sxth	r3, r3
 8001506:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800150a:	b21b      	sxth	r3, r3
 800150c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8001510:	b21b      	sxth	r3, r3
 8001512:	82fb      	strh	r3, [r7, #22]
	uint8_t tx[2] = {cmd >> 8, cmd & 0xFF};
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	733b      	strb	r3, [r7, #12]
 800151e:	8afb      	ldrh	r3, [r7, #22]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	737b      	strb	r3, [r7, #13]
	uint8_t rx[3] = {0};
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2100      	movs	r1, #0
 800152a:	460a      	mov	r2, r1
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	460a      	mov	r2, r1
 8001530:	709a      	strb	r2, [r3, #2]

	EEPROM_CS_Enable();
 8001532:	f7ff ff4b 	bl	80013cc <EEPROM_CS_Enable>
	HAL_SPI_Transmit(eeprom_spi, tx, 2, HAL_MAX_DELAY);
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <EEPROM_ReadWord+0x84>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	f107 010c 	add.w	r1, r7, #12
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	2202      	movs	r2, #2
 8001544:	f004 fa6a 	bl	8005a1c <HAL_SPI_Transmit>
	HAL_SPI_Receive(eeprom_spi, rx, 3, HAL_MAX_DELAY);
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <EEPROM_ReadWord+0x84>)
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2203      	movs	r2, #3
 8001556:	f004 fba5 	bl	8005ca4 <HAL_SPI_Receive>
	EEPROM_CS_Disable();
 800155a:	f7ff ff45 	bl	80013e8 <EEPROM_CS_Disable>

	// Combine all 24 bits received
	uint32_t raw_data = ((uint32_t)rx[0] << 16) | ((uint32_t)rx[1] << 8) | rx[2];
 800155e:	7a3b      	ldrb	r3, [r7, #8]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	4313      	orrs	r3, r2
 8001568:	7aba      	ldrb	r2, [r7, #10]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]

	// Extract correct 16 bits (bits 7-22)
	return (raw_data >> 7) & 0xFFFF;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	09db      	lsrs	r3, r3, #7
 8001572:	b29b      	uxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000038 	.word	0x20000038

08001580 <EEPROM_WriteWord>:

// Write 16-bit word with full protocol
bool EEPROM_WriteWord(uint8_t address, uint16_t data) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	80bb      	strh	r3, [r7, #4]
    // 1. Enable writes
    EEPROM_EWEN();
 8001590:	f7ff ff72 	bl	8001478 <EEPROM_EWEN>

    // 2. Prepare write command + data
    uint16_t cmd = (1 << 8) | (CMD_WRITE << 6) | (address & 0x3F);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	b21b      	sxth	r3, r3
 8001598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800159c:	b21b      	sxth	r3, r3
 800159e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	82fb      	strh	r3, [r7, #22]
    uint8_t tx[4] = {cmd >> 8, cmd & 0xFF, data >> 8, data & 0xFF};
 80015a6:	8afb      	ldrh	r3, [r7, #22]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	743b      	strb	r3, [r7, #16]
 80015b0:	8afb      	ldrh	r3, [r7, #22]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	747b      	strb	r3, [r7, #17]
 80015b6:	88bb      	ldrh	r3, [r7, #4]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	74bb      	strb	r3, [r7, #18]
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	74fb      	strb	r3, [r7, #19]

    // 3. Start write operation
    EEPROM_CS_Enable();
 80015c6:	f7ff ff01 	bl	80013cc <EEPROM_CS_Enable>
    HAL_SPI_Transmit(eeprom_spi, tx, 4, HAL_MAX_DELAY);
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <EEPROM_WriteWord+0xa4>)
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	f107 0110 	add.w	r1, r7, #16
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	2204      	movs	r2, #4
 80015d8:	f004 fa20 	bl	8005a1c <HAL_SPI_Transmit>

    // 4. Check status immediately (before CS goes high)
    uint8_t status;
    HAL_SPI_Receive(eeprom_spi, &status, 1, HAL_MAX_DELAY);
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <EEPROM_WriteWord+0xa4>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	f107 010f 	add.w	r1, r7, #15
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	2201      	movs	r2, #1
 80015ea:	f004 fb5b 	bl	8005ca4 <HAL_SPI_Receive>
    EEPROM_CS_Disable();
 80015ee:	f7ff fefb 	bl	80013e8 <EEPROM_CS_Disable>

    // 5. If we got status, wait for completion
    if(status & 0x01) {
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <EEPROM_WriteWord+0x80>
        return true;  // Already done
 80015fc:	2301      	movs	r3, #1
 80015fe:	e00c      	b.n	800161a <EEPROM_WriteWord+0x9a>
    }

    // 6. Otherwise wait with timeout
    if(!EEPROM_WaitReady()) {
 8001600:	f7ff ff1c 	bl	800143c <EEPROM_WaitReady>
 8001604:	4603      	mov	r3, r0
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <EEPROM_WriteWord+0x94>
        return false;  // Write failed
 8001610:	2300      	movs	r3, #0
 8001612:	e002      	b.n	800161a <EEPROM_WriteWord+0x9a>
    }

    // 7. Disable writes (recommended)
    EEPROM_EWDS();
 8001614:	f7ff ff50 	bl	80014b8 <EEPROM_EWDS>
    return true;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000038 	.word	0x20000038

08001628 <FM25F01C_CS_Low>:
uint8_t write_val_nor[4] = {0};




void FM25F01C_CS_Low(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET );
 800162c:	2201      	movs	r2, #1
 800162e:	2104      	movs	r1, #4
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <FM25F01C_CS_Low+0x14>)
 8001632:	f002 fa60 	bl	8003af6 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010c00 	.word	0x40010c00

08001640 <FM25F01C_CS_High>:

void FM25F01C_CS_High(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET );
 8001644:	2200      	movs	r2, #0
 8001646:	2104      	movs	r1, #4
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <FM25F01C_CS_High+0x14>)
 800164a:	f002 fa54 	bl	8003af6 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40010c00 	.word	0x40010c00

08001658 <FM25F01C_WriteEnable>:



void FM25F01C_WriteEnable(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06; // WREN instruction
 800165e:	2306      	movs	r3, #6
 8001660:	71fb      	strb	r3, [r7, #7]
    FM25F01C_CS_Low();
 8001662:	f7ff ffe1 	bl	8001628 <FM25F01C_CS_Low>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001666:	1df9      	adds	r1, r7, #7
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2201      	movs	r2, #1
 800166e:	4804      	ldr	r0, [pc, #16]	@ (8001680 <FM25F01C_WriteEnable+0x28>)
 8001670:	f004 f9d4 	bl	8005a1c <HAL_SPI_Transmit>
    FM25F01C_CS_High();
 8001674:	f7ff ffe4 	bl	8001640 <FM25F01C_CS_High>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200002b4 	.word	0x200002b4

08001684 <FM25F01C_ReadStatusRegister>:
    FM25F01C_CS_Low();
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
    FM25F01C_CS_High();
}

uint8_t FM25F01C_ReadStatusRegister(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05; // RDSR instruction
 800168a:	2305      	movs	r3, #5
 800168c:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	71bb      	strb	r3, [r7, #6]
    FM25F01C_CS_Low();
 8001692:	f7ff ffc9 	bl	8001628 <FM25F01C_CS_Low>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001696:	1df9      	adds	r1, r7, #7
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2201      	movs	r2, #1
 800169e:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <FM25F01C_ReadStatusRegister+0x3c>)
 80016a0:	f004 f9bc 	bl	8005a1c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &status, 1, HAL_MAX_DELAY);
 80016a4:	1db9      	adds	r1, r7, #6
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	2201      	movs	r2, #1
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <FM25F01C_ReadStatusRegister+0x3c>)
 80016ae:	f004 faf9 	bl	8005ca4 <HAL_SPI_Receive>
    FM25F01C_CS_High();
 80016b2:	f7ff ffc5 	bl	8001640 <FM25F01C_CS_High>
    return status;
 80016b6:	79bb      	ldrb	r3, [r7, #6]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002b4 	.word	0x200002b4

080016c4 <FM25F01C_WaitForWriteComplete>:

void FM25F01C_WaitForWriteComplete(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    while (FM25F01C_ReadStatusRegister() & 0x01); // Проверка бита WIP (Write In Progress)
 80016c8:	bf00      	nop
 80016ca:	f7ff ffdb 	bl	8001684 <FM25F01C_ReadStatusRegister>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f8      	bne.n	80016ca <FM25F01C_WaitForWriteComplete+0x6>
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <FM25F01C_PageProgram>:

void FM25F01C_PageProgram(uint32_t address, uint8_t *data, uint16_t length) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = 0x02; // Page Program instruction
 80016ee:	2302      	movs	r3, #2
 80016f0:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	75fb      	strb	r3, [r7, #23]

    FM25F01C_WriteEnable();
 8001708:	f7ff ffa6 	bl	8001658 <FM25F01C_WriteEnable>
    FM25F01C_CS_Low();
 800170c:	f7ff ff8c 	bl	8001628 <FM25F01C_CS_Low>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8001710:	f107 0114 	add.w	r1, r7, #20
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	2204      	movs	r2, #4
 800171a:	4809      	ldr	r0, [pc, #36]	@ (8001740 <FM25F01C_PageProgram+0x60>)
 800171c:	f004 f97e 	bl	8005a1c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, data, length, HAL_MAX_DELAY);
 8001720:	88fa      	ldrh	r2, [r7, #6]
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	4805      	ldr	r0, [pc, #20]	@ (8001740 <FM25F01C_PageProgram+0x60>)
 800172a:	f004 f977 	bl	8005a1c <HAL_SPI_Transmit>
    FM25F01C_CS_High();
 800172e:	f7ff ff87 	bl	8001640 <FM25F01C_CS_High>
    FM25F01C_WaitForWriteComplete();
 8001732:	f7ff ffc7 	bl	80016c4 <FM25F01C_WaitForWriteComplete>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002b4 	.word	0x200002b4

08001744 <FM25F01C_ReadData>:

void FM25F01C_ReadData(uint32_t address, uint8_t *buffer, uint16_t length) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = 0x03; // Read Data instruction
 8001752:	2303      	movs	r3, #3
 8001754:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	b2db      	uxtb	r3, r3
 800175c:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	75fb      	strb	r3, [r7, #23]

    FM25F01C_CS_Low();
 800176c:	f7ff ff5c 	bl	8001628 <FM25F01C_CS_Low>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8001770:	f107 0114 	add.w	r1, r7, #20
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	2204      	movs	r2, #4
 800177a:	4808      	ldr	r0, [pc, #32]	@ (800179c <FM25F01C_ReadData+0x58>)
 800177c:	f004 f94e 	bl	8005a1c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, buffer, length, HAL_MAX_DELAY);
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <FM25F01C_ReadData+0x58>)
 800178a:	f004 fa8b 	bl	8005ca4 <HAL_SPI_Receive>
    FM25F01C_CS_High();
 800178e:	f7ff ff57 	bl	8001640 <FM25F01C_CS_High>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002b4 	.word	0x200002b4

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09c      	sub	sp, #112	@ 0x70
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f001 fa4b 	bl	8002c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 f945 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ae:	f000 fb83 	bl	8001eb8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80017b2:	f000 fb57 	bl	8001e64 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017b6:	f000 fa3b 	bl	8001c30 <MX_TIM2_Init>
  MX_TIM4_Init();
 80017ba:	f000 fae5 	bl	8001d88 <MX_TIM4_Init>
  MX_TIM3_Init();
 80017be:	f000 fa8f 	bl	8001ce0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80017c2:	f000 f991 	bl	8001ae8 <MX_ADC1_Init>
  MX_I2C2_Init();
 80017c6:	f000 f9cd 	bl	8001b64 <MX_I2C2_Init>
  MX_SPI2_Init();
 80017ca:	f000 f9fb 	bl	8001bc4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017ce:	213c      	movs	r1, #60	@ 0x3c
 80017d0:	4884      	ldr	r0, [pc, #528]	@ (80019e4 <main+0x244>)
 80017d2:	f005 f82b 	bl	800682c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017d6:	2100      	movs	r1, #0
 80017d8:	4883      	ldr	r0, [pc, #524]	@ (80019e8 <main+0x248>)
 80017da:	f004 fe7f 	bl	80064dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80017de:	2104      	movs	r1, #4
 80017e0:	4881      	ldr	r0, [pc, #516]	@ (80019e8 <main+0x248>)
 80017e2:	f004 fe7b 	bl	80064dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017e6:	2108      	movs	r1, #8
 80017e8:	487f      	ldr	r0, [pc, #508]	@ (80019e8 <main+0x248>)
 80017ea:	f004 fe77 	bl	80064dc <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 80017ee:	487f      	ldr	r0, [pc, #508]	@ (80019ec <main+0x24c>)
 80017f0:	f001 fb84 	bl	8002efc <HAL_ADC_Start>

  SSD1306_Init();
 80017f4:	f000 fc2e 	bl	8002054 <SSD1306_Init>

  SSD1306_GotoXY(0,0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 fd92 	bl	8002324 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO WORLD", &Font_7x10, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	497b      	ldr	r1, [pc, #492]	@ (80019f0 <main+0x250>)
 8001804:	487b      	ldr	r0, [pc, #492]	@ (80019f4 <main+0x254>)
 8001806:	f000 fe21 	bl	800244c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800180a:	f000 fce7 	bl	80021dc <SSD1306_UpdateScreen>


  AHT10_Init();
 800180e:	f7ff fd43 	bl	8001298 <AHT10_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint16_t write_data = 0x5555;
 8001812:	f245 5355 	movw	r3, #21845	@ 0x5555
 8001816:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

  // Запись слова по адресу
  EEPROM_WriteWord(0x10, write_data);
 800181a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800181e:	4619      	mov	r1, r3
 8001820:	2010      	movs	r0, #16
 8001822:	f7ff fead 	bl	8001580 <EEPROM_WriteWord>
  HAL_Delay(10);  // Подождём завершения операции
 8001826:	200a      	movs	r0, #10
 8001828:	f001 fa6c 	bl	8002d04 <HAL_Delay>

  // Чтение обратно
   read_val = EEPROM_ReadWord(0x010);
 800182c:	2010      	movs	r0, #16
 800182e:	f7ff fe63 	bl	80014f8 <EEPROM_ReadWord>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b70      	ldr	r3, [pc, #448]	@ (80019f8 <main+0x258>)
 8001838:	801a      	strh	r2, [r3, #0]


  FM25F01C_PageProgram(0x000000, write_val_nor, sizeof(write_val_nor));
 800183a:	2204      	movs	r2, #4
 800183c:	496f      	ldr	r1, [pc, #444]	@ (80019fc <main+0x25c>)
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff ff4e 	bl	80016e0 <FM25F01C_PageProgram>
  FM25F01C_ReadData(0x000000, read_val_nor, sizeof(read_val_nor));
 8001844:	2204      	movs	r2, #4
 8001846:	496e      	ldr	r1, [pc, #440]	@ (8001a00 <main+0x260>)
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff ff7b 	bl	8001744 <FM25F01C_ReadData>

  Ledstatus = 0;
 800184e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a04 <main+0x264>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  UpdateEncoder();
 8001854:	f7ff fc9a 	bl	800118c <UpdateEncoder>

	  // Управляем светодиодами в зависимости от положения энкодера
	  //Ledstatus = active_leds;
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	4863      	ldr	r0, [pc, #396]	@ (80019ec <main+0x24c>)
 800185e:	f001 fbfb 	bl	8003058 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8001862:	4862      	ldr	r0, [pc, #392]	@ (80019ec <main+0x24c>)
 8001864:	f001 fcfe 	bl	8003264 <HAL_ADC_GetValue>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <main+0x268>)
 800186e:	801a      	strh	r2, [r3, #0]


	  float voltage = (adc_value * 3.3f) / 4095.0f;
 8001870:	4b65      	ldr	r3, [pc, #404]	@ (8001a08 <main+0x268>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f9c1 	bl	8000bfc <__aeabi_i2f>
 800187a:	4603      	mov	r3, r0
 800187c:	4963      	ldr	r1, [pc, #396]	@ (8001a0c <main+0x26c>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa10 	bl	8000ca4 <__aeabi_fmul>
 8001884:	4603      	mov	r3, r0
 8001886:	4962      	ldr	r1, [pc, #392]	@ (8001a10 <main+0x270>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fabf 	bl	8000e0c <__aeabi_fdiv>
 800188e:	4603      	mov	r3, r0
 8001890:	66bb      	str	r3, [r7, #104]	@ 0x68

	  Ledstatus = HandlAdctoLed(voltage);
 8001892:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001894:	f7ff fce2 	bl	800125c <HandlAdctoLed>
 8001898:	4603      	mov	r3, r0
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <main+0x264>)
 800189e:	701a      	strb	r2, [r3, #0]
	  prinLedStatus();
 80018a0:	f7ff fb9c 	bl	8000fdc <prinLedStatus>
	  handlSlideSwitch();
 80018a4:	f7ff fc16 	bl	80010d4 <handlSlideSwitch>
	  handlSlideToBuzzer();
 80018a8:	f7ff fc4a 	bl	8001140 <handlSlideToBuzzer>


	  char buf[20];
	  sprintf(buf, "VOLTAGE %.2f", voltage);
 80018ac:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80018ae:	f7fe fdbb 	bl	8000428 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80018ba:	4956      	ldr	r1, [pc, #344]	@ (8001a14 <main+0x274>)
 80018bc:	f006 fabe 	bl	8007e3c <siprintf>

	  SSD1306_GotoXY(0, 10);
 80018c0:	210a      	movs	r1, #10
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 fd2e 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts(buf, &Font_7x10, 1);
 80018c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018cc:	2201      	movs	r2, #1
 80018ce:	4948      	ldr	r1, [pc, #288]	@ (80019f0 <main+0x250>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fdbb 	bl	800244c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80018d6:	f000 fc81 	bl	80021dc <SSD1306_UpdateScreen>


	  AHT10_ReadData();
 80018da:	f7ff fcfd 	bl	80012d8 <AHT10_ReadData>

	  char buf2[20];
	  sprintf(buf2, "Temperature %.2f", AHT10_Temperature);
 80018de:	4b4e      	ldr	r3, [pc, #312]	@ (8001a18 <main+0x278>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fda0 	bl	8000428 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80018f0:	494a      	ldr	r1, [pc, #296]	@ (8001a1c <main+0x27c>)
 80018f2:	f006 faa3 	bl	8007e3c <siprintf>

	  SSD1306_GotoXY(0, 20);
 80018f6:	2114      	movs	r1, #20
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 fd13 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts(buf2, &Font_7x10, 1);
 80018fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001902:	2201      	movs	r2, #1
 8001904:	493a      	ldr	r1, [pc, #232]	@ (80019f0 <main+0x250>)
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fda0 	bl	800244c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800190c:	f000 fc66 	bl	80021dc <SSD1306_UpdateScreen>

	  char buf3[20];
	  sprintf(buf3, "Humidity %.2f", AHT10_Humidity);
 8001910:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <main+0x280>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fd87 	bl	8000428 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001922:	4940      	ldr	r1, [pc, #256]	@ (8001a24 <main+0x284>)
 8001924:	f006 fa8a 	bl	8007e3c <siprintf>

	  SSD1306_GotoXY(0, 30);
 8001928:	211e      	movs	r1, #30
 800192a:	2000      	movs	r0, #0
 800192c:	f000 fcfa 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts(buf3, &Font_7x10, 1);
 8001930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001934:	2201      	movs	r2, #1
 8001936:	492e      	ldr	r1, [pc, #184]	@ (80019f0 <main+0x250>)
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fd87 	bl	800244c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800193e:	f000 fc4d 	bl	80021dc <SSD1306_UpdateScreen>


	  char buf4[20];
	  if(read_val == write_data)
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <main+0x258>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800194a:	429a      	cmp	r2, r3
 800194c:	d106      	bne.n	800195c <main+0x1bc>
	  {
		  sprintf(buf4, "EEPROM OK");
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	4935      	ldr	r1, [pc, #212]	@ (8001a28 <main+0x288>)
 8001954:	4618      	mov	r0, r3
 8001956:	f006 fa71 	bl	8007e3c <siprintf>
 800195a:	e005      	b.n	8001968 <main+0x1c8>
	  }
	  else
	  {
		  sprintf(buf4, "EEPROM NOK");
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	4932      	ldr	r1, [pc, #200]	@ (8001a2c <main+0x28c>)
 8001962:	4618      	mov	r0, r3
 8001964:	f006 fa6a 	bl	8007e3c <siprintf>
	  }

	  SSD1306_GotoXY(0, 40);
 8001968:	2128      	movs	r1, #40	@ 0x28
 800196a:	2000      	movs	r0, #0
 800196c:	f000 fcda 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts(buf4, &Font_7x10, 1);
 8001970:	f107 0318 	add.w	r3, r7, #24
 8001974:	2201      	movs	r2, #1
 8001976:	491e      	ldr	r1, [pc, #120]	@ (80019f0 <main+0x250>)
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fd67 	bl	800244c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800197e:	f000 fc2d 	bl	80021dc <SSD1306_UpdateScreen>


	  char buf5[20];
	  if(read_val_nor[0] == write_val_nor[0] &&
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <main+0x260>)
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <main+0x25c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d117      	bne.n	80019be <main+0x21e>
	     read_val_nor[1] == write_val_nor[1] &&
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <main+0x260>)
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <main+0x25c>)
 8001994:	785b      	ldrb	r3, [r3, #1]
	  if(read_val_nor[0] == write_val_nor[0] &&
 8001996:	429a      	cmp	r2, r3
 8001998:	d111      	bne.n	80019be <main+0x21e>
		 read_val_nor[2] == write_val_nor[2] &&
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <main+0x260>)
 800199c:	789a      	ldrb	r2, [r3, #2]
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <main+0x25c>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
	     read_val_nor[1] == write_val_nor[1] &&
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d10b      	bne.n	80019be <main+0x21e>
		 read_val_nor[3] == write_val_nor[3] )
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <main+0x260>)
 80019a8:	78da      	ldrb	r2, [r3, #3]
 80019aa:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <main+0x25c>)
 80019ac:	78db      	ldrb	r3, [r3, #3]
		 read_val_nor[2] == write_val_nor[2] &&
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d105      	bne.n	80019be <main+0x21e>
	  {
		  sprintf(buf5, "NOR FLASH OK");
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	491e      	ldr	r1, [pc, #120]	@ (8001a30 <main+0x290>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f006 fa40 	bl	8007e3c <siprintf>
 80019bc:	e004      	b.n	80019c8 <main+0x228>
	  }
	  else
	  {
		  sprintf(buf5, "NOR FLASH NOK");
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	491c      	ldr	r1, [pc, #112]	@ (8001a34 <main+0x294>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f006 fa3a 	bl	8007e3c <siprintf>
	  }

	  SSD1306_GotoXY(0, 50);
 80019c8:	2132      	movs	r1, #50	@ 0x32
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 fcaa 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts(buf5, &Font_7x10, 1);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2201      	movs	r2, #1
 80019d4:	4906      	ldr	r1, [pc, #24]	@ (80019f0 <main+0x250>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd38 	bl	800244c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80019dc:	f000 fbfe 	bl	80021dc <SSD1306_UpdateScreen>
  {
 80019e0:	e738      	b.n	8001854 <main+0xb4>
 80019e2:	bf00      	nop
 80019e4:	20000354 	.word	0x20000354
 80019e8:	2000039c 	.word	0x2000039c
 80019ec:	20000230 	.word	0x20000230
 80019f0:	20000000 	.word	0x20000000
 80019f4:	0800a0d8 	.word	0x0800a0d8
 80019f8:	2000044c 	.word	0x2000044c
 80019fc:	20000450 	.word	0x20000450
 8001a00:	2000003c 	.word	0x2000003c
 8001a04:	2000042c 	.word	0x2000042c
 8001a08:	20000436 	.word	0x20000436
 8001a0c:	40533333 	.word	0x40533333
 8001a10:	457ff000 	.word	0x457ff000
 8001a14:	0800a0e4 	.word	0x0800a0e4
 8001a18:	20000444 	.word	0x20000444
 8001a1c:	0800a0f4 	.word	0x0800a0f4
 8001a20:	20000448 	.word	0x20000448
 8001a24:	0800a108 	.word	0x0800a108
 8001a28:	0800a118 	.word	0x0800a118
 8001a2c:	0800a124 	.word	0x0800a124
 8001a30:	0800a130 	.word	0x0800a130
 8001a34:	0800a140 	.word	0x0800a140

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	@ 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a42:	2228      	movs	r2, #40	@ 0x28
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f006 fa5d 	bl	8007f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a70:	2310      	movs	r3, #16
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a7c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f9c8 	bl	8004e1c <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001a92:	f000 fad9 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc34 	bl	8005320 <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001abe:	f000 fac3 	bl	8002048 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001ac6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001aca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fdb4 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ada:	f000 fab5 	bl	8002048 <Error_Handler>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3750      	adds	r7, #80	@ 0x50
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001af8:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001afa:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <MX_ADC1_Init+0x78>)
 8001afc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001afe:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b12:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b18:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b24:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b26:	f001 f911 	bl	8002d4c <HAL_ADC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b30:	f000 fa8a 	bl	8002048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001b34:	2308      	movs	r3, #8
 8001b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_ADC1_Init+0x74>)
 8001b46:	f001 fb99 	bl	800327c <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b50:	f000 fa7a 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000230 	.word	0x20000230
 8001b60:	40012400 	.word	0x40012400

08001b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b6a:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <MX_I2C2_Init+0x58>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b70:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <MX_I2C2_Init+0x5c>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001b74:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b7a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_I2C2_Init+0x54>)
 8001ba4:	f001 ffd8 	bl	8003b58 <HAL_I2C_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001bae:	f000 fa4b 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000260 	.word	0x20000260
 8001bbc:	40005800 	.word	0x40005800
 8001bc0:	00061a80 	.word	0x00061a80

08001bc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bca:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <MX_SPI2_Init+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001c10:	220a      	movs	r2, #10
 8001c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_SPI2_Init+0x64>)
 8001c16:	f003 fe7d 	bl	8005914 <HAL_SPI_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c20:	f000 fa12 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002b4 	.word	0x200002b4
 8001c2c:	40003800 	.word	0x40003800

08001c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c52:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c5c:	223f      	movs	r2, #63	@ 0x3f
 8001c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c68:	22f9      	movs	r2, #249	@ 0xf9
 8001c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c78:	4818      	ldr	r0, [pc, #96]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c7a:	f004 fbe0 	bl	800643e <HAL_TIM_PWM_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c84:	f000 f9e0 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c90:	f107 0320 	add.w	r3, r7, #32
 8001c94:	4619      	mov	r1, r3
 8001c96:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001c98:	f005 f932 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001ca2:	f000 f9d1 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca6:	2360      	movs	r3, #96	@ 0x60
 8001ca8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001cbe:	f004 fe43 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001cc8:	f000 f9be 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ccc:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <MX_TIM2_Init+0xac>)
 8001cce:	f000 fdf7 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000030c 	.word	0x2000030c

08001ce0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	@ 0x30
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2224      	movs	r2, #36	@ 0x24
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 f909 	bl	8007f06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001cfe:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <MX_TIM3_Init+0xa4>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d10:	221e      	movs	r2, #30
 8001d12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d4c:	f004 fccc 	bl	80066e8 <HAL_TIM_Encoder_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001d56:	f000 f977 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <MX_TIM3_Init+0xa0>)
 8001d68:	f005 f8ca 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001d72:	f000 f969 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3730      	adds	r7, #48	@ 0x30
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000354 	.word	0x20000354
 8001d84:	40000400 	.word	0x40000400

08001d88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001daa:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001dac:	4a2c      	ldr	r2, [pc, #176]	@ (8001e60 <MX_TIM4_Init+0xd8>)
 8001dae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001db2:	223f      	movs	r2, #63	@ 0x3f
 8001db4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b29      	ldr	r3, [pc, #164]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001dbe:	22ff      	movs	r2, #255	@ 0xff
 8001dc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dce:	4823      	ldr	r0, [pc, #140]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001dd0:	f004 fb35 	bl	800643e <HAL_TIM_PWM_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001dda:	f000 f935 	bl	8002048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	4619      	mov	r1, r3
 8001dec:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001dee:	f005 f887 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001df8:	f000 f926 	bl	8002048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfc:	2360      	movs	r3, #96	@ 0x60
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4812      	ldr	r0, [pc, #72]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001e14:	f004 fd98 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e1e:	f000 f913 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001e2a:	f004 fd8d 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e34:	f000 f908 	bl	8002048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001e40:	f004 fd82 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001e4a:	f000 f8fd 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e4e:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <MX_TIM4_Init+0xd4>)
 8001e50:	f000 fd36 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	@ 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000039c 	.word	0x2000039c
 8001e60:	40000800 	.word	0x40000800

08001e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <MX_USART1_UART_Init+0x50>)
 8001e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_USART1_UART_Init+0x4c>)
 8001e9c:	f005 f88e 	bl	8006fbc <HAL_UART_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ea6:	f000 f8cf 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200003e4 	.word	0x200003e4
 8001eb4:	40013800 	.word	0x40013800

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ecc:	4b59      	ldr	r3, [pc, #356]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b56      	ldr	r3, [pc, #344]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b53      	ldr	r3, [pc, #332]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b50      	ldr	r3, [pc, #320]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	4b4d      	ldr	r3, [pc, #308]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <MX_GPIO_Init+0x17c>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001f1a:	4847      	ldr	r0, [pc, #284]	@ (8002038 <MX_GPIO_Init+0x180>)
 8001f1c:	f001 fdeb 	bl	8003af6 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDR_Pin|CS1_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2150      	movs	r1, #80	@ 0x50
 8001f24:	4845      	ldr	r0, [pc, #276]	@ (800203c <MX_GPIO_Init+0x184>)
 8001f26:	f001 fde6 	bl	8003af6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4844      	ldr	r0, [pc, #272]	@ (8002040 <MX_GPIO_Init+0x188>)
 8001f30:	f001 fde1 	bl	8003af6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SlideSwitch_Pin */
  GPIO_InitStruct.Pin = SlideSwitch_Pin;
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SlideSwitch_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	483d      	ldr	r0, [pc, #244]	@ (800203c <MX_GPIO_Init+0x184>)
 8001f48:	f001 fc3a 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001f4c:	2306      	movs	r3, #6
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f50:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <MX_GPIO_Init+0x18c>)
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4837      	ldr	r0, [pc, #220]	@ (800203c <MX_GPIO_Init+0x184>)
 8001f60:	f001 fc2e 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001f64:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 8001f68:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	482e      	ldr	r0, [pc, #184]	@ (8002038 <MX_GPIO_Init+0x180>)
 8001f7e:	f001 fc1f 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001f82:	2340      	movs	r3, #64	@ 0x40
 8001f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4619      	mov	r1, r3
 8001f98:	4827      	ldr	r0, [pc, #156]	@ (8002038 <MX_GPIO_Init+0x180>)
 8001f9a:	f001 fc11 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDR_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin;
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDR_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4821      	ldr	r0, [pc, #132]	@ (800203c <MX_GPIO_Init+0x184>)
 8001fb6:	f001 fc03 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	481b      	ldr	r0, [pc, #108]	@ (8002040 <MX_GPIO_Init+0x188>)
 8001fd2:	f001 fbf5 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8001fd6:	2340      	movs	r3, #64	@ 0x40
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	4813      	ldr	r0, [pc, #76]	@ (800203c <MX_GPIO_Init+0x184>)
 8001fee:	f001 fbe7 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <MX_GPIO_Init+0x18c>)
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4619      	mov	r1, r3
 8002006:	480d      	ldr	r0, [pc, #52]	@ (800203c <MX_GPIO_Init+0x184>)
 8002008:	f001 fbda 	bl	80037c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2007      	movs	r0, #7
 8002012:	f001 fb9e 	bl	8003752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002016:	2007      	movs	r0, #7
 8002018:	f001 fbb7 	bl	800378a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2008      	movs	r0, #8
 8002022:	f001 fb96 	bl	8003752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002026:	2008      	movs	r0, #8
 8002028:	f001 fbaf 	bl	800378a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	40010800 	.word	0x40010800
 800203c:	40011000 	.word	0x40011000
 8002040:	40010c00 	.word	0x40010c00
 8002044:	10110000 	.word	0x10110000

08002048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <Error_Handler+0x8>

08002054 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800205a:	f000 fa1d 	bl	8002498 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800205e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002062:	2201      	movs	r2, #1
 8002064:	2178      	movs	r1, #120	@ 0x78
 8002066:	485b      	ldr	r0, [pc, #364]	@ (80021d4 <SSD1306_Init+0x180>)
 8002068:	f002 fa24 	bl	80044b4 <HAL_I2C_IsDeviceReady>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002072:	2300      	movs	r3, #0
 8002074:	e0a9      	b.n	80021ca <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002076:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800207a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800207c:	e002      	b.n	8002084 <SSD1306_Init+0x30>
		p--;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3b01      	subs	r3, #1
 8002082:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f9      	bne.n	800207e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800208a:	22ae      	movs	r2, #174	@ 0xae
 800208c:	2100      	movs	r1, #0
 800208e:	2078      	movs	r0, #120	@ 0x78
 8002090:	f000 fa7c 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002094:	2220      	movs	r2, #32
 8002096:	2100      	movs	r1, #0
 8002098:	2078      	movs	r0, #120	@ 0x78
 800209a:	f000 fa77 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800209e:	2210      	movs	r2, #16
 80020a0:	2100      	movs	r1, #0
 80020a2:	2078      	movs	r0, #120	@ 0x78
 80020a4:	f000 fa72 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020a8:	22b0      	movs	r2, #176	@ 0xb0
 80020aa:	2100      	movs	r1, #0
 80020ac:	2078      	movs	r0, #120	@ 0x78
 80020ae:	f000 fa6d 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020b2:	22c8      	movs	r2, #200	@ 0xc8
 80020b4:	2100      	movs	r1, #0
 80020b6:	2078      	movs	r0, #120	@ 0x78
 80020b8:	f000 fa68 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	2078      	movs	r0, #120	@ 0x78
 80020c2:	f000 fa63 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020c6:	2210      	movs	r2, #16
 80020c8:	2100      	movs	r1, #0
 80020ca:	2078      	movs	r0, #120	@ 0x78
 80020cc:	f000 fa5e 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	2100      	movs	r1, #0
 80020d4:	2078      	movs	r0, #120	@ 0x78
 80020d6:	f000 fa59 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80020da:	2281      	movs	r2, #129	@ 0x81
 80020dc:	2100      	movs	r1, #0
 80020de:	2078      	movs	r0, #120	@ 0x78
 80020e0:	f000 fa54 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020e4:	22ff      	movs	r2, #255	@ 0xff
 80020e6:	2100      	movs	r1, #0
 80020e8:	2078      	movs	r0, #120	@ 0x78
 80020ea:	f000 fa4f 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020ee:	22a1      	movs	r2, #161	@ 0xa1
 80020f0:	2100      	movs	r1, #0
 80020f2:	2078      	movs	r0, #120	@ 0x78
 80020f4:	f000 fa4a 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80020f8:	22a6      	movs	r2, #166	@ 0xa6
 80020fa:	2100      	movs	r1, #0
 80020fc:	2078      	movs	r0, #120	@ 0x78
 80020fe:	f000 fa45 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002102:	22a8      	movs	r2, #168	@ 0xa8
 8002104:	2100      	movs	r1, #0
 8002106:	2078      	movs	r0, #120	@ 0x78
 8002108:	f000 fa40 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800210c:	223f      	movs	r2, #63	@ 0x3f
 800210e:	2100      	movs	r1, #0
 8002110:	2078      	movs	r0, #120	@ 0x78
 8002112:	f000 fa3b 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002116:	22a4      	movs	r2, #164	@ 0xa4
 8002118:	2100      	movs	r1, #0
 800211a:	2078      	movs	r0, #120	@ 0x78
 800211c:	f000 fa36 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002120:	22d3      	movs	r2, #211	@ 0xd3
 8002122:	2100      	movs	r1, #0
 8002124:	2078      	movs	r0, #120	@ 0x78
 8002126:	f000 fa31 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2078      	movs	r0, #120	@ 0x78
 8002130:	f000 fa2c 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002134:	22d5      	movs	r2, #213	@ 0xd5
 8002136:	2100      	movs	r1, #0
 8002138:	2078      	movs	r0, #120	@ 0x78
 800213a:	f000 fa27 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800213e:	22f0      	movs	r2, #240	@ 0xf0
 8002140:	2100      	movs	r1, #0
 8002142:	2078      	movs	r0, #120	@ 0x78
 8002144:	f000 fa22 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002148:	22d9      	movs	r2, #217	@ 0xd9
 800214a:	2100      	movs	r1, #0
 800214c:	2078      	movs	r0, #120	@ 0x78
 800214e:	f000 fa1d 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002152:	2222      	movs	r2, #34	@ 0x22
 8002154:	2100      	movs	r1, #0
 8002156:	2078      	movs	r0, #120	@ 0x78
 8002158:	f000 fa18 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800215c:	22da      	movs	r2, #218	@ 0xda
 800215e:	2100      	movs	r1, #0
 8002160:	2078      	movs	r0, #120	@ 0x78
 8002162:	f000 fa13 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002166:	2212      	movs	r2, #18
 8002168:	2100      	movs	r1, #0
 800216a:	2078      	movs	r0, #120	@ 0x78
 800216c:	f000 fa0e 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002170:	22db      	movs	r2, #219	@ 0xdb
 8002172:	2100      	movs	r1, #0
 8002174:	2078      	movs	r0, #120	@ 0x78
 8002176:	f000 fa09 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800217a:	2220      	movs	r2, #32
 800217c:	2100      	movs	r1, #0
 800217e:	2078      	movs	r0, #120	@ 0x78
 8002180:	f000 fa04 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002184:	228d      	movs	r2, #141	@ 0x8d
 8002186:	2100      	movs	r1, #0
 8002188:	2078      	movs	r0, #120	@ 0x78
 800218a:	f000 f9ff 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800218e:	2214      	movs	r2, #20
 8002190:	2100      	movs	r1, #0
 8002192:	2078      	movs	r0, #120	@ 0x78
 8002194:	f000 f9fa 	bl	800258c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002198:	22af      	movs	r2, #175	@ 0xaf
 800219a:	2100      	movs	r1, #0
 800219c:	2078      	movs	r0, #120	@ 0x78
 800219e:	f000 f9f5 	bl	800258c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80021a2:	222e      	movs	r2, #46	@ 0x2e
 80021a4:	2100      	movs	r1, #0
 80021a6:	2078      	movs	r0, #120	@ 0x78
 80021a8:	f000 f9f0 	bl	800258c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f000 f843 	bl	8002238 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80021b2:	f000 f813 	bl	80021dc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <SSD1306_Init+0x184>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <SSD1306_Init+0x184>)
 80021be:	2200      	movs	r2, #0
 80021c0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <SSD1306_Init+0x184>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000260 	.word	0x20000260
 80021d8:	20000858 	.word	0x20000858

080021dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	71fb      	strb	r3, [r7, #7]
 80021e6:	e01d      	b.n	8002224 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	3b50      	subs	r3, #80	@ 0x50
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	2100      	movs	r1, #0
 80021f2:	2078      	movs	r0, #120	@ 0x78
 80021f4:	f000 f9ca 	bl	800258c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	2078      	movs	r0, #120	@ 0x78
 80021fe:	f000 f9c5 	bl	800258c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002202:	2210      	movs	r2, #16
 8002204:	2100      	movs	r1, #0
 8002206:	2078      	movs	r0, #120	@ 0x78
 8002208:	f000 f9c0 	bl	800258c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <SSD1306_UpdateScreen+0x58>)
 8002212:	441a      	add	r2, r3
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	2140      	movs	r1, #64	@ 0x40
 8002218:	2078      	movs	r0, #120	@ 0x78
 800221a:	f000 f951 	bl	80024c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3301      	adds	r3, #1
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b07      	cmp	r3, #7
 8002228:	d9de      	bls.n	80021e8 <SSD1306_UpdateScreen+0xc>
	}
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000458 	.word	0x20000458

08002238 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <SSD1306_Fill+0x14>
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <SSD1306_Fill+0x16>
 800224c:	23ff      	movs	r3, #255	@ 0xff
 800224e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002252:	4619      	mov	r1, r3
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <SSD1306_Fill+0x2c>)
 8002256:	f005 fe56 	bl	8007f06 <memset>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000458 	.word	0x20000458

08002268 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
 8002272:	460b      	mov	r3, r1
 8002274:	80bb      	strh	r3, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	70fb      	strb	r3, [r7, #3]
	if (
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	2b7f      	cmp	r3, #127	@ 0x7f
 800227e:	d848      	bhi.n	8002312 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	2b3f      	cmp	r3, #63	@ 0x3f
 8002284:	d845      	bhi.n	8002312 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002286:	4b25      	ldr	r3, [pc, #148]	@ (800231c <SSD1306_DrawPixel+0xb4>)
 8002288:	791b      	ldrb	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11a      	bne.n	80022d8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	08db      	lsrs	r3, r3, #3
 80022a8:	b298      	uxth	r0, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	01db      	lsls	r3, r3, #7
 80022ae:	4413      	add	r3, r2
 80022b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <SSD1306_DrawPixel+0xb8>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	b25a      	sxtb	r2, r3
 80022b6:	88bb      	ldrh	r3, [r7, #4]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b259      	sxtb	r1, r3
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	4603      	mov	r3, r0
 80022cc:	01db      	lsls	r3, r3, #7
 80022ce:	4413      	add	r3, r2
 80022d0:	b2c9      	uxtb	r1, r1
 80022d2:	4a13      	ldr	r2, [pc, #76]	@ (8002320 <SSD1306_DrawPixel+0xb8>)
 80022d4:	54d1      	strb	r1, [r2, r3]
 80022d6:	e01d      	b.n	8002314 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	88bb      	ldrh	r3, [r7, #4]
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	b298      	uxth	r0, r3
 80022e0:	4603      	mov	r3, r0
 80022e2:	01db      	lsls	r3, r3, #7
 80022e4:	4413      	add	r3, r2
 80022e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002320 <SSD1306_DrawPixel+0xb8>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	b25a      	sxtb	r2, r3
 80022ec:	88bb      	ldrh	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	4013      	ands	r3, r2
 8002300:	b259      	sxtb	r1, r3
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	4603      	mov	r3, r0
 8002306:	01db      	lsls	r3, r3, #7
 8002308:	4413      	add	r3, r2
 800230a:	b2c9      	uxtb	r1, r1
 800230c:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <SSD1306_DrawPixel+0xb8>)
 800230e:	54d1      	strb	r1, [r2, r3]
 8002310:	e000      	b.n	8002314 <SSD1306_DrawPixel+0xac>
		return;
 8002312:	bf00      	nop
	}
}
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000858 	.word	0x20000858
 8002320:	20000458 	.word	0x20000458

08002324 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	80fb      	strh	r3, [r7, #6]
 8002330:	4613      	mov	r3, r2
 8002332:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002334:	4a05      	ldr	r2, [pc, #20]	@ (800234c <SSD1306_GotoXY+0x28>)
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800233a:	4a04      	ldr	r2, [pc, #16]	@ (800234c <SSD1306_GotoXY+0x28>)
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	8053      	strh	r3, [r2, #2]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000858 	.word	0x20000858

08002350 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002360:	4b39      	ldr	r3, [pc, #228]	@ (8002448 <SSD1306_Putc+0xf8>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
	if (
 800236c:	2b7f      	cmp	r3, #127	@ 0x7f
 800236e:	dc07      	bgt.n	8002380 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <SSD1306_Putc+0xf8>)
 8002372:	885b      	ldrh	r3, [r3, #2]
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800237c:	2b3f      	cmp	r3, #63	@ 0x3f
 800237e:	dd01      	ble.n	8002384 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002380:	2300      	movs	r3, #0
 8002382:	e05d      	b.n	8002440 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e04b      	b.n	8002422 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	3b20      	subs	r3, #32
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	7849      	ldrb	r1, [r1, #1]
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4619      	mov	r1, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	440b      	add	r3, r1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e030      	b.n	8002410 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023be:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <SSD1306_Putc+0xf8>)
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	b298      	uxth	r0, r3
 80023ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <SSD1306_Putc+0xf8>)
 80023cc:	885a      	ldrh	r2, [r3, #2]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	79ba      	ldrb	r2, [r7, #6]
 80023d8:	4619      	mov	r1, r3
 80023da:	f7ff ff45 	bl	8002268 <SSD1306_DrawPixel>
 80023de:	e014      	b.n	800240a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80023e0:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <SSD1306_Putc+0xf8>)
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	b298      	uxth	r0, r3
 80023ec:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <SSD1306_Putc+0xf8>)
 80023ee:	885a      	ldrh	r2, [r3, #2]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	b299      	uxth	r1, r3
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	f7ff ff2f 	bl	8002268 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3301      	adds	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4293      	cmp	r3, r2
 800241a:	d3c8      	bcc.n	80023ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	461a      	mov	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4293      	cmp	r3, r2
 800242c:	d3ad      	bcc.n	800238a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <SSD1306_Putc+0xf8>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	4413      	add	r3, r2
 8002438:	b29a      	uxth	r2, r3
 800243a:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <SSD1306_Putc+0xf8>)
 800243c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800243e:	79fb      	ldrb	r3, [r7, #7]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000858 	.word	0x20000858

0800244c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800245a:	e012      	b.n	8002482 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff73 	bl	8002350 <SSD1306_Putc>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d002      	beq.n	800247c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	e008      	b.n	800248e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e8      	bne.n	800245c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}


void ssd1306_I2C_Init() {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <ssd1306_I2C_Init+0x24>)
 80024a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024a2:	e002      	b.n	80024aa <ssd1306_I2C_Init+0x12>
		p--;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f9      	bne.n	80024a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	0003d090 	.word	0x0003d090

080024c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b0c7      	sub	sp, #284	@ 0x11c
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	4604      	mov	r4, r0
 80024c8:	4608      	mov	r0, r1
 80024ca:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80024ce:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80024d2:	600a      	str	r2, [r1, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024da:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80024de:	4622      	mov	r2, r4
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024e6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80024ea:	4602      	mov	r2, r0
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024f6:	460a      	mov	r2, r1
 80024f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80024fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002502:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002506:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002514:	e015      	b.n	8002542 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002516:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800251a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800251e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	441a      	add	r2, r3
 8002526:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800252a:	3301      	adds	r3, #1
 800252c:	7811      	ldrb	r1, [r2, #0]
 800252e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002532:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002536:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002538:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800253c:	3301      	adds	r3, #1
 800253e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002542:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002546:	b29b      	uxth	r3, r3
 8002548:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800254c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002550:	8812      	ldrh	r2, [r2, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d8df      	bhi.n	8002516 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8002556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800255a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b299      	uxth	r1, r3
 8002562:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002566:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	b29b      	uxth	r3, r3
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	200a      	movs	r0, #10
 8002576:	9000      	str	r0, [sp, #0]
 8002578:	4803      	ldr	r0, [pc, #12]	@ (8002588 <ssd1306_I2C_WriteMulti+0xc8>)
 800257a:	f001 fc31 	bl	8003de0 <HAL_I2C_Master_Transmit>
}
 800257e:	bf00      	nop
 8002580:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	20000260 	.word	0x20000260

0800258c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	460b      	mov	r3, r1
 8002598:	71bb      	strb	r3, [r7, #6]
 800259a:	4613      	mov	r3, r2
 800259c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025a2:	797b      	ldrb	r3, [r7, #5]
 80025a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	b299      	uxth	r1, r3
 80025aa:	f107 020c 	add.w	r2, r7, #12
 80025ae:	230a      	movs	r3, #10
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2302      	movs	r3, #2
 80025b4:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <ssd1306_I2C_Write+0x38>)
 80025b6:	f001 fc13 	bl	8003de0 <HAL_I2C_Master_Transmit>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000260 	.word	0x20000260

080025c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_MspInit+0x5c>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <HAL_MspInit+0x5c>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6193      	str	r3, [r2, #24]
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_MspInit+0x5c>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_MspInit+0x5c>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002624 <HAL_MspInit+0x5c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <HAL_MspInit+0x5c>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_MspInit+0x60>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_MspInit+0x60>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000

0800262c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <HAL_ADC_MspInit+0x6c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d121      	bne.n	8002690 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800264c:	4b13      	ldr	r3, [pc, #76]	@ (800269c <HAL_ADC_MspInit+0x70>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a12      	ldr	r2, [pc, #72]	@ (800269c <HAL_ADC_MspInit+0x70>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_ADC_MspInit+0x70>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_ADC_MspInit+0x70>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <HAL_ADC_MspInit+0x70>)
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <HAL_ADC_MspInit+0x70>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002680:	2303      	movs	r3, #3
 8002682:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	@ (80026a0 <HAL_ADC_MspInit+0x74>)
 800268c:	f001 f898 	bl	80037c0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40012400 	.word	0x40012400
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010c00 	.word	0x40010c00

080026a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_I2C_MspInit+0x74>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d124      	bne.n	800270e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_I2C_MspInit+0x78>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a14      	ldr	r2, [pc, #80]	@ (800271c <HAL_I2C_MspInit+0x78>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_I2C_MspInit+0x78>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e2:	2312      	movs	r3, #18
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	4619      	mov	r1, r3
 80026f0:	480b      	ldr	r0, [pc, #44]	@ (8002720 <HAL_I2C_MspInit+0x7c>)
 80026f2:	f001 f865 	bl	80037c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_I2C_MspInit+0x78>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <HAL_I2C_MspInit+0x78>)
 80026fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002700:	61d3      	str	r3, [r2, #28]
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_I2C_MspInit+0x78>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800270e:	bf00      	nop
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40005800 	.word	0x40005800
 800271c:	40021000 	.word	0x40021000
 8002720:	40010c00 	.word	0x40010c00

08002724 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1c      	ldr	r2, [pc, #112]	@ (80027b0 <HAL_SPI_MspInit+0x8c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d131      	bne.n	80027a8 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_SPI_MspInit+0x90>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <HAL_SPI_MspInit+0x90>)
 800274a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800274e:	61d3      	str	r3, [r2, #28]
 8002750:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <HAL_SPI_MspInit+0x90>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_SPI_MspInit+0x90>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <HAL_SPI_MspInit+0x90>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_SPI_MspInit+0x90>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002774:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	4619      	mov	r1, r3
 8002788:	480b      	ldr	r0, [pc, #44]	@ (80027b8 <HAL_SPI_MspInit+0x94>)
 800278a:	f001 f819 	bl	80037c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800278e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	4619      	mov	r1, r3
 80027a2:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <HAL_SPI_MspInit+0x94>)
 80027a4:	f001 f80c 	bl	80037c0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80027a8:	bf00      	nop
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40003800 	.word	0x40003800
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010c00 	.word	0x40010c00

080027bc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027cc:	d10c      	bne.n	80027e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_TIM_PWM_MspInit+0x58>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a10      	ldr	r2, [pc, #64]	@ (8002814 <HAL_TIM_PWM_MspInit+0x58>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_TIM_PWM_MspInit+0x58>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027e6:	e010      	b.n	800280a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <HAL_TIM_PWM_MspInit+0x5c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10b      	bne.n	800280a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f2:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <HAL_TIM_PWM_MspInit+0x58>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_TIM_PWM_MspInit+0x58>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_TIM_PWM_MspInit+0x58>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	40000800 	.word	0x40000800

0800281c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <HAL_TIM_Encoder_MspInit+0x94>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d135      	bne.n	80028a8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	61d3      	str	r3, [r2, #28]
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002854:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a16      	ldr	r2, [pc, #88]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x98>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 800286c:	2330      	movs	r3, #48	@ 0x30
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	480e      	ldr	r0, [pc, #56]	@ (80028b8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002880:	f000 ff9e 	bl	80037c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a2:	4a06      	ldr	r2, [pc, #24]	@ (80028bc <HAL_TIM_Encoder_MspInit+0xa0>)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	@ 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010c00 	.word	0x40010c00
 80028bc:	40010000 	.word	0x40010000

080028c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d12b      	bne.n	8002938 <HAL_TIM_MspPostInit+0x78>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e0:	4b26      	ldr	r3, [pc, #152]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a25      	ldr	r2, [pc, #148]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b23      	ldr	r3, [pc, #140]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2302      	movs	r3, #2
 8002904:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	481c      	ldr	r0, [pc, #112]	@ (8002980 <HAL_TIM_MspPostInit+0xc0>)
 800290e:	f000 ff57 	bl	80037c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002912:	4b1c      	ldr	r3, [pc, #112]	@ (8002984 <HAL_TIM_MspPostInit+0xc4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <HAL_TIM_MspPostInit+0xc4>)
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002936:	e01d      	b.n	8002974 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM4)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <HAL_TIM_MspPostInit+0xc8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d118      	bne.n	8002974 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4a0d      	ldr	r2, [pc, #52]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6193      	str	r3, [r2, #24]
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800295a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	4807      	ldr	r0, [pc, #28]	@ (800298c <HAL_TIM_MspPostInit+0xcc>)
 8002970:	f000 ff26 	bl	80037c0 <HAL_GPIO_Init>
}
 8002974:	bf00      	nop
 8002976:	3728      	adds	r7, #40	@ 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	40010800 	.word	0x40010800
 8002984:	40010000 	.word	0x40010000
 8002988:	40000800 	.word	0x40000800
 800298c:	40010c00 	.word	0x40010c00

08002990 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <HAL_UART_MspInit+0x8c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d131      	bne.n	8002a14 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_UART_MspInit+0x90>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a20 <HAL_UART_MspInit+0x90>)
 80029b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b18      	ldr	r3, [pc, #96]	@ (8002a20 <HAL_UART_MspInit+0x90>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_UART_MspInit+0x90>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a14      	ldr	r2, [pc, #80]	@ (8002a20 <HAL_UART_MspInit+0x90>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_UART_MspInit+0x90>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4619      	mov	r1, r3
 80029f4:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <HAL_UART_MspInit+0x94>)
 80029f6:	f000 fee3 	bl	80037c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0310 	add.w	r3, r7, #16
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <HAL_UART_MspInit+0x94>)
 8002a10:	f000 fed6 	bl	80037c0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010800 	.word	0x40010800

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <NMI_Handler+0x4>

08002a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <MemManage_Handler+0x4>

08002a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 f928 	bl	8002ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8002a84:	2002      	movs	r0, #2
 8002a86:	f001 f84f 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8002a92:	2004      	movs	r0, #4
 8002a94:	f001 f848 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return 1;
 8002aa0:	2301      	movs	r3, #1
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <_kill>:

int _kill(int pid, int sig)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ab4:	f005 fa7a 	bl	8007fac <__errno>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2216      	movs	r2, #22
 8002abc:	601a      	str	r2, [r3, #0]
  return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_exit>:

void _exit (int status)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffe7 	bl	8002aaa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <_exit+0x12>

08002ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e00a      	b.n	8002b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002af2:	f3af 8000 	nop.w
 8002af6:	4601      	mov	r1, r0
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	60ba      	str	r2, [r7, #8]
 8002afe:	b2ca      	uxtb	r2, r1
 8002b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dbf0      	blt.n	8002af2 <_read+0x12>
  }

  return len;
 8002b10:	687b      	ldr	r3, [r7, #4]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b40:	605a      	str	r2, [r3, #4]
  return 0;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <_isatty>:

int _isatty(int file)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b84:	4a14      	ldr	r2, [pc, #80]	@ (8002bd8 <_sbrk+0x5c>)
 8002b86:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <_sbrk+0x60>)
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <_sbrk+0x64>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <_sbrk+0x64>)
 8002b9a:	4a12      	ldr	r2, [pc, #72]	@ (8002be4 <_sbrk+0x68>)
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d207      	bcs.n	8002bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bac:	f005 f9fe 	bl	8007fac <__errno>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e009      	b.n	8002bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bbc:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc2:	4b07      	ldr	r3, [pc, #28]	@ (8002be0 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	4a05      	ldr	r2, [pc, #20]	@ (8002be0 <_sbrk+0x64>)
 8002bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20005000 	.word	0x20005000
 8002bdc:	00000400 	.word	0x00000400
 8002be0:	20000860 	.word	0x20000860
 8002be4:	200009b8 	.word	0x200009b8

08002be8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bf4:	f7ff fff8 	bl	8002be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf8:	480b      	ldr	r0, [pc, #44]	@ (8002c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bfa:	490c      	ldr	r1, [pc, #48]	@ (8002c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c00:	e002      	b.n	8002c08 <LoopCopyDataInit>

08002c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c06:	3304      	adds	r3, #4

08002c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c0c:	d3f9      	bcc.n	8002c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0e:	4a09      	ldr	r2, [pc, #36]	@ (8002c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c10:	4c09      	ldr	r4, [pc, #36]	@ (8002c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c14:	e001      	b.n	8002c1a <LoopFillZerobss>

08002c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c18:	3204      	adds	r2, #4

08002c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c1c:	d3fb      	bcc.n	8002c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f005 f9cb 	bl	8007fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c22:	f7fe fdbd 	bl	80017a0 <main>
  bx lr
 8002c26:	4770      	bx	lr
  ldr r0, =_sdata
 8002c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c2c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002c30:	0800ac84 	.word	0x0800ac84
  ldr r2, =_sbss
 8002c34:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002c38:	200009b4 	.word	0x200009b4

08002c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c3c:	e7fe      	b.n	8002c3c <ADC1_2_IRQHandler>
	...

08002c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c44:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <HAL_Init+0x28>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <HAL_Init+0x28>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f000 fd73 	bl	800373c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c56:	200f      	movs	r0, #15
 8002c58:	f000 f808 	bl	8002c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5c:	f7ff fcb4 	bl	80025c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000

08002c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_InitTick+0x54>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_InitTick+0x58>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fd8b 	bl	80037a6 <HAL_SYSTICK_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00e      	b.n	8002cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d80a      	bhi.n	8002cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f000 fd53 	bl	8003752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cac:	4a06      	ldr	r2, [pc, #24]	@ (8002cc8 <HAL_InitTick+0x5c>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000040 	.word	0x20000040
 8002cc4:	20000048 	.word	0x20000048
 8002cc8:	20000044 	.word	0x20000044

08002ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_IncTick+0x1c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_IncTick+0x20>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a03      	ldr	r2, [pc, #12]	@ (8002cec <HAL_IncTick+0x20>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000048 	.word	0x20000048
 8002cec:	20000864 	.word	0x20000864

08002cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b02      	ldr	r3, [pc, #8]	@ (8002d00 <HAL_GetTick+0x10>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000864 	.word	0x20000864

08002d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d005      	beq.n	8002d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_Delay+0x44>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d2a:	bf00      	nop
 8002d2c:	f7ff ffe0 	bl	8002cf0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d8f7      	bhi.n	8002d2c <HAL_Delay+0x28>
  {
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000048 	.word	0x20000048

08002d4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0be      	b.n	8002eec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fc4e 	bl	800262c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fbc5 	bl	8003520 <ADC_ConversionStop_Disable>
 8002d96:	4603      	mov	r3, r0
 8002d98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 8099 	bne.w	8002eda <HAL_ADC_Init+0x18e>
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 8095 	bne.w	8002eda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	f043 0202 	orr.w	r2, r3, #2
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7b1b      	ldrb	r3, [r3, #12]
 8002dd2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de4:	d003      	beq.n	8002dee <HAL_ADC_Init+0xa2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_ADC_Init+0xa8>
 8002dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_Init+0xaa>
 8002df4:	2300      	movs	r3, #0
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7d1b      	ldrb	r3, [r3, #20]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d119      	bne.n	8002e38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	7b1b      	ldrb	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	035a      	lsls	r2, r3, #13
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e00b      	b.n	8002e38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <HAL_ADC_Init+0x1a8>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e68:	d003      	beq.n	8002e72 <HAL_ADC_Init+0x126>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d104      	bne.n	8002e7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	051b      	lsls	r3, r3, #20
 8002e7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <HAL_ADC_Init+0x1ac>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eb6:	e018      	b.n	8002eea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	f023 0312 	bic.w	r3, r3, #18
 8002ec0:	f043 0210 	orr.w	r2, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ed8:	e007      	b.n	8002eea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	f043 0210 	orr.w	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	ffe1f7fd 	.word	0xffe1f7fd
 8002ef8:	ff1f0efe 	.word	0xff1f0efe

08002efc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_Start+0x1a>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e098      	b.n	8003048 <HAL_ADC_Start+0x14c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 faa4 	bl	800346c <ADC_Enable>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 8087 	bne.w	800303e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a41      	ldr	r2, [pc, #260]	@ (8003050 <HAL_ADC_Start+0x154>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_Start+0x5e>
 8002f4e:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <HAL_ADC_Start+0x158>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d026      	beq.n	8002fc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f84:	e01d      	b.n	8002fc2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2f      	ldr	r2, [pc, #188]	@ (8003054 <HAL_ADC_Start+0x158>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_Start+0xaa>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8003050 <HAL_ADC_Start+0x154>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_ADC_Start+0xc6>
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8003054 <HAL_ADC_Start+0x158>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd2:	f023 0206 	bic.w	r2, r3, #6
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fda:	e002      	b.n	8002fe2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0202 	mvn.w	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ffe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003002:	d113      	bne.n	800302c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <HAL_ADC_Start+0x154>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d105      	bne.n	800301a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800300e:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_ADC_Start+0x158>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	e00c      	b.n	8003046 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e003      	b.n	8003046 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40012800 	.word	0x40012800
 8003054:	40012400 	.word	0x40012400

08003058 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800306e:	f7ff fe3f 	bl	8002cf0 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0d3      	b.n	8003242 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d131      	bne.n	800310c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d12a      	bne.n	800310c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030b6:	e021      	b.n	80030fc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d01d      	beq.n	80030fc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_ADC_PollForConversion+0x7e>
 80030c6:	f7ff fe13 	bl	8002cf0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d212      	bcs.n	80030fc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0a2      	b.n	8003242 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0d6      	beq.n	80030b8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800310a:	e070      	b.n	80031ee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800310c:	4b4f      	ldr	r3, [pc, #316]	@ (800324c <HAL_ADC_PollForConversion+0x1f4>)
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	2002      	movs	r0, #2
 8003112:	f002 fb49 	bl	80057a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003116:	4603      	mov	r3, r0
 8003118:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	4b4b      	ldr	r3, [pc, #300]	@ (8003250 <HAL_ADC_PollForConversion+0x1f8>)
 8003124:	400b      	ands	r3, r1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_ADC_PollForConversion+0x104>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68d9      	ldr	r1, [r3, #12]
 8003130:	4b48      	ldr	r3, [pc, #288]	@ (8003254 <HAL_ADC_PollForConversion+0x1fc>)
 8003132:	400b      	ands	r3, r1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <HAL_ADC_PollForConversion+0x104>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <HAL_ADC_PollForConversion+0x200>)
 8003140:	400b      	ands	r3, r1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d108      	bne.n	8003158 <HAL_ADC_PollForConversion+0x100>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68d9      	ldr	r1, [r3, #12]
 800314c:	4b43      	ldr	r3, [pc, #268]	@ (800325c <HAL_ADC_PollForConversion+0x204>)
 800314e:	400b      	ands	r3, r1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_PollForConversion+0x100>
 8003154:	2314      	movs	r3, #20
 8003156:	e020      	b.n	800319a <HAL_ADC_PollForConversion+0x142>
 8003158:	2329      	movs	r3, #41	@ 0x29
 800315a:	e01e      	b.n	800319a <HAL_ADC_PollForConversion+0x142>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <HAL_ADC_PollForConversion+0x200>)
 8003164:	400b      	ands	r3, r1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_ADC_PollForConversion+0x120>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68d9      	ldr	r1, [r3, #12]
 8003170:	4b3a      	ldr	r3, [pc, #232]	@ (800325c <HAL_ADC_PollForConversion+0x204>)
 8003172:	400b      	ands	r3, r1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_ADC_PollForConversion+0x13c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6919      	ldr	r1, [r3, #16]
 800317e:	4b38      	ldr	r3, [pc, #224]	@ (8003260 <HAL_ADC_PollForConversion+0x208>)
 8003180:	400b      	ands	r3, r1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_ADC_PollForConversion+0x140>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68d9      	ldr	r1, [r3, #12]
 800318c:	4b34      	ldr	r3, [pc, #208]	@ (8003260 <HAL_ADC_PollForConversion+0x208>)
 800318e:	400b      	ands	r3, r1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_ADC_PollForConversion+0x140>
 8003194:	2354      	movs	r3, #84	@ 0x54
 8003196:	e000      	b.n	800319a <HAL_ADC_PollForConversion+0x142>
 8003198:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031a0:	e021      	b.n	80031e6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d01a      	beq.n	80031e0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_ADC_PollForConversion+0x168>
 80031b0:	f7ff fd9e 	bl	8002cf0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d20f      	bcs.n	80031e0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d90b      	bls.n	80031e0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	f043 0204 	orr.w	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e030      	b.n	8003242 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d8d9      	bhi.n	80031a2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0212 	mvn.w	r2, #18
 80031f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800320e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003212:	d115      	bne.n	8003240 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003218:	2b00      	cmp	r3, #0
 800321a:	d111      	bne.n	8003240 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	bf00      	nop
 800324c:	20000040 	.word	0x20000040
 8003250:	24924924 	.word	0x24924924
 8003254:	00924924 	.word	0x00924924
 8003258:	12492492 	.word	0x12492492
 800325c:	00492492 	.word	0x00492492
 8003260:	00249249 	.word	0x00249249

08003264 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x20>
 8003298:	2302      	movs	r3, #2
 800329a:	e0dc      	b.n	8003456 <HAL_ADC_ConfigChannel+0x1da>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d81c      	bhi.n	80032e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	3b05      	subs	r3, #5
 80032be:	221f      	movs	r2, #31
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	4019      	ands	r1, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	3b05      	subs	r3, #5
 80032d8:	fa00 f203 	lsl.w	r2, r0, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80032e4:	e03c      	b.n	8003360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d81c      	bhi.n	8003328 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	3b23      	subs	r3, #35	@ 0x23
 8003300:	221f      	movs	r2, #31
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	4019      	ands	r1, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	3b23      	subs	r3, #35	@ 0x23
 800331a:	fa00 f203 	lsl.w	r2, r0, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
 8003326:	e01b      	b.n	8003360 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b41      	subs	r3, #65	@ 0x41
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	4019      	ands	r1, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3b41      	subs	r3, #65	@ 0x41
 8003354:	fa00 f203 	lsl.w	r2, r0, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d91c      	bls.n	80033a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68d9      	ldr	r1, [r3, #12]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	3b1e      	subs	r3, #30
 800337a:	2207      	movs	r2, #7
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	4019      	ands	r1, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6898      	ldr	r0, [r3, #8]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	3b1e      	subs	r3, #30
 8003394:	fa00 f203 	lsl.w	r2, r0, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e019      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6919      	ldr	r1, [r3, #16]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	2207      	movs	r2, #7
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4019      	ands	r1, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6898      	ldr	r0, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	fa00 f203 	lsl.w	r2, r0, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d003      	beq.n	80033e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033e2:	2b11      	cmp	r3, #17
 80033e4:	d132      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_ADC_ConfigChannel+0x1e4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d125      	bne.n	800343c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d126      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800340c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b10      	cmp	r3, #16
 8003414:	d11a      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <HAL_ADC_ConfigChannel+0x1e8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a13      	ldr	r2, [pc, #76]	@ (8003468 <HAL_ADC_ConfigChannel+0x1ec>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0c9a      	lsrs	r2, r3, #18
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800342c:	e002      	b.n	8003434 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3b01      	subs	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <HAL_ADC_ConfigChannel+0x1b2>
 800343a:	e007      	b.n	800344c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40012400 	.word	0x40012400
 8003464:	20000040 	.word	0x20000040
 8003468:	431bde83 	.word	0x431bde83

0800346c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d040      	beq.n	800350c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800349a:	4b1f      	ldr	r3, [pc, #124]	@ (8003518 <ADC_Enable+0xac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <ADC_Enable+0xb0>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	0c9b      	lsrs	r3, r3, #18
 80034a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034a8:	e002      	b.n	80034b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f9      	bne.n	80034aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034b6:	f7ff fc1b 	bl	8002cf0 <HAL_GetTick>
 80034ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034bc:	e01f      	b.n	80034fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034be:	f7ff fc17 	bl	8002cf0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d918      	bls.n	80034fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d011      	beq.n	80034fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e007      	b.n	800350e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d1d8      	bne.n	80034be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000040 	.word	0x20000040
 800351c:	431bde83 	.word	0x431bde83

08003520 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d12e      	bne.n	8003598 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800354a:	f7ff fbd1 	bl	8002cf0 <HAL_GetTick>
 800354e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003550:	e01b      	b.n	800358a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003552:	f7ff fbcd 	bl	8002cf0 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d914      	bls.n	800358a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10d      	bne.n	800358a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e007      	b.n	800359a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d0dc      	beq.n	8003552 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035c0:	4013      	ands	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d6:	4a04      	ldr	r2, [pc, #16]	@ (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	60d3      	str	r3, [r2, #12]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f0:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <__NVIC_GetPriorityGrouping+0x18>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 0307 	and.w	r3, r3, #7
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db0b      	blt.n	8003632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	4906      	ldr	r1, [pc, #24]	@ (800363c <__NVIC_EnableIRQ+0x34>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	@ (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
         );
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	@ 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003708:	d301      	bcc.n	800370e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370a:	2301      	movs	r3, #1
 800370c:	e00f      	b.n	800372e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370e:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <SysTick_Config+0x40>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003716:	210f      	movs	r1, #15
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f7ff ff90 	bl	8003640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <SysTick_Config+0x40>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003726:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <SysTick_Config+0x40>)
 8003728:	2207      	movs	r2, #7
 800372a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e010 	.word	0xe000e010

0800373c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff2d 	bl	80035a4 <__NVIC_SetPriorityGrouping>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003764:	f7ff ff42 	bl	80035ec <__NVIC_GetPriorityGrouping>
 8003768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7ff ff90 	bl	8003694 <NVIC_EncodePriority>
 8003774:	4602      	mov	r2, r0
 8003776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff5f 	bl	8003640 <__NVIC_SetPriority>
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff35 	bl	8003608 <__NVIC_EnableIRQ>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffa2 	bl	80036f8 <SysTick_Config>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b08b      	sub	sp, #44	@ 0x2c
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037ce:	2300      	movs	r3, #0
 80037d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d2:	e169      	b.n	8003aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037d4:	2201      	movs	r2, #1
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	f040 8158 	bne.w	8003aa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003a60 <HAL_GPIO_Init+0x2a0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d05e      	beq.n	80038ba <HAL_GPIO_Init+0xfa>
 80037fc:	4a98      	ldr	r2, [pc, #608]	@ (8003a60 <HAL_GPIO_Init+0x2a0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d875      	bhi.n	80038ee <HAL_GPIO_Init+0x12e>
 8003802:	4a98      	ldr	r2, [pc, #608]	@ (8003a64 <HAL_GPIO_Init+0x2a4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d058      	beq.n	80038ba <HAL_GPIO_Init+0xfa>
 8003808:	4a96      	ldr	r2, [pc, #600]	@ (8003a64 <HAL_GPIO_Init+0x2a4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d86f      	bhi.n	80038ee <HAL_GPIO_Init+0x12e>
 800380e:	4a96      	ldr	r2, [pc, #600]	@ (8003a68 <HAL_GPIO_Init+0x2a8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d052      	beq.n	80038ba <HAL_GPIO_Init+0xfa>
 8003814:	4a94      	ldr	r2, [pc, #592]	@ (8003a68 <HAL_GPIO_Init+0x2a8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d869      	bhi.n	80038ee <HAL_GPIO_Init+0x12e>
 800381a:	4a94      	ldr	r2, [pc, #592]	@ (8003a6c <HAL_GPIO_Init+0x2ac>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d04c      	beq.n	80038ba <HAL_GPIO_Init+0xfa>
 8003820:	4a92      	ldr	r2, [pc, #584]	@ (8003a6c <HAL_GPIO_Init+0x2ac>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d863      	bhi.n	80038ee <HAL_GPIO_Init+0x12e>
 8003826:	4a92      	ldr	r2, [pc, #584]	@ (8003a70 <HAL_GPIO_Init+0x2b0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d046      	beq.n	80038ba <HAL_GPIO_Init+0xfa>
 800382c:	4a90      	ldr	r2, [pc, #576]	@ (8003a70 <HAL_GPIO_Init+0x2b0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d85d      	bhi.n	80038ee <HAL_GPIO_Init+0x12e>
 8003832:	2b12      	cmp	r3, #18
 8003834:	d82a      	bhi.n	800388c <HAL_GPIO_Init+0xcc>
 8003836:	2b12      	cmp	r3, #18
 8003838:	d859      	bhi.n	80038ee <HAL_GPIO_Init+0x12e>
 800383a:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <HAL_GPIO_Init+0x80>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	080038bb 	.word	0x080038bb
 8003844:	08003895 	.word	0x08003895
 8003848:	080038a7 	.word	0x080038a7
 800384c:	080038e9 	.word	0x080038e9
 8003850:	080038ef 	.word	0x080038ef
 8003854:	080038ef 	.word	0x080038ef
 8003858:	080038ef 	.word	0x080038ef
 800385c:	080038ef 	.word	0x080038ef
 8003860:	080038ef 	.word	0x080038ef
 8003864:	080038ef 	.word	0x080038ef
 8003868:	080038ef 	.word	0x080038ef
 800386c:	080038ef 	.word	0x080038ef
 8003870:	080038ef 	.word	0x080038ef
 8003874:	080038ef 	.word	0x080038ef
 8003878:	080038ef 	.word	0x080038ef
 800387c:	080038ef 	.word	0x080038ef
 8003880:	080038ef 	.word	0x080038ef
 8003884:	0800389d 	.word	0x0800389d
 8003888:	080038b1 	.word	0x080038b1
 800388c:	4a79      	ldr	r2, [pc, #484]	@ (8003a74 <HAL_GPIO_Init+0x2b4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003892:	e02c      	b.n	80038ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	623b      	str	r3, [r7, #32]
          break;
 800389a:	e029      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	3304      	adds	r3, #4
 80038a2:	623b      	str	r3, [r7, #32]
          break;
 80038a4:	e024      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	3308      	adds	r3, #8
 80038ac:	623b      	str	r3, [r7, #32]
          break;
 80038ae:	e01f      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	330c      	adds	r3, #12
 80038b6:	623b      	str	r3, [r7, #32]
          break;
 80038b8:	e01a      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038c2:	2304      	movs	r3, #4
 80038c4:	623b      	str	r3, [r7, #32]
          break;
 80038c6:	e013      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038d0:	2308      	movs	r3, #8
 80038d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	611a      	str	r2, [r3, #16]
          break;
 80038da:	e009      	b.n	80038f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038dc:	2308      	movs	r3, #8
 80038de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	615a      	str	r2, [r3, #20]
          break;
 80038e6:	e003      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
          break;
 80038ec:	e000      	b.n	80038f0 <HAL_GPIO_Init+0x130>
          break;
 80038ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2bff      	cmp	r3, #255	@ 0xff
 80038f4:	d801      	bhi.n	80038fa <HAL_GPIO_Init+0x13a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	e001      	b.n	80038fe <HAL_GPIO_Init+0x13e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2bff      	cmp	r3, #255	@ 0xff
 8003904:	d802      	bhi.n	800390c <HAL_GPIO_Init+0x14c>
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	e002      	b.n	8003912 <HAL_GPIO_Init+0x152>
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	3b08      	subs	r3, #8
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	210f      	movs	r1, #15
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	6a39      	ldr	r1, [r7, #32]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	431a      	orrs	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80b1 	beq.w	8003aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003940:	4b4d      	ldr	r3, [pc, #308]	@ (8003a78 <HAL_GPIO_Init+0x2b8>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a4c      	ldr	r2, [pc, #304]	@ (8003a78 <HAL_GPIO_Init+0x2b8>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b4a      	ldr	r3, [pc, #296]	@ (8003a78 <HAL_GPIO_Init+0x2b8>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003958:	4a48      	ldr	r2, [pc, #288]	@ (8003a7c <HAL_GPIO_Init+0x2bc>)
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	3302      	adds	r3, #2
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a40      	ldr	r2, [pc, #256]	@ (8003a80 <HAL_GPIO_Init+0x2c0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_GPIO_Init+0x1ec>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a3f      	ldr	r2, [pc, #252]	@ (8003a84 <HAL_GPIO_Init+0x2c4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00d      	beq.n	80039a8 <HAL_GPIO_Init+0x1e8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3e      	ldr	r2, [pc, #248]	@ (8003a88 <HAL_GPIO_Init+0x2c8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <HAL_GPIO_Init+0x1e4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a3d      	ldr	r2, [pc, #244]	@ (8003a8c <HAL_GPIO_Init+0x2cc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_GPIO_Init+0x1e0>
 800399c:	2303      	movs	r3, #3
 800399e:	e006      	b.n	80039ae <HAL_GPIO_Init+0x1ee>
 80039a0:	2304      	movs	r3, #4
 80039a2:	e004      	b.n	80039ae <HAL_GPIO_Init+0x1ee>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e002      	b.n	80039ae <HAL_GPIO_Init+0x1ee>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_GPIO_Init+0x1ee>
 80039ac:	2300      	movs	r3, #0
 80039ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b0:	f002 0203 	and.w	r2, r2, #3
 80039b4:	0092      	lsls	r2, r2, #2
 80039b6:	4093      	lsls	r3, r2
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039be:	492f      	ldr	r1, [pc, #188]	@ (8003a7c <HAL_GPIO_Init+0x2bc>)
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	492c      	ldr	r1, [pc, #176]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	4928      	ldr	r1, [pc, #160]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a00:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	4922      	ldr	r1, [pc, #136]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
 8003a0c:	e006      	b.n	8003a1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	491e      	ldr	r1, [pc, #120]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d006      	beq.n	8003a36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a28:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4918      	ldr	r1, [pc, #96]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a36:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	4914      	ldr	r1, [pc, #80]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d021      	beq.n	8003a94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	490e      	ldr	r1, [pc, #56]	@ (8003a90 <HAL_GPIO_Init+0x2d0>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	e021      	b.n	8003aa2 <HAL_GPIO_Init+0x2e2>
 8003a5e:	bf00      	nop
 8003a60:	10320000 	.word	0x10320000
 8003a64:	10310000 	.word	0x10310000
 8003a68:	10220000 	.word	0x10220000
 8003a6c:	10210000 	.word	0x10210000
 8003a70:	10120000 	.word	0x10120000
 8003a74:	10110000 	.word	0x10110000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010800 	.word	0x40010800
 8003a84:	40010c00 	.word	0x40010c00
 8003a88:	40011000 	.word	0x40011000
 8003a8c:	40011400 	.word	0x40011400
 8003a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <HAL_GPIO_Init+0x304>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4909      	ldr	r1, [pc, #36]	@ (8003ac4 <HAL_GPIO_Init+0x304>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f47f ae8e 	bne.w	80037d4 <HAL_GPIO_Init+0x14>
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	372c      	adds	r7, #44	@ 0x2c
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e001      	b.n	8003aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	807b      	strh	r3, [r7, #2]
 8003b02:	4613      	mov	r3, r2
 8003b04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b06:	787b      	ldrb	r3, [r7, #1]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0c:	887a      	ldrh	r2, [r7, #2]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b12:	e003      	b.n	8003b1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	041a      	lsls	r2, r3, #16
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b3e:	4a05      	ldr	r2, [pc, #20]	@ (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fab6 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40010400 	.word	0x40010400

08003b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e12b      	b.n	8003dc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fe fd90 	bl	80026a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	@ 0x24
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bbc:	f001 fcf8 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a81      	ldr	r2, [pc, #516]	@ (8003dcc <HAL_I2C_Init+0x274>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d807      	bhi.n	8003bdc <HAL_I2C_Init+0x84>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a80      	ldr	r2, [pc, #512]	@ (8003dd0 <HAL_I2C_Init+0x278>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e006      	b.n	8003bea <HAL_I2C_Init+0x92>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a7d      	ldr	r2, [pc, #500]	@ (8003dd4 <HAL_I2C_Init+0x27c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0e7      	b.n	8003dc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a78      	ldr	r2, [pc, #480]	@ (8003dd8 <HAL_I2C_Init+0x280>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9b      	lsrs	r3, r3, #18
 8003bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	@ (8003dcc <HAL_I2C_Init+0x274>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d802      	bhi.n	8003c2c <HAL_I2C_Init+0xd4>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	e009      	b.n	8003c40 <HAL_I2C_Init+0xe8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	4a69      	ldr	r2, [pc, #420]	@ (8003ddc <HAL_I2C_Init+0x284>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	3301      	adds	r3, #1
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	495c      	ldr	r1, [pc, #368]	@ (8003dcc <HAL_I2C_Init+0x274>)
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	d819      	bhi.n	8003c94 <HAL_I2C_Init+0x13c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e59      	subs	r1, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c74:	400b      	ands	r3, r1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_I2C_Init+0x138>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1e59      	subs	r1, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	e051      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003c90:	2304      	movs	r3, #4
 8003c92:	e04f      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d111      	bne.n	8003cc0 <HAL_I2C_Init+0x168>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	440b      	add	r3, r1
 8003caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e012      	b.n	8003ce6 <HAL_I2C_Init+0x18e>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	0099      	lsls	r1, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Init+0x196>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e022      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <HAL_I2C_Init+0x1bc>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e58      	subs	r0, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	440b      	add	r3, r1
 8003d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d12:	e00f      	b.n	8003d34 <HAL_I2C_Init+0x1dc>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	0099      	lsls	r1, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	6809      	ldr	r1, [r1, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6911      	ldr	r1, [r2, #16]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68d2      	ldr	r2, [r2, #12]
 8003d6e:	4311      	orrs	r1, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	000186a0 	.word	0x000186a0
 8003dd0:	001e847f 	.word	0x001e847f
 8003dd4:	003d08ff 	.word	0x003d08ff
 8003dd8:	431bde83 	.word	0x431bde83
 8003ddc:	10624dd3 	.word	0x10624dd3

08003de0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	461a      	mov	r2, r3
 8003dec:	460b      	mov	r3, r1
 8003dee:	817b      	strh	r3, [r7, #10]
 8003df0:	4613      	mov	r3, r2
 8003df2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7fe ff7c 	bl	8002cf0 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 80e0 	bne.w	8003fc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2319      	movs	r3, #25
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4970      	ldr	r1, [pc, #448]	@ (8003fd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fdcc 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0d3      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2C_Master_Transmit+0x50>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0cc      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d007      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2221      	movs	r2, #33	@ 0x21
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2210      	movs	r2, #16
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a50      	ldr	r2, [pc, #320]	@ (8003fd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fc36 	bl	8004710 <I2C_MasterRequestWrite>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e08d      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ec4:	e066      	b.n	8003f94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fe8a 	bl	8004be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06b      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_I2C_Master_Transmit+0x188>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d017      	beq.n	8003f68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	6a39      	ldr	r1, [r7, #32]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fe81 	bl	8004c74 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d107      	bne.n	8003f90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01a      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d194      	bne.n	8003ec6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00100002 	.word	0x00100002
 8003fd8:	ffff0000 	.word	0xffff0000

08003fdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	@ 0x30
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	460b      	mov	r3, r1
 8003fea:	817b      	strh	r3, [r7, #10]
 8003fec:	4613      	mov	r3, r2
 8003fee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7fe fe7c 	bl	8002cf0 <HAL_GetTick>
 8003ff8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	f040 824b 	bne.w	800449e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2319      	movs	r3, #25
 800400e:	2201      	movs	r2, #1
 8004010:	497f      	ldr	r1, [pc, #508]	@ (8004210 <HAL_I2C_Master_Receive+0x234>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fccc 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
 8004020:	e23e      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_I2C_Master_Receive+0x54>
 800402c:	2302      	movs	r3, #2
 800402e:	e237      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d007      	beq.n	8004056 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0201 	orr.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2222      	movs	r2, #34	@ 0x22
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2210      	movs	r2, #16
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	893a      	ldrh	r2, [r7, #8]
 8004086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a5f      	ldr	r2, [pc, #380]	@ (8004214 <HAL_I2C_Master_Receive+0x238>)
 8004096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004098:	8979      	ldrh	r1, [r7, #10]
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fbb8 	bl	8004814 <I2C_MasterRequestRead>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e1f8      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e1cc      	b.n	8004478 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d11e      	bne.n	8004124 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f6:	b672      	cpsid	i
}
 80040f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004120:	b662      	cpsie	i
}
 8004122:	e035      	b.n	8004190 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	d11e      	bne.n	800416a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800413a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800413c:	b672      	cpsid	i
}
 800413e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004166:	b662      	cpsie	i
}
 8004168:	e012      	b.n	8004190 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004190:	e172      	b.n	8004478 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004196:	2b03      	cmp	r3, #3
 8004198:	f200 811f 	bhi.w	80043da <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d123      	bne.n	80041ec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fdab 	bl	8004d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e173      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ea:	e145      	b.n	8004478 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d152      	bne.n	800429a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	2200      	movs	r2, #0
 80041fc:	4906      	ldr	r1, [pc, #24]	@ (8004218 <HAL_I2C_Master_Receive+0x23c>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fbd6 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e148      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
 800420e:	bf00      	nop
 8004210:	00100002 	.word	0x00100002
 8004214:	ffff0000 	.word	0xffff0000
 8004218:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800421c:	b672      	cpsid	i
}
 800421e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004262:	b662      	cpsie	i
}
 8004264:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004298:	e0ee      	b.n	8004478 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	4981      	ldr	r1, [pc, #516]	@ (80044a8 <HAL_I2C_Master_Receive+0x4cc>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fb83 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0f5      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042c4:	b672      	cpsid	i
}
 80042c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042fa:	4b6c      	ldr	r3, [pc, #432]	@ (80044ac <HAL_I2C_Master_Receive+0x4d0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	08db      	lsrs	r3, r3, #3
 8004300:	4a6b      	ldr	r2, [pc, #428]	@ (80044b0 <HAL_I2C_Master_Receive+0x4d4>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0a1a      	lsrs	r2, r3, #8
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00da      	lsls	r2, r3, #3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	3b01      	subs	r3, #1
 8004318:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d118      	bne.n	8004352 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004342:	b662      	cpsie	i
}
 8004344:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0a6      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d1d9      	bne.n	8004314 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043a2:	b662      	cpsie	i
}
 80043a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043d8:	e04e      	b.n	8004478 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fc90 	bl	8004d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e058      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b04      	cmp	r3, #4
 800442c:	d124      	bne.n	8004478 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004444:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f ae88 	bne.w	8004192 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	@ 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00010004 	.word	0x00010004
 80044ac:	20000040 	.word	0x20000040
 80044b0:	14f8b589 	.word	0x14f8b589

080044b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	@ 0x28
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	460b      	mov	r3, r1
 80044c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7fe fc14 	bl	8002cf0 <HAL_GetTick>
 80044c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	f040 8111 	bne.w	80046fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2319      	movs	r3, #25
 80044e2:	2201      	movs	r2, #1
 80044e4:	4988      	ldr	r1, [pc, #544]	@ (8004708 <HAL_I2C_IsDeviceReady+0x254>)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa62 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
 80044f4:	e104      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_I2C_IsDeviceReady+0x50>
 8004500:	2302      	movs	r3, #2
 8004502:	e0fd      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d007      	beq.n	800452a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004538:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2224      	movs	r2, #36	@ 0x24
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a70      	ldr	r2, [pc, #448]	@ (800470c <HAL_I2C_IsDeviceReady+0x258>)
 800454c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800455c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fa20 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004584:	d103      	bne.n	800458e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0b6      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004592:	897b      	ldrh	r3, [r7, #10]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fe fba5 	bl	8002cf0 <HAL_GetTick>
 80045a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	bf0c      	ite	eq
 80045b6:	2301      	moveq	r3, #1
 80045b8:	2300      	movne	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045d6:	e025      	b.n	8004624 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045d8:	f7fe fb8a 	bl	8002cf0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d302      	bcc.n	80045ee <HAL_I2C_IsDeviceReady+0x13a>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	22a0      	movs	r2, #160	@ 0xa0
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2ba0      	cmp	r3, #160	@ 0xa0
 800462e:	d005      	beq.n	800463c <HAL_I2C_IsDeviceReady+0x188>
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_I2C_IsDeviceReady+0x188>
 8004636:	7dbb      	ldrb	r3, [r7, #22]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0cd      	beq.n	80045d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d129      	bne.n	80046a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004660:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2319      	movs	r3, #25
 800467e:	2201      	movs	r2, #1
 8004680:	4921      	ldr	r1, [pc, #132]	@ (8004708 <HAL_I2C_IsDeviceReady+0x254>)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f994 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e036      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e02c      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2319      	movs	r3, #25
 80046c6:	2201      	movs	r2, #1
 80046c8:	490f      	ldr	r1, [pc, #60]	@ (8004708 <HAL_I2C_IsDeviceReady+0x254>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f970 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e012      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3301      	adds	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	f4ff af32 	bcc.w	800454e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	00100002 	.word	0x00100002
 800470c:	ffff0000 	.word	0xffff0000

08004710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	460b      	mov	r3, r1
 800471e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d006      	beq.n	800473a <I2C_MasterRequestWrite+0x2a>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d003      	beq.n	800473a <I2C_MasterRequestWrite+0x2a>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004738:	d108      	bne.n	800474c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e00b      	b.n	8004764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	2b12      	cmp	r3, #18
 8004752:	d107      	bne.n	8004764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f91d 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00d      	beq.n	8004798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800478a:	d103      	bne.n	8004794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e035      	b.n	8004804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a0:	d108      	bne.n	80047b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047a2:	897b      	ldrh	r3, [r7, #10]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047b0:	611a      	str	r2, [r3, #16]
 80047b2:	e01b      	b.n	80047ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047b4:	897b      	ldrh	r3, [r7, #10]
 80047b6:	11db      	asrs	r3, r3, #7
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0306 	and.w	r3, r3, #6
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f063 030f 	orn	r3, r3, #15
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	490e      	ldr	r1, [pc, #56]	@ (800480c <I2C_MasterRequestWrite+0xfc>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f966 	bl	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e010      	b.n	8004804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047e2:	897b      	ldrh	r3, [r7, #10]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4907      	ldr	r1, [pc, #28]	@ (8004810 <I2C_MasterRequestWrite+0x100>)
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f956 	bl	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	00010008 	.word	0x00010008
 8004810:	00010002 	.word	0x00010002

08004814 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004838:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d006      	beq.n	800484e <I2C_MasterRequestRead+0x3a>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d003      	beq.n	800484e <I2C_MasterRequestRead+0x3a>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800484c:	d108      	bne.n	8004860 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e00b      	b.n	8004878 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	2b11      	cmp	r3, #17
 8004866:	d107      	bne.n	8004878 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f893 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489e:	d103      	bne.n	80048a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e079      	b.n	80049a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	e05f      	b.n	8004988 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048c8:	897b      	ldrh	r3, [r7, #10]
 80048ca:	11db      	asrs	r3, r3, #7
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 0306 	and.w	r3, r3, #6
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f063 030f 	orn	r3, r3, #15
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4930      	ldr	r1, [pc, #192]	@ (80049a8 <I2C_MasterRequestRead+0x194>)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f8dc 	bl	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e054      	b.n	80049a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048f6:	897b      	ldrh	r3, [r7, #10]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	4929      	ldr	r1, [pc, #164]	@ (80049ac <I2C_MasterRequestRead+0x198>)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8cc 	bl	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e044      	b.n	80049a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f831 	bl	80049b0 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004962:	d103      	bne.n	800496c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e017      	b.n	80049a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004970:	897b      	ldrh	r3, [r7, #10]
 8004972:	11db      	asrs	r3, r3, #7
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f063 030e 	orn	r3, r3, #14
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4907      	ldr	r1, [pc, #28]	@ (80049ac <I2C_MasterRequestRead+0x198>)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f888 	bl	8004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	00010008 	.word	0x00010008
 80049ac:	00010002 	.word	0x00010002

080049b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	e048      	b.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d044      	beq.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fe f991 	bl	8002cf0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d139      	bne.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0c1b      	lsrs	r3, r3, #16
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d10d      	bne.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x56>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	43da      	mvns	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	e00c      	b.n	8004a20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d116      	bne.n	8004a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e023      	b.n	8004a9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d10d      	bne.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	43da      	mvns	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	e00c      	b.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d093      	beq.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ab2:	e071      	b.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac2:	d123      	bne.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0204 	orr.w	r2, r3, #4
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e067      	b.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d041      	beq.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b14:	f7fe f8ec 	bl	8002cf0 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d302      	bcc.n	8004b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d136      	bne.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d10c      	bne.n	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e00b      	b.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e021      	b.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10c      	bne.n	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e00b      	b.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f47f af6d 	bne.w	8004ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf0:	e034      	b.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f8e3 	bl	8004dbe <I2C_IsAcknowledgeFailed>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e034      	b.n	8004c6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d028      	beq.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fe f871 	bl	8002cf0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11d      	bne.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	2b80      	cmp	r3, #128	@ 0x80
 8004c2c:	d016      	beq.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d1c3      	bne.n	8004bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c80:	e034      	b.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f89b 	bl	8004dbe <I2C_IsAcknowledgeFailed>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e034      	b.n	8004cfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d028      	beq.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9a:	f7fe f829 	bl	8002cf0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11d      	bne.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d016      	beq.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e007      	b.n	8004cfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d1c3      	bne.n	8004c82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d10:	e049      	b.n	8004da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d119      	bne.n	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e030      	b.n	8004db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fd ffcc 	bl	8002cf0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11d      	bne.n	8004da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d016      	beq.n	8004da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e007      	b.n	8004db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b40      	cmp	r3, #64	@ 0x40
 8004db2:	d1ae      	bne.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd4:	d11b      	bne.n	8004e0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dde:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
	...

08004e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e272      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e3c:	4b92      	ldr	r3, [pc, #584]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d00c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e48:	4b8f      	ldr	r3, [pc, #572]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d112      	bne.n	8004e7a <HAL_RCC_OscConfig+0x5e>
 8004e54:	4b8c      	ldr	r3, [pc, #560]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d10b      	bne.n	8004e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e62:	4b89      	ldr	r3, [pc, #548]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d06c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x12c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d168      	bne.n	8004f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e24c      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x76>
 8004e84:	4b80      	ldr	r3, [pc, #512]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a7f      	ldr	r2, [pc, #508]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e02e      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x98>
 8004e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7a      	ldr	r2, [pc, #488]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b78      	ldr	r3, [pc, #480]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a77      	ldr	r2, [pc, #476]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xbc>
 8004ebe:	4b72      	ldr	r3, [pc, #456]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a71      	ldr	r2, [pc, #452]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b6f      	ldr	r3, [pc, #444]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6e      	ldr	r2, [pc, #440]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6a      	ldr	r2, [pc, #424]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b68      	ldr	r3, [pc, #416]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a67      	ldr	r2, [pc, #412]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fd fefa 	bl	8002cf0 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fd fef6 	bl	8002cf0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	@ 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e200      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b5d      	ldr	r3, [pc, #372]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe4>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd fee6 	bl	8002cf0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd fee2 	bl	8002cf0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	@ 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e1ec      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b53      	ldr	r3, [pc, #332]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x10c>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d063      	beq.n	800501e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f56:	4b4c      	ldr	r3, [pc, #304]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f62:	4b49      	ldr	r3, [pc, #292]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x18c>
 8004f6e:	4b46      	ldr	r3, [pc, #280]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b43      	ldr	r3, [pc, #268]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x176>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1c0      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b3d      	ldr	r3, [pc, #244]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4939      	ldr	r1, [pc, #228]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e03a      	b.n	800501e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b36      	ldr	r3, [pc, #216]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7fd fe9b 	bl	8002cf0 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fd fe97 	bl	8002cf0 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1a1      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4927      	ldr	r1, [pc, #156]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	e015      	b.n	800501e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b26      	ldr	r3, [pc, #152]	@ (800508c <HAL_RCC_OscConfig+0x270>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fd fe7a 	bl	8002cf0 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005000:	f7fd fe76 	bl	8002cf0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e180      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	4b1d      	ldr	r3, [pc, #116]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d03a      	beq.n	80050a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d019      	beq.n	8005066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4b17      	ldr	r3, [pc, #92]	@ (8005090 <HAL_RCC_OscConfig+0x274>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fd fe5a 	bl	8002cf0 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005040:	f7fd fe56 	bl	8002cf0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e160      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_RCC_OscConfig+0x26c>)
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800505e:	2001      	movs	r0, #1
 8005060:	f000 face 	bl	8005600 <RCC_Delay>
 8005064:	e01c      	b.n	80050a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <HAL_RCC_OscConfig+0x274>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506c:	f7fd fe40 	bl	8002cf0 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005072:	e00f      	b.n	8005094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005074:	f7fd fe3c 	bl	8002cf0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d908      	bls.n	8005094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e146      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000
 800508c:	42420000 	.word	0x42420000
 8005090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b92      	ldr	r3, [pc, #584]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e9      	bne.n	8005074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a6 	beq.w	80051fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b8b      	ldr	r3, [pc, #556]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	4b88      	ldr	r3, [pc, #544]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4a87      	ldr	r2, [pc, #540]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c8:	61d3      	str	r3, [r2, #28]
 80050ca:	4b85      	ldr	r3, [pc, #532]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050da:	4b82      	ldr	r3, [pc, #520]	@ (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d118      	bne.n	8005118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e6:	4b7f      	ldr	r3, [pc, #508]	@ (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7e      	ldr	r2, [pc, #504]	@ (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f2:	f7fd fdfd 	bl	8002cf0 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fa:	f7fd fdf9 	bl	8002cf0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b64      	cmp	r3, #100	@ 0x64
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e103      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510c:	4b75      	ldr	r3, [pc, #468]	@ (80052e4 <HAL_RCC_OscConfig+0x4c8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d106      	bne.n	800512e <HAL_RCC_OscConfig+0x312>
 8005120:	4b6f      	ldr	r3, [pc, #444]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	4a6e      	ldr	r2, [pc, #440]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6213      	str	r3, [r2, #32]
 800512c:	e02d      	b.n	800518a <HAL_RCC_OscConfig+0x36e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x334>
 8005136:	4b6a      	ldr	r3, [pc, #424]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4a69      	ldr	r2, [pc, #420]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6213      	str	r3, [r2, #32]
 8005142:	4b67      	ldr	r3, [pc, #412]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4a66      	ldr	r2, [pc, #408]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	6213      	str	r3, [r2, #32]
 800514e:	e01c      	b.n	800518a <HAL_RCC_OscConfig+0x36e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d10c      	bne.n	8005172 <HAL_RCC_OscConfig+0x356>
 8005158:	4b61      	ldr	r3, [pc, #388]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4a60      	ldr	r2, [pc, #384]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	6213      	str	r3, [r2, #32]
 8005164:	4b5e      	ldr	r3, [pc, #376]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4a5d      	ldr	r2, [pc, #372]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6213      	str	r3, [r2, #32]
 8005170:	e00b      	b.n	800518a <HAL_RCC_OscConfig+0x36e>
 8005172:	4b5b      	ldr	r3, [pc, #364]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4a5a      	ldr	r2, [pc, #360]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	6213      	str	r3, [r2, #32]
 800517e:	4b58      	ldr	r3, [pc, #352]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a57      	ldr	r2, [pc, #348]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d015      	beq.n	80051be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005192:	f7fd fdad 	bl	8002cf0 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fd fda9 	bl	8002cf0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e0b1      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	4b4b      	ldr	r3, [pc, #300]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0ee      	beq.n	800519a <HAL_RCC_OscConfig+0x37e>
 80051bc:	e014      	b.n	80051e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fd fd97 	bl	8002cf0 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fd fd93 	bl	8002cf0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e09b      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051dc:	4b40      	ldr	r3, [pc, #256]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ee:	4b3c      	ldr	r3, [pc, #240]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4a3b      	ldr	r2, [pc, #236]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8087 	beq.w	8005312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005204:	4b36      	ldr	r3, [pc, #216]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d061      	beq.n	80052d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d146      	bne.n	80052a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005218:	4b33      	ldr	r3, [pc, #204]	@ (80052e8 <HAL_RCC_OscConfig+0x4cc>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fd fd67 	bl	8002cf0 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7fd fd63 	bl	8002cf0 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e06d      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005238:	4b29      	ldr	r3, [pc, #164]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f0      	bne.n	8005226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524c:	d108      	bne.n	8005260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4921      	ldr	r1, [pc, #132]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005260:	4b1f      	ldr	r3, [pc, #124]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a19      	ldr	r1, [r3, #32]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	430b      	orrs	r3, r1
 8005272:	491b      	ldr	r1, [pc, #108]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005278:	4b1b      	ldr	r3, [pc, #108]	@ (80052e8 <HAL_RCC_OscConfig+0x4cc>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7fd fd37 	bl	8002cf0 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7fd fd33 	bl	8002cf0 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e03d      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005298:	4b11      	ldr	r3, [pc, #68]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x46a>
 80052a4:	e035      	b.n	8005312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a6:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <HAL_RCC_OscConfig+0x4cc>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fd fd20 	bl	8002cf0 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fd fd1c 	bl	8002cf0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e026      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c6:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x498>
 80052d2:	e01e      	b.n	8005312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d107      	bne.n	80052ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e019      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40007000 	.word	0x40007000
 80052e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ec:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <HAL_RCC_OscConfig+0x500>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000

08005320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0d0      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b6a      	ldr	r3, [pc, #424]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d910      	bls.n	8005364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b67      	ldr	r3, [pc, #412]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 0207 	bic.w	r2, r3, #7
 800534a:	4965      	ldr	r1, [pc, #404]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b63      	ldr	r3, [pc, #396]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0b8      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d020      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800537c:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a58      	ldr	r2, [pc, #352]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005394:	4b53      	ldr	r3, [pc, #332]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a52      	ldr	r2, [pc, #328]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800539e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a0:	4b50      	ldr	r3, [pc, #320]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	494d      	ldr	r1, [pc, #308]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d040      	beq.n	8005440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d107      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c6:	4b47      	ldr	r3, [pc, #284]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e07f      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b41      	ldr	r3, [pc, #260]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e073      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e06b      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fe:	4b39      	ldr	r3, [pc, #228]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4936      	ldr	r1, [pc, #216]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005410:	f7fd fc6e 	bl	8002cf0 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7fd fc6a 	bl	8002cf0 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e053      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	4b2d      	ldr	r3, [pc, #180]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 020c 	and.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d1eb      	bne.n	8005418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005440:	4b27      	ldr	r3, [pc, #156]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d210      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b24      	ldr	r3, [pc, #144]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 0207 	bic.w	r2, r3, #7
 8005456:	4922      	ldr	r1, [pc, #136]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b20      	ldr	r3, [pc, #128]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e032      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800547c:	4b19      	ldr	r3, [pc, #100]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4916      	ldr	r1, [pc, #88]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800549a:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	490e      	ldr	r1, [pc, #56]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ae:	f000 f821 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	490a      	ldr	r1, [pc, #40]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	5ccb      	ldrb	r3, [r1, r3]
 80054c2:	fa22 f303 	lsr.w	r3, r2, r3
 80054c6:	4a09      	ldr	r2, [pc, #36]	@ (80054ec <HAL_RCC_ClockConfig+0x1cc>)
 80054c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ca:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <HAL_RCC_ClockConfig+0x1d0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fd fbcc 	bl	8002c6c <HAL_InitTick>

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40021000 	.word	0x40021000
 80054e8:	0800a8c4 	.word	0x0800a8c4
 80054ec:	20000040 	.word	0x20000040
 80054f0:	20000044 	.word	0x20000044

080054f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800550e:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x94>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d002      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x30>
 800551e:	2b08      	cmp	r3, #8
 8005520:	d003      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0x36>
 8005522:	e027      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005524:	4b19      	ldr	r3, [pc, #100]	@ (800558c <HAL_RCC_GetSysClockFreq+0x98>)
 8005526:	613b      	str	r3, [r7, #16]
      break;
 8005528:	e027      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	0c9b      	lsrs	r3, r3, #18
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	4a17      	ldr	r2, [pc, #92]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005542:	4b11      	ldr	r3, [pc, #68]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x94>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	0c5b      	lsrs	r3, r3, #17
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	4a11      	ldr	r2, [pc, #68]	@ (8005594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a0d      	ldr	r2, [pc, #52]	@ (800558c <HAL_RCC_GetSysClockFreq+0x98>)
 8005556:	fb03 f202 	mul.w	r2, r3, r2
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e004      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0c      	ldr	r2, [pc, #48]	@ (8005598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	613b      	str	r3, [r7, #16]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_GetSysClockFreq+0x98>)
 8005576:	613b      	str	r3, [r7, #16]
      break;
 8005578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557a:	693b      	ldr	r3, [r7, #16]
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	007a1200 	.word	0x007a1200
 8005590:	0800a8dc 	.word	0x0800a8dc
 8005594:	0800a8ec 	.word	0x0800a8ec
 8005598:	003d0900 	.word	0x003d0900

0800559c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a0:	4b02      	ldr	r3, [pc, #8]	@ (80055ac <HAL_RCC_GetHCLKFreq+0x10>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	20000040 	.word	0x20000040

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055b4:	f7ff fff2 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4903      	ldr	r1, [pc, #12]	@ (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000
 80055d4:	0800a8d4 	.word	0x0800a8d4

080055d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055dc:	f7ff ffde 	bl	800559c <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	0adb      	lsrs	r3, r3, #11
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4903      	ldr	r1, [pc, #12]	@ (80055fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021000 	.word	0x40021000
 80055fc:	0800a8d4 	.word	0x0800a8d4

08005600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <RCC_Delay+0x34>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a0a      	ldr	r2, [pc, #40]	@ (8005638 <RCC_Delay+0x38>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	0a5b      	lsrs	r3, r3, #9
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800561c:	bf00      	nop
  }
  while (Delay --);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1e5a      	subs	r2, r3, #1
 8005622:	60fa      	str	r2, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f9      	bne.n	800561c <RCC_Delay+0x1c>
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr
 8005634:	20000040 	.word	0x20000040
 8005638:	10624dd3 	.word	0x10624dd3

0800563c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d07d      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005658:	2300      	movs	r3, #0
 800565a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565c:	4b4f      	ldr	r3, [pc, #316]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10d      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b4c      	ldr	r3, [pc, #304]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a4b      	ldr	r2, [pc, #300]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
 8005674:	4b49      	ldr	r3, [pc, #292]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	4b46      	ldr	r3, [pc, #280]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d118      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005690:	4b43      	ldr	r3, [pc, #268]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a42      	ldr	r2, [pc, #264]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569c:	f7fd fb28 	bl	8002cf0 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a2:	e008      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a4:	f7fd fb24 	bl	8002cf0 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	@ 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e06d      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	4b3a      	ldr	r3, [pc, #232]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056c2:	4b36      	ldr	r3, [pc, #216]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d02e      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d027      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056e0:	4b2e      	ldr	r3, [pc, #184]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ea:	4b2e      	ldr	r3, [pc, #184]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056f0:	4b2c      	ldr	r3, [pc, #176]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056f6:	4a29      	ldr	r2, [pc, #164]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005706:	f7fd faf3 	bl	8002cf0 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570c:	e00a      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fd faef 	bl	8002cf0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e036      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ee      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005730:	4b1a      	ldr	r3, [pc, #104]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4917      	ldr	r1, [pc, #92]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	4313      	orrs	r3, r2
 8005740:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005748:	4b14      	ldr	r3, [pc, #80]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	4a13      	ldr	r2, [pc, #76]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005752:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005760:	4b0e      	ldr	r3, [pc, #56]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	490b      	ldr	r1, [pc, #44]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	4313      	orrs	r3, r2
 8005770:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800577e:	4b07      	ldr	r3, [pc, #28]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4904      	ldr	r1, [pc, #16]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	40007000 	.word	0x40007000
 80057a4:	42420440 	.word	0x42420440

080057a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	2300      	movs	r3, #0
 80057c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	f200 808a 	bhi.w	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d045      	beq.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d075      	beq.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80057de:	e082      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80057e0:	4b46      	ldr	r3, [pc, #280]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80057e6:	4b45      	ldr	r3, [pc, #276]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d07b      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	0c9b      	lsrs	r3, r3, #18
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	4a41      	ldr	r2, [pc, #260]	@ (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80057fc:	5cd3      	ldrb	r3, [r2, r3]
 80057fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800580a:	4b3c      	ldr	r3, [pc, #240]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	0c5b      	lsrs	r3, r3, #17
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	4a3b      	ldr	r2, [pc, #236]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00d      	beq.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005824:	4a38      	ldr	r2, [pc, #224]	@ (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	fbb2 f2f3 	udiv	r2, r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e004      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4a34      	ldr	r2, [pc, #208]	@ (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005840:	4b2e      	ldr	r3, [pc, #184]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800584c:	d102      	bne.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	61bb      	str	r3, [r7, #24]
      break;
 8005852:	e04a      	b.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4a2d      	ldr	r2, [pc, #180]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
      break;
 8005862:	e042      	b.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005864:	4b25      	ldr	r3, [pc, #148]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005874:	d108      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e01f      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005892:	d109      	bne.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005894:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80058a0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e00f      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b2:	d11c      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80058b4:	4b11      	ldr	r3, [pc, #68]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80058c0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80058c4:	61bb      	str	r3, [r7, #24]
      break;
 80058c6:	e012      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80058c8:	e011      	b.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80058ca:	f7ff fe85 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b0a      	ldr	r3, [pc, #40]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0b9b      	lsrs	r3, r3, #14
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	61bb      	str	r3, [r7, #24]
      break;
 80058e4:	e004      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058e6:	bf00      	nop
 80058e8:	e002      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058ea:	bf00      	nop
 80058ec:	e000      	b.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80058ee:	bf00      	nop
    }
  }
  return (frequency);
 80058f0:	69bb      	ldr	r3, [r7, #24]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
 8005900:	0800a8f0 	.word	0x0800a8f0
 8005904:	0800a900 	.word	0x0800a900
 8005908:	007a1200 	.word	0x007a1200
 800590c:	003d0900 	.word	0x003d0900
 8005910:	aaaaaaab 	.word	0xaaaaaaab

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e076      	b.n	8005a14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005936:	d009      	beq.n	800594c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
 800593e:	e005      	b.n	800594c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc fedc 	bl	8002724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d0:	ea42 0103 	orr.w	r1, r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1a      	lsrs	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f002 0204 	and.w	r2, r2, #4
 80059f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a2c:	f7fd f960 	bl	8002cf0 <HAL_GetTick>
 8005a30:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
 8005a44:	e12a      	b.n	8005c9c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_SPI_Transmit+0x36>
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e122      	b.n	8005c9c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_SPI_Transmit+0x48>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e11b      	b.n	8005c9c <HAL_SPI_Transmit+0x280>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2203      	movs	r2, #3
 8005a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d007      	beq.n	8005af2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005afa:	d152      	bne.n	8005ba2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_SPI_Transmit+0xee>
 8005b04:	8b7b      	ldrh	r3, [r7, #26]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d145      	bne.n	8005b96 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b2e:	e032      	b.n	8005b96 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d112      	bne.n	8005b64 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	1c9a      	adds	r2, r3, #2
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b62:	e018      	b.n	8005b96 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b64:	f7fd f8c4 	bl	8002cf0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d803      	bhi.n	8005b7c <HAL_SPI_Transmit+0x160>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d102      	bne.n	8005b82 <HAL_SPI_Transmit+0x166>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e082      	b.n	8005c9c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1c7      	bne.n	8005b30 <HAL_SPI_Transmit+0x114>
 8005ba0:	e053      	b.n	8005c4a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_Transmit+0x194>
 8005baa:	8b7b      	ldrh	r3, [r7, #26]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d147      	bne.n	8005c40 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bd6:	e033      	b.n	8005c40 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d113      	bne.n	8005c0e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	7812      	ldrb	r2, [r2, #0]
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c0c:	e018      	b.n	8005c40 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0e:	f7fd f86f 	bl	8002cf0 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d803      	bhi.n	8005c26 <HAL_SPI_Transmit+0x20a>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_Transmit+0x210>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e02d      	b.n	8005c9c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1c6      	bne.n	8005bd8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fbc4 	bl	80063dc <SPI_EndRxTxTransaction>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
  }
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d001      	beq.n	8005cc4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e104      	b.n	8005ece <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ccc:	d112      	bne.n	8005cf4 <HAL_SPI_Receive+0x50>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10e      	bne.n	8005cf4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f8f3 	bl	8005ed6 <HAL_SPI_TransmitReceive>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	e0ec      	b.n	8005ece <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf4:	f7fc fffc 	bl	8002cf0 <HAL_GetTick>
 8005cf8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_SPI_Receive+0x62>
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e0e1      	b.n	8005ece <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_SPI_Receive+0x74>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e0da      	b.n	8005ece <HAL_SPI_Receive+0x22a>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2204      	movs	r2, #4
 8005d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d66:	d10f      	bne.n	8005d88 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b40      	cmp	r3, #64	@ 0x40
 8005d94:	d007      	beq.n	8005da6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d170      	bne.n	8005e90 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005dae:	e035      	b.n	8005e1c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d115      	bne.n	8005dea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f103 020c 	add.w	r2, r3, #12
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005de8:	e018      	b.n	8005e1c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dea:	f7fc ff81 	bl	8002cf0 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d803      	bhi.n	8005e02 <HAL_SPI_Receive+0x15e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d102      	bne.n	8005e08 <HAL_SPI_Receive+0x164>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d109      	bne.n	8005e1c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e058      	b.n	8005ece <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1c4      	bne.n	8005db0 <HAL_SPI_Receive+0x10c>
 8005e26:	e038      	b.n	8005e9a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d113      	bne.n	8005e5e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	b292      	uxth	r2, r2
 8005e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e48:	1c9a      	adds	r2, r3, #2
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e5c:	e018      	b.n	8005e90 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5e:	f7fc ff47 	bl	8002cf0 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d803      	bhi.n	8005e76 <HAL_SPI_Receive+0x1d2>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d102      	bne.n	8005e7c <HAL_SPI_Receive+0x1d8>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e01e      	b.n	8005ece <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1c6      	bne.n	8005e28 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa4a 	bl	8006338 <SPI_EndRxTransaction>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08a      	sub	sp, #40	@ 0x28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee8:	f7fc ff02 	bl	8002cf0 <HAL_GetTick>
 8005eec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ef4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f00:	7ffb      	ldrb	r3, [r7, #31]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d00c      	beq.n	8005f20 <HAL_SPI_TransmitReceive+0x4a>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f0c:	d106      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x46>
 8005f16:	7ffb      	ldrb	r3, [r7, #31]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d001      	beq.n	8005f20 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e17f      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_SPI_TransmitReceive+0x5c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_SPI_TransmitReceive+0x5c>
 8005f2c:	887b      	ldrh	r3, [r7, #2]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e174      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x6e>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e16d      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d003      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	887a      	ldrh	r2, [r7, #2]
 8005f70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	887a      	ldrh	r2, [r7, #2]
 8005f76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d007      	beq.n	8005fb4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fbc:	d17e      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0xf6>
 8005fc6:	8afb      	ldrh	r3, [r7, #22]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d16c      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	1c9a      	adds	r2, r3, #2
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff0:	e059      	b.n	80060a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d11b      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x162>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_SPI_TransmitReceive+0x162>
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	2b01      	cmp	r3, #1
 800600e:	d113      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006014:	881a      	ldrh	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	1c9a      	adds	r2, r3, #2
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d119      	bne.n	800607a <HAL_SPI_TransmitReceive+0x1a4>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d014      	beq.n	800607a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	b292      	uxth	r2, r2
 800605c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006076:	2301      	movs	r3, #1
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800607a:	f7fc fe39 	bl	8002cf0 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006086:	429a      	cmp	r2, r3
 8006088:	d80d      	bhi.n	80060a6 <HAL_SPI_TransmitReceive+0x1d0>
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d009      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0bc      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1a0      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x11c>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d19b      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x11c>
 80060ba:	e082      	b.n	80061c2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x1f4>
 80060c4:	8afb      	ldrh	r3, [r7, #22]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d171      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f0:	e05d      	b.n	80061ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d11c      	bne.n	800613a <HAL_SPI_TransmitReceive+0x264>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <HAL_SPI_TransmitReceive+0x264>
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	2b01      	cmp	r3, #1
 800610e:	d114      	bne.n	800613a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b01      	cmp	r3, #1
 8006146:	d119      	bne.n	800617c <HAL_SPI_TransmitReceive+0x2a6>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d014      	beq.n	800617c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006178:	2301      	movs	r3, #1
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800617c:	f7fc fdb8 	bl	8002cf0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006188:	429a      	cmp	r2, r3
 800618a:	d803      	bhi.n	8006194 <HAL_SPI_TransmitReceive+0x2be>
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d102      	bne.n	800619a <HAL_SPI_TransmitReceive+0x2c4>
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e038      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d19c      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x21c>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d197      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c2:	6a3a      	ldr	r2, [r7, #32]
 80061c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f908 	bl	80063dc <SPI_EndRxTxTransaction>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e01d      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ec:	2300      	movs	r3, #0
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800621e:	2300      	movs	r3, #0
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3728      	adds	r7, #40	@ 0x28
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006238:	f7fc fd5a 	bl	8002cf0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006248:	f7fc fd52 	bl	8002cf0 <HAL_GetTick>
 800624c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800624e:	4b39      	ldr	r3, [pc, #228]	@ (8006334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	015b      	lsls	r3, r3, #5
 8006254:	0d1b      	lsrs	r3, r3, #20
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625e:	e054      	b.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d050      	beq.n	800630a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006268:	f7fc fd42 	bl	8002cf0 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	429a      	cmp	r2, r3
 8006276:	d902      	bls.n	800627e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d13d      	bne.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800628c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006296:	d111      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a0:	d004      	beq.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062aa:	d107      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c4:	d10f      	bne.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e017      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d19b      	bne.n	8006260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3720      	adds	r7, #32
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000040 	.word	0x20000040

08006338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800634c:	d111      	bne.n	8006372 <SPI_EndRxTransaction+0x3a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006356:	d004      	beq.n	8006362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006360:	d107      	bne.n	8006372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006370:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800637a:	d117      	bne.n	80063ac <SPI_EndRxTransaction+0x74>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006384:	d112      	bne.n	80063ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2200      	movs	r2, #0
 800638e:	2101      	movs	r1, #1
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff ff49 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01a      	beq.n	80063d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a0:	f043 0220 	orr.w	r2, r3, #32
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e013      	b.n	80063d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	2180      	movs	r1, #128	@ 0x80
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff36 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	f043 0220 	orr.w	r2, r3, #32
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e000      	b.n	80063d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2201      	movs	r2, #1
 80063f0:	2102      	movs	r1, #2
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff ff18 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e013      	b.n	8006436 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	2180      	movs	r1, #128	@ 0x80
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff ff05 	bl	8006228 <SPI_WaitFlagStateUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006428:	f043 0220 	orr.w	r2, r3, #32
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e000      	b.n	8006436 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e041      	b.n	80064d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc f9a9 	bl	80027bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3304      	adds	r3, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f000 fb25 	bl	8006acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_TIM_PWM_Start+0x24>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	e022      	b.n	8006546 <HAL_TIM_PWM_Start+0x6a>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d109      	bne.n	800651a <HAL_TIM_PWM_Start+0x3e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b01      	cmp	r3, #1
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	e015      	b.n	8006546 <HAL_TIM_PWM_Start+0x6a>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d109      	bne.n	8006534 <HAL_TIM_PWM_Start+0x58>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	bf14      	ite	ne
 800652c:	2301      	movne	r3, #1
 800652e:	2300      	moveq	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e008      	b.n	8006546 <HAL_TIM_PWM_Start+0x6a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e05e      	b.n	800660c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <HAL_TIM_PWM_Start+0x82>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800655c:	e013      	b.n	8006586 <HAL_TIM_PWM_Start+0xaa>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b04      	cmp	r3, #4
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start+0x92>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800656c:	e00b      	b.n	8006586 <HAL_TIM_PWM_Start+0xaa>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0xa2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800657c:	e003      	b.n	8006586 <HAL_TIM_PWM_Start+0xaa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fc92 	bl	8006eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1e      	ldr	r2, [pc, #120]	@ (8006614 <HAL_TIM_PWM_Start+0x138>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d107      	bne.n	80065ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_TIM_PWM_Start+0x138>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_TIM_PWM_Start+0xfa>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c0:	d009      	beq.n	80065d6 <HAL_TIM_PWM_Start+0xfa>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a14      	ldr	r2, [pc, #80]	@ (8006618 <HAL_TIM_PWM_Start+0x13c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIM_PWM_Start+0xfa>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a12      	ldr	r2, [pc, #72]	@ (800661c <HAL_TIM_PWM_Start+0x140>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d111      	bne.n	80065fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d010      	beq.n	800660a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	e007      	b.n	800660a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800

08006620 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fc40 	bl	8006eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a29      	ldr	r2, [pc, #164]	@ (80066e4 <HAL_TIM_PWM_Stop+0xc4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d117      	bne.n	8006672 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	f241 1311 	movw	r3, #4369	@ 0x1111
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_TIM_PWM_Stop+0x52>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a1a      	ldr	r2, [r3, #32]
 8006658:	f240 4344 	movw	r3, #1092	@ 0x444
 800665c:	4013      	ands	r3, r2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <HAL_TIM_PWM_Stop+0x52>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006670:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a1a      	ldr	r2, [r3, #32]
 8006678:	f241 1311 	movw	r3, #4369	@ 0x1111
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10f      	bne.n	80066a2 <HAL_TIM_PWM_Stop+0x82>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6a1a      	ldr	r2, [r3, #32]
 8006688:	f240 4344 	movw	r3, #1092	@ 0x444
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d107      	bne.n	80066a2 <HAL_TIM_PWM_Stop+0x82>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_PWM_Stop+0x92>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066b0:	e013      	b.n	80066da <HAL_TIM_PWM_Stop+0xba>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d104      	bne.n	80066c2 <HAL_TIM_PWM_Stop+0xa2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066c0:	e00b      	b.n	80066da <HAL_TIM_PWM_Stop+0xba>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Stop+0xb2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066d0:	e003      	b.n	80066da <HAL_TIM_PWM_Stop+0xba>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40012c00 	.word	0x40012c00

080066e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e093      	b.n	8006824 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7fc f883 	bl	800281c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800672c:	f023 0307 	bic.w	r3, r3, #7
 8006730:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 f9c5 	bl	8006acc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	4313      	orrs	r3, r2
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006788:	f023 030c 	bic.w	r3, r3, #12
 800678c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006794:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	4313      	orrs	r3, r2
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	031b      	lsls	r3, r3, #12
 80067b8:	4313      	orrs	r3, r2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80067c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	4313      	orrs	r3, r2
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800683c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006844:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800684c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006854:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d110      	bne.n	800687e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d102      	bne.n	8006868 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006862:	7b7b      	ldrb	r3, [r7, #13]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e069      	b.n	8006940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800687c:	e031      	b.n	80068e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b04      	cmp	r3, #4
 8006882:	d110      	bne.n	80068a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d102      	bne.n	8006890 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800688a:	7b3b      	ldrb	r3, [r7, #12]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d001      	beq.n	8006894 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e055      	b.n	8006940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068a4:	e01d      	b.n	80068e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d108      	bne.n	80068be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d105      	bne.n	80068be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d102      	bne.n	80068be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068b8:	7b3b      	ldrb	r3, [r7, #12]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d001      	beq.n	80068c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e03e      	b.n	8006940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_TIM_Encoder_Start+0xc4>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d008      	beq.n	8006900 <HAL_TIM_Encoder_Start+0xd4>
 80068ee:	e00f      	b.n	8006910 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fadd 	bl	8006eb8 <TIM_CCxChannelCmd>
      break;
 80068fe:	e016      	b.n	800692e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2201      	movs	r2, #1
 8006906:	2104      	movs	r1, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fad5 	bl	8006eb8 <TIM_CCxChannelCmd>
      break;
 800690e:	e00e      	b.n	800692e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 facd 	bl	8006eb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	2104      	movs	r1, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fac6 	bl	8006eb8 <TIM_CCxChannelCmd>
      break;
 800692c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006962:	2302      	movs	r3, #2
 8006964:	e0ae      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b0c      	cmp	r3, #12
 8006972:	f200 809f 	bhi.w	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069b1 	.word	0x080069b1
 8006980:	08006ab5 	.word	0x08006ab5
 8006984:	08006ab5 	.word	0x08006ab5
 8006988:	08006ab5 	.word	0x08006ab5
 800698c:	080069f1 	.word	0x080069f1
 8006990:	08006ab5 	.word	0x08006ab5
 8006994:	08006ab5 	.word	0x08006ab5
 8006998:	08006ab5 	.word	0x08006ab5
 800699c:	08006a33 	.word	0x08006a33
 80069a0:	08006ab5 	.word	0x08006ab5
 80069a4:	08006ab5 	.word	0x08006ab5
 80069a8:	08006ab5 	.word	0x08006ab5
 80069ac:	08006a73 	.word	0x08006a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f8f6 	bl	8006ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0208 	orr.w	r2, r2, #8
 80069ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0204 	bic.w	r2, r2, #4
 80069da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6999      	ldr	r1, [r3, #24]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	619a      	str	r2, [r3, #24]
      break;
 80069ee:	e064      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f93c 	bl	8006c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	021a      	lsls	r2, r3, #8
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	619a      	str	r2, [r3, #24]
      break;
 8006a30:	e043      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f985 	bl	8006d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0204 	bic.w	r2, r2, #4
 8006a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69d9      	ldr	r1, [r3, #28]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	61da      	str	r2, [r3, #28]
      break;
 8006a70:	e023      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 f9cf 	bl	8006e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69d9      	ldr	r1, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	61da      	str	r2, [r3, #28]
      break;
 8006ab2:	e002      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a2f      	ldr	r2, [pc, #188]	@ (8006b9c <TIM_Base_SetConfig+0xd0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x30>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x30>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba0 <TIM_Base_SetConfig+0xd4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x30>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a2b      	ldr	r2, [pc, #172]	@ (8006ba4 <TIM_Base_SetConfig+0xd8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a22      	ldr	r2, [pc, #136]	@ (8006b9c <TIM_Base_SetConfig+0xd0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <TIM_Base_SetConfig+0x62>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1c:	d007      	beq.n	8006b2e <TIM_Base_SetConfig+0x62>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba0 <TIM_Base_SetConfig+0xd4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_Base_SetConfig+0x62>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba4 <TIM_Base_SetConfig+0xd8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d108      	bne.n	8006b40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0d      	ldr	r2, [pc, #52]	@ (8006b9c <TIM_Base_SetConfig+0xd0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d103      	bne.n	8006b74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f023 0201 	bic.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	611a      	str	r2, [r3, #16]
  }
}
 8006b92:	bf00      	nop
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800

08006ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f023 0201 	bic.w	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 0302 	bic.w	r3, r3, #2
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8006c70 <TIM_OC1_SetConfig+0xc8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d10c      	bne.n	8006c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0308 	bic.w	r3, r3, #8
 8006c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a13      	ldr	r2, [pc, #76]	@ (8006c70 <TIM_OC1_SetConfig+0xc8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d111      	bne.n	8006c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00

08006c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	f023 0210 	bic.w	r2, r3, #16
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <TIM_OC2_SetConfig+0xd0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10d      	bne.n	8006cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a14      	ldr	r2, [pc, #80]	@ (8006d44 <TIM_OC2_SetConfig+0xd0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d113      	bne.n	8006d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr
 8006d44:	40012c00 	.word	0x40012c00

08006d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e18 <TIM_OC3_SetConfig+0xd0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d10d      	bne.n	8006dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <TIM_OC3_SetConfig+0xd0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d113      	bne.n	8006df2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00

08006e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	031b      	lsls	r3, r3, #12
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a0f      	ldr	r2, [pc, #60]	@ (8006eb4 <TIM_OC4_SetConfig+0x98>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d109      	bne.n	8006e90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr
 8006eb4:	40012c00 	.word	0x40012c00

08006eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2201      	movs	r2, #1
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1a      	ldr	r2, [r3, #32]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	401a      	ands	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a1a      	ldr	r2, [r3, #32]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e046      	b.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f64:	d009      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a12      	ldr	r2, [pc, #72]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a10      	ldr	r2, [pc, #64]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d10c      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bc80      	pop	{r7}
 8006fae:	4770      	bx	lr
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40000400 	.word	0x40000400
 8006fb8:	40000800 	.word	0x40000800

08006fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e042      	b.n	8007054 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb fcd4 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	@ 0x24
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f971 	bl	80072e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	@ 0x28
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b20      	cmp	r3, #32
 800707a:	d175      	bne.n	8007168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Transmit+0x2c>
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e06e      	b.n	800716a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2221      	movs	r2, #33	@ 0x21
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800709a:	f7fb fe29 	bl	8002cf0 <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	88fa      	ldrh	r2, [r7, #6]
 80070aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070b4:	d108      	bne.n	80070c8 <HAL_UART_Transmit+0x6c>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	e003      	b.n	80070d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070d0:	e02e      	b.n	8007130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2200      	movs	r2, #0
 80070da:	2180      	movs	r1, #128	@ 0x80
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f848 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e03a      	b.n	800716a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	3302      	adds	r3, #2
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	e007      	b.n	8007122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	3301      	adds	r3, #1
 8007120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1cb      	bne.n	80070d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2200      	movs	r2, #0
 8007142:	2140      	movs	r1, #64	@ 0x40
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f814 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e006      	b.n	800716a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007168:	2302      	movs	r3, #2
  }
}
 800716a:	4618      	mov	r0, r3
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b086      	sub	sp, #24
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007182:	e03b      	b.n	80071fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d037      	beq.n	80071fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718c:	f7fb fdb0 	bl	8002cf0 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	6a3a      	ldr	r2, [r7, #32]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e03a      	b.n	800721c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d023      	beq.n	80071fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b80      	cmp	r3, #128	@ 0x80
 80071b8:	d020      	beq.n	80071fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b40      	cmp	r3, #64	@ 0x40
 80071be:	d01d      	beq.n	80071fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d116      	bne.n	80071fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f81d 	bl	8007224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2208      	movs	r2, #8
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e00f      	b.n	800721c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4013      	ands	r3, r2
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	bf0c      	ite	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	2300      	movne	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	429a      	cmp	r2, r3
 8007218:	d0b4      	beq.n	8007184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b095      	sub	sp, #84	@ 0x54
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800724c:	643a      	str	r2, [r7, #64]	@ 0x40
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007252:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3314      	adds	r3, #20
 8007266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e5      	bne.n	8007260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007298:	2b01      	cmp	r3, #1
 800729a:	d119      	bne.n	80072d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f023 0310 	bic.w	r3, r3, #16
 80072b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072bc:	61ba      	str	r2, [r7, #24]
 80072be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6979      	ldr	r1, [r7, #20]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072de:	bf00      	nop
 80072e0:	3754      	adds	r7, #84	@ 0x54
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr

080072e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007322:	f023 030c 	bic.w	r3, r3, #12
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	430b      	orrs	r3, r1
 800732e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2c      	ldr	r2, [pc, #176]	@ (80073fc <UART_SetConfig+0x114>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d103      	bne.n	8007358 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007350:	f7fe f942 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	e002      	b.n	800735e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007358:	f7fe f92a 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 800735c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009a      	lsls	r2, r3, #2
 8007368:	441a      	add	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	4a22      	ldr	r2, [pc, #136]	@ (8007400 <UART_SetConfig+0x118>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	0119      	lsls	r1, r3, #4
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009a      	lsls	r2, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	fbb2 f2f3 	udiv	r2, r2, r3
 8007394:	4b1a      	ldr	r3, [pc, #104]	@ (8007400 <UART_SetConfig+0x118>)
 8007396:	fba3 0302 	umull	r0, r3, r3, r2
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	2064      	movs	r0, #100	@ 0x64
 800739e:	fb00 f303 	mul.w	r3, r0, r3
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	3332      	adds	r3, #50	@ 0x32
 80073a8:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <UART_SetConfig+0x118>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073b4:	4419      	add	r1, r3
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009a      	lsls	r2, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <UART_SetConfig+0x118>)
 80073ce:	fba3 0302 	umull	r0, r3, r3, r2
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	2064      	movs	r0, #100	@ 0x64
 80073d6:	fb00 f303 	mul.w	r3, r0, r3
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	3332      	adds	r3, #50	@ 0x32
 80073e0:	4a07      	ldr	r2, [pc, #28]	@ (8007400 <UART_SetConfig+0x118>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	440a      	add	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40013800 	.word	0x40013800
 8007400:	51eb851f 	.word	0x51eb851f

08007404 <__cvt>:
 8007404:	2b00      	cmp	r3, #0
 8007406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740a:	461d      	mov	r5, r3
 800740c:	bfbb      	ittet	lt
 800740e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007412:	461d      	movlt	r5, r3
 8007414:	2300      	movge	r3, #0
 8007416:	232d      	movlt	r3, #45	@ 0x2d
 8007418:	b088      	sub	sp, #32
 800741a:	4614      	mov	r4, r2
 800741c:	bfb8      	it	lt
 800741e:	4614      	movlt	r4, r2
 8007420:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007422:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007424:	7013      	strb	r3, [r2, #0]
 8007426:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007428:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800742c:	f023 0820 	bic.w	r8, r3, #32
 8007430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007434:	d005      	beq.n	8007442 <__cvt+0x3e>
 8007436:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800743a:	d100      	bne.n	800743e <__cvt+0x3a>
 800743c:	3601      	adds	r6, #1
 800743e:	2302      	movs	r3, #2
 8007440:	e000      	b.n	8007444 <__cvt+0x40>
 8007442:	2303      	movs	r3, #3
 8007444:	aa07      	add	r2, sp, #28
 8007446:	9204      	str	r2, [sp, #16]
 8007448:	aa06      	add	r2, sp, #24
 800744a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800744e:	e9cd 3600 	strd	r3, r6, [sp]
 8007452:	4622      	mov	r2, r4
 8007454:	462b      	mov	r3, r5
 8007456:	f000 fe6f 	bl	8008138 <_dtoa_r>
 800745a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800745e:	4607      	mov	r7, r0
 8007460:	d119      	bne.n	8007496 <__cvt+0x92>
 8007462:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007464:	07db      	lsls	r3, r3, #31
 8007466:	d50e      	bpl.n	8007486 <__cvt+0x82>
 8007468:	eb00 0906 	add.w	r9, r0, r6
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	f7f9 fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8007478:	b108      	cbz	r0, 800747e <__cvt+0x7a>
 800747a:	f8cd 901c 	str.w	r9, [sp, #28]
 800747e:	2230      	movs	r2, #48	@ 0x30
 8007480:	9b07      	ldr	r3, [sp, #28]
 8007482:	454b      	cmp	r3, r9
 8007484:	d31e      	bcc.n	80074c4 <__cvt+0xc0>
 8007486:	4638      	mov	r0, r7
 8007488:	9b07      	ldr	r3, [sp, #28]
 800748a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800748c:	1bdb      	subs	r3, r3, r7
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	b008      	add	sp, #32
 8007492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007496:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800749a:	eb00 0906 	add.w	r9, r0, r6
 800749e:	d1e5      	bne.n	800746c <__cvt+0x68>
 80074a0:	7803      	ldrb	r3, [r0, #0]
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d10a      	bne.n	80074bc <__cvt+0xb8>
 80074a6:	2200      	movs	r2, #0
 80074a8:	2300      	movs	r3, #0
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f9 fa7b 	bl	80009a8 <__aeabi_dcmpeq>
 80074b2:	b918      	cbnz	r0, 80074bc <__cvt+0xb8>
 80074b4:	f1c6 0601 	rsb	r6, r6, #1
 80074b8:	f8ca 6000 	str.w	r6, [sl]
 80074bc:	f8da 3000 	ldr.w	r3, [sl]
 80074c0:	4499      	add	r9, r3
 80074c2:	e7d3      	b.n	800746c <__cvt+0x68>
 80074c4:	1c59      	adds	r1, r3, #1
 80074c6:	9107      	str	r1, [sp, #28]
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e7d9      	b.n	8007480 <__cvt+0x7c>

080074cc <__exponent>:
 80074cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ce:	2900      	cmp	r1, #0
 80074d0:	bfb6      	itet	lt
 80074d2:	232d      	movlt	r3, #45	@ 0x2d
 80074d4:	232b      	movge	r3, #43	@ 0x2b
 80074d6:	4249      	neglt	r1, r1
 80074d8:	2909      	cmp	r1, #9
 80074da:	7002      	strb	r2, [r0, #0]
 80074dc:	7043      	strb	r3, [r0, #1]
 80074de:	dd29      	ble.n	8007534 <__exponent+0x68>
 80074e0:	f10d 0307 	add.w	r3, sp, #7
 80074e4:	461d      	mov	r5, r3
 80074e6:	270a      	movs	r7, #10
 80074e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80074ec:	461a      	mov	r2, r3
 80074ee:	fb07 1416 	mls	r4, r7, r6, r1
 80074f2:	3430      	adds	r4, #48	@ 0x30
 80074f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074f8:	460c      	mov	r4, r1
 80074fa:	2c63      	cmp	r4, #99	@ 0x63
 80074fc:	4631      	mov	r1, r6
 80074fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007502:	dcf1      	bgt.n	80074e8 <__exponent+0x1c>
 8007504:	3130      	adds	r1, #48	@ 0x30
 8007506:	1e94      	subs	r4, r2, #2
 8007508:	f803 1c01 	strb.w	r1, [r3, #-1]
 800750c:	4623      	mov	r3, r4
 800750e:	1c41      	adds	r1, r0, #1
 8007510:	42ab      	cmp	r3, r5
 8007512:	d30a      	bcc.n	800752a <__exponent+0x5e>
 8007514:	f10d 0309 	add.w	r3, sp, #9
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	42ac      	cmp	r4, r5
 800751c:	bf88      	it	hi
 800751e:	2300      	movhi	r3, #0
 8007520:	3302      	adds	r3, #2
 8007522:	4403      	add	r3, r0
 8007524:	1a18      	subs	r0, r3, r0
 8007526:	b003      	add	sp, #12
 8007528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800752e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007532:	e7ed      	b.n	8007510 <__exponent+0x44>
 8007534:	2330      	movs	r3, #48	@ 0x30
 8007536:	3130      	adds	r1, #48	@ 0x30
 8007538:	7083      	strb	r3, [r0, #2]
 800753a:	70c1      	strb	r1, [r0, #3]
 800753c:	1d03      	adds	r3, r0, #4
 800753e:	e7f1      	b.n	8007524 <__exponent+0x58>

08007540 <_printf_float>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b091      	sub	sp, #68	@ 0x44
 8007546:	460c      	mov	r4, r1
 8007548:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800754c:	4616      	mov	r6, r2
 800754e:	461f      	mov	r7, r3
 8007550:	4605      	mov	r5, r0
 8007552:	f000 fce1 	bl	8007f18 <_localeconv_r>
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	9308      	str	r3, [sp, #32]
 800755c:	f7f8 fdf8 	bl	8000150 <strlen>
 8007560:	2300      	movs	r3, #0
 8007562:	930e      	str	r3, [sp, #56]	@ 0x38
 8007564:	f8d8 3000 	ldr.w	r3, [r8]
 8007568:	9009      	str	r0, [sp, #36]	@ 0x24
 800756a:	3307      	adds	r3, #7
 800756c:	f023 0307 	bic.w	r3, r3, #7
 8007570:	f103 0208 	add.w	r2, r3, #8
 8007574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007578:	f8d4 b000 	ldr.w	fp, [r4]
 800757c:	f8c8 2000 	str.w	r2, [r8]
 8007580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800758a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800759a:	4b9c      	ldr	r3, [pc, #624]	@ (800780c <_printf_float+0x2cc>)
 800759c:	f7f9 fa36 	bl	8000a0c <__aeabi_dcmpun>
 80075a0:	bb70      	cbnz	r0, 8007600 <_printf_float+0xc0>
 80075a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	4b98      	ldr	r3, [pc, #608]	@ (800780c <_printf_float+0x2cc>)
 80075ac:	f7f9 fa10 	bl	80009d0 <__aeabi_dcmple>
 80075b0:	bb30      	cbnz	r0, 8007600 <_printf_float+0xc0>
 80075b2:	2200      	movs	r2, #0
 80075b4:	2300      	movs	r3, #0
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f9 f9ff 	bl	80009bc <__aeabi_dcmplt>
 80075be:	b110      	cbz	r0, 80075c6 <_printf_float+0x86>
 80075c0:	232d      	movs	r3, #45	@ 0x2d
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c6:	4a92      	ldr	r2, [pc, #584]	@ (8007810 <_printf_float+0x2d0>)
 80075c8:	4b92      	ldr	r3, [pc, #584]	@ (8007814 <_printf_float+0x2d4>)
 80075ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075ce:	bf8c      	ite	hi
 80075d0:	4690      	movhi	r8, r2
 80075d2:	4698      	movls	r8, r3
 80075d4:	2303      	movs	r3, #3
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	f02b 0304 	bic.w	r3, fp, #4
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	4633      	mov	r3, r6
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	9700      	str	r7, [sp, #0]
 80075ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80075ec:	f000 f9d4 	bl	8007998 <_printf_common>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f040 8090 	bne.w	8007716 <_printf_float+0x1d6>
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295
 80075fa:	b011      	add	sp, #68	@ 0x44
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	4640      	mov	r0, r8
 8007606:	4649      	mov	r1, r9
 8007608:	f7f9 fa00 	bl	8000a0c <__aeabi_dcmpun>
 800760c:	b148      	cbz	r0, 8007622 <_printf_float+0xe2>
 800760e:	464b      	mov	r3, r9
 8007610:	2b00      	cmp	r3, #0
 8007612:	bfb8      	it	lt
 8007614:	232d      	movlt	r3, #45	@ 0x2d
 8007616:	4a80      	ldr	r2, [pc, #512]	@ (8007818 <_printf_float+0x2d8>)
 8007618:	bfb8      	it	lt
 800761a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800761e:	4b7f      	ldr	r3, [pc, #508]	@ (800781c <_printf_float+0x2dc>)
 8007620:	e7d3      	b.n	80075ca <_printf_float+0x8a>
 8007622:	6863      	ldr	r3, [r4, #4]
 8007624:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	d13f      	bne.n	80076ac <_printf_float+0x16c>
 800762c:	2306      	movs	r3, #6
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	9206      	str	r2, [sp, #24]
 800763a:	aa0e      	add	r2, sp, #56	@ 0x38
 800763c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007640:	aa0d      	add	r2, sp, #52	@ 0x34
 8007642:	9203      	str	r2, [sp, #12]
 8007644:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007648:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	4642      	mov	r2, r8
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4628      	mov	r0, r5
 8007654:	464b      	mov	r3, r9
 8007656:	910a      	str	r1, [sp, #40]	@ 0x28
 8007658:	f7ff fed4 	bl	8007404 <__cvt>
 800765c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800765e:	4680      	mov	r8, r0
 8007660:	2947      	cmp	r1, #71	@ 0x47
 8007662:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007664:	d128      	bne.n	80076b8 <_printf_float+0x178>
 8007666:	1cc8      	adds	r0, r1, #3
 8007668:	db02      	blt.n	8007670 <_printf_float+0x130>
 800766a:	6863      	ldr	r3, [r4, #4]
 800766c:	4299      	cmp	r1, r3
 800766e:	dd40      	ble.n	80076f2 <_printf_float+0x1b2>
 8007670:	f1aa 0a02 	sub.w	sl, sl, #2
 8007674:	fa5f fa8a 	uxtb.w	sl, sl
 8007678:	4652      	mov	r2, sl
 800767a:	3901      	subs	r1, #1
 800767c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007680:	910d      	str	r1, [sp, #52]	@ 0x34
 8007682:	f7ff ff23 	bl	80074cc <__exponent>
 8007686:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007688:	4681      	mov	r9, r0
 800768a:	1813      	adds	r3, r2, r0
 800768c:	2a01      	cmp	r2, #1
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	dc02      	bgt.n	8007698 <_printf_float+0x158>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	07d2      	lsls	r2, r2, #31
 8007696:	d501      	bpl.n	800769c <_printf_float+0x15c>
 8007698:	3301      	adds	r3, #1
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d09e      	beq.n	80075e2 <_printf_float+0xa2>
 80076a4:	232d      	movs	r3, #45	@ 0x2d
 80076a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076aa:	e79a      	b.n	80075e2 <_printf_float+0xa2>
 80076ac:	2947      	cmp	r1, #71	@ 0x47
 80076ae:	d1bf      	bne.n	8007630 <_printf_float+0xf0>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1bd      	bne.n	8007630 <_printf_float+0xf0>
 80076b4:	2301      	movs	r3, #1
 80076b6:	e7ba      	b.n	800762e <_printf_float+0xee>
 80076b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076bc:	d9dc      	bls.n	8007678 <_printf_float+0x138>
 80076be:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076c2:	d118      	bne.n	80076f6 <_printf_float+0x1b6>
 80076c4:	2900      	cmp	r1, #0
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	dd0b      	ble.n	80076e2 <_printf_float+0x1a2>
 80076ca:	6121      	str	r1, [r4, #16]
 80076cc:	b913      	cbnz	r3, 80076d4 <_printf_float+0x194>
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	07d0      	lsls	r0, r2, #31
 80076d2:	d502      	bpl.n	80076da <_printf_float+0x19a>
 80076d4:	3301      	adds	r3, #1
 80076d6:	440b      	add	r3, r1
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	f04f 0900 	mov.w	r9, #0
 80076de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076e0:	e7dc      	b.n	800769c <_printf_float+0x15c>
 80076e2:	b913      	cbnz	r3, 80076ea <_printf_float+0x1aa>
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	07d2      	lsls	r2, r2, #31
 80076e8:	d501      	bpl.n	80076ee <_printf_float+0x1ae>
 80076ea:	3302      	adds	r3, #2
 80076ec:	e7f4      	b.n	80076d8 <_printf_float+0x198>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e7f2      	b.n	80076d8 <_printf_float+0x198>
 80076f2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f8:	4299      	cmp	r1, r3
 80076fa:	db05      	blt.n	8007708 <_printf_float+0x1c8>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	6121      	str	r1, [r4, #16]
 8007700:	07d8      	lsls	r0, r3, #31
 8007702:	d5ea      	bpl.n	80076da <_printf_float+0x19a>
 8007704:	1c4b      	adds	r3, r1, #1
 8007706:	e7e7      	b.n	80076d8 <_printf_float+0x198>
 8007708:	2900      	cmp	r1, #0
 800770a:	bfcc      	ite	gt
 800770c:	2201      	movgt	r2, #1
 800770e:	f1c1 0202 	rsble	r2, r1, #2
 8007712:	4413      	add	r3, r2
 8007714:	e7e0      	b.n	80076d8 <_printf_float+0x198>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	055a      	lsls	r2, r3, #21
 800771a:	d407      	bmi.n	800772c <_printf_float+0x1ec>
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	4642      	mov	r2, r8
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	d12b      	bne.n	8007782 <_printf_float+0x242>
 800772a:	e764      	b.n	80075f6 <_printf_float+0xb6>
 800772c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007730:	f240 80dc 	bls.w	80078ec <_printf_float+0x3ac>
 8007734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	f7f9 f934 	bl	80009a8 <__aeabi_dcmpeq>
 8007740:	2800      	cmp	r0, #0
 8007742:	d033      	beq.n	80077ac <_printf_float+0x26c>
 8007744:	2301      	movs	r3, #1
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	4a35      	ldr	r2, [pc, #212]	@ (8007820 <_printf_float+0x2e0>)
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af51 	beq.w	80075f6 <_printf_float+0xb6>
 8007754:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007758:	4543      	cmp	r3, r8
 800775a:	db02      	blt.n	8007762 <_printf_float+0x222>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	07d8      	lsls	r0, r3, #31
 8007760:	d50f      	bpl.n	8007782 <_printf_float+0x242>
 8007762:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007766:	4631      	mov	r1, r6
 8007768:	4628      	mov	r0, r5
 800776a:	47b8      	blx	r7
 800776c:	3001      	adds	r0, #1
 800776e:	f43f af42 	beq.w	80075f6 <_printf_float+0xb6>
 8007772:	f04f 0900 	mov.w	r9, #0
 8007776:	f108 38ff 	add.w	r8, r8, #4294967295
 800777a:	f104 0a1a 	add.w	sl, r4, #26
 800777e:	45c8      	cmp	r8, r9
 8007780:	dc09      	bgt.n	8007796 <_printf_float+0x256>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	079b      	lsls	r3, r3, #30
 8007786:	f100 8102 	bmi.w	800798e <_printf_float+0x44e>
 800778a:	68e0      	ldr	r0, [r4, #12]
 800778c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800778e:	4298      	cmp	r0, r3
 8007790:	bfb8      	it	lt
 8007792:	4618      	movlt	r0, r3
 8007794:	e731      	b.n	80075fa <_printf_float+0xba>
 8007796:	2301      	movs	r3, #1
 8007798:	4652      	mov	r2, sl
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	f43f af28 	beq.w	80075f6 <_printf_float+0xb6>
 80077a6:	f109 0901 	add.w	r9, r9, #1
 80077aa:	e7e8      	b.n	800777e <_printf_float+0x23e>
 80077ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc38      	bgt.n	8007824 <_printf_float+0x2e4>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	4a19      	ldr	r2, [pc, #100]	@ (8007820 <_printf_float+0x2e0>)
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f af1a 	beq.w	80075f6 <_printf_float+0xb6>
 80077c2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80077c6:	ea59 0303 	orrs.w	r3, r9, r3
 80077ca:	d102      	bne.n	80077d2 <_printf_float+0x292>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d5d7      	bpl.n	8007782 <_printf_float+0x242>
 80077d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f af0a 	beq.w	80075f6 <_printf_float+0xb6>
 80077e2:	f04f 0a00 	mov.w	sl, #0
 80077e6:	f104 0b1a 	add.w	fp, r4, #26
 80077ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077ec:	425b      	negs	r3, r3
 80077ee:	4553      	cmp	r3, sl
 80077f0:	dc01      	bgt.n	80077f6 <_printf_float+0x2b6>
 80077f2:	464b      	mov	r3, r9
 80077f4:	e793      	b.n	800771e <_printf_float+0x1de>
 80077f6:	2301      	movs	r3, #1
 80077f8:	465a      	mov	r2, fp
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f aef8 	beq.w	80075f6 <_printf_float+0xb6>
 8007806:	f10a 0a01 	add.w	sl, sl, #1
 800780a:	e7ee      	b.n	80077ea <_printf_float+0x2aa>
 800780c:	7fefffff 	.word	0x7fefffff
 8007810:	0800a906 	.word	0x0800a906
 8007814:	0800a902 	.word	0x0800a902
 8007818:	0800a90e 	.word	0x0800a90e
 800781c:	0800a90a 	.word	0x0800a90a
 8007820:	0800a912 	.word	0x0800a912
 8007824:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007826:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800782a:	4553      	cmp	r3, sl
 800782c:	bfa8      	it	ge
 800782e:	4653      	movge	r3, sl
 8007830:	2b00      	cmp	r3, #0
 8007832:	4699      	mov	r9, r3
 8007834:	dc36      	bgt.n	80078a4 <_printf_float+0x364>
 8007836:	f04f 0b00 	mov.w	fp, #0
 800783a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800783e:	f104 021a 	add.w	r2, r4, #26
 8007842:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007844:	930a      	str	r3, [sp, #40]	@ 0x28
 8007846:	eba3 0309 	sub.w	r3, r3, r9
 800784a:	455b      	cmp	r3, fp
 800784c:	dc31      	bgt.n	80078b2 <_printf_float+0x372>
 800784e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007850:	459a      	cmp	sl, r3
 8007852:	dc3a      	bgt.n	80078ca <_printf_float+0x38a>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	07da      	lsls	r2, r3, #31
 8007858:	d437      	bmi.n	80078ca <_printf_float+0x38a>
 800785a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800785c:	ebaa 0903 	sub.w	r9, sl, r3
 8007860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007862:	ebaa 0303 	sub.w	r3, sl, r3
 8007866:	4599      	cmp	r9, r3
 8007868:	bfa8      	it	ge
 800786a:	4699      	movge	r9, r3
 800786c:	f1b9 0f00 	cmp.w	r9, #0
 8007870:	dc33      	bgt.n	80078da <_printf_float+0x39a>
 8007872:	f04f 0800 	mov.w	r8, #0
 8007876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800787a:	f104 0b1a 	add.w	fp, r4, #26
 800787e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007880:	ebaa 0303 	sub.w	r3, sl, r3
 8007884:	eba3 0309 	sub.w	r3, r3, r9
 8007888:	4543      	cmp	r3, r8
 800788a:	f77f af7a 	ble.w	8007782 <_printf_float+0x242>
 800788e:	2301      	movs	r3, #1
 8007890:	465a      	mov	r2, fp
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f aeac 	beq.w	80075f6 <_printf_float+0xb6>
 800789e:	f108 0801 	add.w	r8, r8, #1
 80078a2:	e7ec      	b.n	800787e <_printf_float+0x33e>
 80078a4:	4642      	mov	r2, r8
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1c2      	bne.n	8007836 <_printf_float+0x2f6>
 80078b0:	e6a1      	b.n	80075f6 <_printf_float+0xb6>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4631      	mov	r1, r6
 80078b6:	4628      	mov	r0, r5
 80078b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f ae9a 	beq.w	80075f6 <_printf_float+0xb6>
 80078c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078c4:	f10b 0b01 	add.w	fp, fp, #1
 80078c8:	e7bb      	b.n	8007842 <_printf_float+0x302>
 80078ca:	4631      	mov	r1, r6
 80078cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b8      	blx	r7
 80078d4:	3001      	adds	r0, #1
 80078d6:	d1c0      	bne.n	800785a <_printf_float+0x31a>
 80078d8:	e68d      	b.n	80075f6 <_printf_float+0xb6>
 80078da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078dc:	464b      	mov	r3, r9
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	4442      	add	r2, r8
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	d1c3      	bne.n	8007872 <_printf_float+0x332>
 80078ea:	e684      	b.n	80075f6 <_printf_float+0xb6>
 80078ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80078f0:	f1ba 0f01 	cmp.w	sl, #1
 80078f4:	dc01      	bgt.n	80078fa <_printf_float+0x3ba>
 80078f6:	07db      	lsls	r3, r3, #31
 80078f8:	d536      	bpl.n	8007968 <_printf_float+0x428>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4642      	mov	r2, r8
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	f43f ae76 	beq.w	80075f6 <_printf_float+0xb6>
 800790a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	f43f ae6e 	beq.w	80075f6 <_printf_float+0xb6>
 800791a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800791e:	2200      	movs	r2, #0
 8007920:	2300      	movs	r3, #0
 8007922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007926:	f7f9 f83f 	bl	80009a8 <__aeabi_dcmpeq>
 800792a:	b9c0      	cbnz	r0, 800795e <_printf_float+0x41e>
 800792c:	4653      	mov	r3, sl
 800792e:	f108 0201 	add.w	r2, r8, #1
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	d10c      	bne.n	8007956 <_printf_float+0x416>
 800793c:	e65b      	b.n	80075f6 <_printf_float+0xb6>
 800793e:	2301      	movs	r3, #1
 8007940:	465a      	mov	r2, fp
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	f43f ae54 	beq.w	80075f6 <_printf_float+0xb6>
 800794e:	f108 0801 	add.w	r8, r8, #1
 8007952:	45d0      	cmp	r8, sl
 8007954:	dbf3      	blt.n	800793e <_printf_float+0x3fe>
 8007956:	464b      	mov	r3, r9
 8007958:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800795c:	e6e0      	b.n	8007720 <_printf_float+0x1e0>
 800795e:	f04f 0800 	mov.w	r8, #0
 8007962:	f104 0b1a 	add.w	fp, r4, #26
 8007966:	e7f4      	b.n	8007952 <_printf_float+0x412>
 8007968:	2301      	movs	r3, #1
 800796a:	4642      	mov	r2, r8
 800796c:	e7e1      	b.n	8007932 <_printf_float+0x3f2>
 800796e:	2301      	movs	r3, #1
 8007970:	464a      	mov	r2, r9
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae3c 	beq.w	80075f6 <_printf_float+0xb6>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007986:	1a5b      	subs	r3, r3, r1
 8007988:	4543      	cmp	r3, r8
 800798a:	dcf0      	bgt.n	800796e <_printf_float+0x42e>
 800798c:	e6fd      	b.n	800778a <_printf_float+0x24a>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	f104 0919 	add.w	r9, r4, #25
 8007996:	e7f4      	b.n	8007982 <_printf_float+0x442>

08007998 <_printf_common>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	4698      	mov	r8, r3
 80079a0:	688a      	ldr	r2, [r1, #8]
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	4607      	mov	r7, r0
 80079a6:	4293      	cmp	r3, r2
 80079a8:	bfb8      	it	lt
 80079aa:	4613      	movlt	r3, r2
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079b2:	460c      	mov	r4, r1
 80079b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079b8:	b10a      	cbz	r2, 80079be <_printf_common+0x26>
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	0699      	lsls	r1, r3, #26
 80079c2:	bf42      	ittt	mi
 80079c4:	6833      	ldrmi	r3, [r6, #0]
 80079c6:	3302      	addmi	r3, #2
 80079c8:	6033      	strmi	r3, [r6, #0]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f015 0506 	ands.w	r5, r5, #6
 80079d0:	d106      	bne.n	80079e0 <_printf_common+0x48>
 80079d2:	f104 0a19 	add.w	sl, r4, #25
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	6832      	ldr	r2, [r6, #0]
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc2b      	bgt.n	8007a38 <_printf_common+0xa0>
 80079e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079e4:	6822      	ldr	r2, [r4, #0]
 80079e6:	3b00      	subs	r3, #0
 80079e8:	bf18      	it	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	0692      	lsls	r2, r2, #26
 80079ee:	d430      	bmi.n	8007a52 <_printf_common+0xba>
 80079f0:	4641      	mov	r1, r8
 80079f2:	4638      	mov	r0, r7
 80079f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079f8:	47c8      	blx	r9
 80079fa:	3001      	adds	r0, #1
 80079fc:	d023      	beq.n	8007a46 <_printf_common+0xae>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	6922      	ldr	r2, [r4, #16]
 8007a02:	f003 0306 	and.w	r3, r3, #6
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	bf14      	ite	ne
 8007a0a:	2500      	movne	r5, #0
 8007a0c:	6833      	ldreq	r3, [r6, #0]
 8007a0e:	f04f 0600 	mov.w	r6, #0
 8007a12:	bf08      	it	eq
 8007a14:	68e5      	ldreq	r5, [r4, #12]
 8007a16:	f104 041a 	add.w	r4, r4, #26
 8007a1a:	bf08      	it	eq
 8007a1c:	1aed      	subeq	r5, r5, r3
 8007a1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a22:	bf08      	it	eq
 8007a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bfc4      	itt	gt
 8007a2c:	1a9b      	subgt	r3, r3, r2
 8007a2e:	18ed      	addgt	r5, r5, r3
 8007a30:	42b5      	cmp	r5, r6
 8007a32:	d11a      	bne.n	8007a6a <_printf_common+0xd2>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e008      	b.n	8007a4a <_printf_common+0xb2>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4652      	mov	r2, sl
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	4638      	mov	r0, r7
 8007a40:	47c8      	blx	r9
 8007a42:	3001      	adds	r0, #1
 8007a44:	d103      	bne.n	8007a4e <_printf_common+0xb6>
 8007a46:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4e:	3501      	adds	r5, #1
 8007a50:	e7c1      	b.n	80079d6 <_printf_common+0x3e>
 8007a52:	2030      	movs	r0, #48	@ 0x30
 8007a54:	18e1      	adds	r1, r4, r3
 8007a56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a60:	4422      	add	r2, r4
 8007a62:	3302      	adds	r3, #2
 8007a64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a68:	e7c2      	b.n	80079f0 <_printf_common+0x58>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4641      	mov	r1, r8
 8007a70:	4638      	mov	r0, r7
 8007a72:	47c8      	blx	r9
 8007a74:	3001      	adds	r0, #1
 8007a76:	d0e6      	beq.n	8007a46 <_printf_common+0xae>
 8007a78:	3601      	adds	r6, #1
 8007a7a:	e7d9      	b.n	8007a30 <_printf_common+0x98>

08007a7c <_printf_i>:
 8007a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	7e0f      	ldrb	r7, [r1, #24]
 8007a82:	4691      	mov	r9, r2
 8007a84:	2f78      	cmp	r7, #120	@ 0x78
 8007a86:	4680      	mov	r8, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	469a      	mov	sl, r3
 8007a8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a92:	d807      	bhi.n	8007aa4 <_printf_i+0x28>
 8007a94:	2f62      	cmp	r7, #98	@ 0x62
 8007a96:	d80a      	bhi.n	8007aae <_printf_i+0x32>
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	f000 80d1 	beq.w	8007c40 <_printf_i+0x1c4>
 8007a9e:	2f58      	cmp	r7, #88	@ 0x58
 8007aa0:	f000 80b8 	beq.w	8007c14 <_printf_i+0x198>
 8007aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007aa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007aac:	e03a      	b.n	8007b24 <_printf_i+0xa8>
 8007aae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ab2:	2b15      	cmp	r3, #21
 8007ab4:	d8f6      	bhi.n	8007aa4 <_printf_i+0x28>
 8007ab6:	a101      	add	r1, pc, #4	@ (adr r1, 8007abc <_printf_i+0x40>)
 8007ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b29 	.word	0x08007b29
 8007ac4:	08007aa5 	.word	0x08007aa5
 8007ac8:	08007aa5 	.word	0x08007aa5
 8007acc:	08007aa5 	.word	0x08007aa5
 8007ad0:	08007aa5 	.word	0x08007aa5
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007aa5 	.word	0x08007aa5
 8007adc:	08007aa5 	.word	0x08007aa5
 8007ae0:	08007aa5 	.word	0x08007aa5
 8007ae4:	08007aa5 	.word	0x08007aa5
 8007ae8:	08007c27 	.word	0x08007c27
 8007aec:	08007b53 	.word	0x08007b53
 8007af0:	08007be1 	.word	0x08007be1
 8007af4:	08007aa5 	.word	0x08007aa5
 8007af8:	08007aa5 	.word	0x08007aa5
 8007afc:	08007c49 	.word	0x08007c49
 8007b00:	08007aa5 	.word	0x08007aa5
 8007b04:	08007b53 	.word	0x08007b53
 8007b08:	08007aa5 	.word	0x08007aa5
 8007b0c:	08007aa5 	.word	0x08007aa5
 8007b10:	08007be9 	.word	0x08007be9
 8007b14:	6833      	ldr	r3, [r6, #0]
 8007b16:	1d1a      	adds	r2, r3, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6032      	str	r2, [r6, #0]
 8007b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b24:	2301      	movs	r3, #1
 8007b26:	e09c      	b.n	8007c62 <_printf_i+0x1e6>
 8007b28:	6833      	ldr	r3, [r6, #0]
 8007b2a:	6820      	ldr	r0, [r4, #0]
 8007b2c:	1d19      	adds	r1, r3, #4
 8007b2e:	6031      	str	r1, [r6, #0]
 8007b30:	0606      	lsls	r6, r0, #24
 8007b32:	d501      	bpl.n	8007b38 <_printf_i+0xbc>
 8007b34:	681d      	ldr	r5, [r3, #0]
 8007b36:	e003      	b.n	8007b40 <_printf_i+0xc4>
 8007b38:	0645      	lsls	r5, r0, #25
 8007b3a:	d5fb      	bpl.n	8007b34 <_printf_i+0xb8>
 8007b3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	da03      	bge.n	8007b4c <_printf_i+0xd0>
 8007b44:	232d      	movs	r3, #45	@ 0x2d
 8007b46:	426d      	negs	r5, r5
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b4c:	230a      	movs	r3, #10
 8007b4e:	4858      	ldr	r0, [pc, #352]	@ (8007cb0 <_printf_i+0x234>)
 8007b50:	e011      	b.n	8007b76 <_printf_i+0xfa>
 8007b52:	6821      	ldr	r1, [r4, #0]
 8007b54:	6833      	ldr	r3, [r6, #0]
 8007b56:	0608      	lsls	r0, r1, #24
 8007b58:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b5c:	d402      	bmi.n	8007b64 <_printf_i+0xe8>
 8007b5e:	0649      	lsls	r1, r1, #25
 8007b60:	bf48      	it	mi
 8007b62:	b2ad      	uxthmi	r5, r5
 8007b64:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b66:	6033      	str	r3, [r6, #0]
 8007b68:	bf14      	ite	ne
 8007b6a:	230a      	movne	r3, #10
 8007b6c:	2308      	moveq	r3, #8
 8007b6e:	4850      	ldr	r0, [pc, #320]	@ (8007cb0 <_printf_i+0x234>)
 8007b70:	2100      	movs	r1, #0
 8007b72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b76:	6866      	ldr	r6, [r4, #4]
 8007b78:	2e00      	cmp	r6, #0
 8007b7a:	60a6      	str	r6, [r4, #8]
 8007b7c:	db05      	blt.n	8007b8a <_printf_i+0x10e>
 8007b7e:	6821      	ldr	r1, [r4, #0]
 8007b80:	432e      	orrs	r6, r5
 8007b82:	f021 0104 	bic.w	r1, r1, #4
 8007b86:	6021      	str	r1, [r4, #0]
 8007b88:	d04b      	beq.n	8007c22 <_printf_i+0x1a6>
 8007b8a:	4616      	mov	r6, r2
 8007b8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b90:	fb03 5711 	mls	r7, r3, r1, r5
 8007b94:	5dc7      	ldrb	r7, [r0, r7]
 8007b96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b9a:	462f      	mov	r7, r5
 8007b9c:	42bb      	cmp	r3, r7
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	d9f4      	bls.n	8007b8c <_printf_i+0x110>
 8007ba2:	2b08      	cmp	r3, #8
 8007ba4:	d10b      	bne.n	8007bbe <_printf_i+0x142>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	07df      	lsls	r7, r3, #31
 8007baa:	d508      	bpl.n	8007bbe <_printf_i+0x142>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	6861      	ldr	r1, [r4, #4]
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	bfde      	ittt	le
 8007bb4:	2330      	movle	r3, #48	@ 0x30
 8007bb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bbe:	1b92      	subs	r2, r2, r6
 8007bc0:	6122      	str	r2, [r4, #16]
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f8cd a000 	str.w	sl, [sp]
 8007bcc:	aa03      	add	r2, sp, #12
 8007bce:	f7ff fee3 	bl	8007998 <_printf_common>
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d14a      	bne.n	8007c6c <_printf_i+0x1f0>
 8007bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bda:	b004      	add	sp, #16
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	f043 0320 	orr.w	r3, r3, #32
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	2778      	movs	r7, #120	@ 0x78
 8007bea:	4832      	ldr	r0, [pc, #200]	@ (8007cb4 <_printf_i+0x238>)
 8007bec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	6831      	ldr	r1, [r6, #0]
 8007bf4:	061f      	lsls	r7, r3, #24
 8007bf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bfa:	d402      	bmi.n	8007c02 <_printf_i+0x186>
 8007bfc:	065f      	lsls	r7, r3, #25
 8007bfe:	bf48      	it	mi
 8007c00:	b2ad      	uxthmi	r5, r5
 8007c02:	6031      	str	r1, [r6, #0]
 8007c04:	07d9      	lsls	r1, r3, #31
 8007c06:	bf44      	itt	mi
 8007c08:	f043 0320 	orrmi.w	r3, r3, #32
 8007c0c:	6023      	strmi	r3, [r4, #0]
 8007c0e:	b11d      	cbz	r5, 8007c18 <_printf_i+0x19c>
 8007c10:	2310      	movs	r3, #16
 8007c12:	e7ad      	b.n	8007b70 <_printf_i+0xf4>
 8007c14:	4826      	ldr	r0, [pc, #152]	@ (8007cb0 <_printf_i+0x234>)
 8007c16:	e7e9      	b.n	8007bec <_printf_i+0x170>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	f023 0320 	bic.w	r3, r3, #32
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	e7f6      	b.n	8007c10 <_printf_i+0x194>
 8007c22:	4616      	mov	r6, r2
 8007c24:	e7bd      	b.n	8007ba2 <_printf_i+0x126>
 8007c26:	6833      	ldr	r3, [r6, #0]
 8007c28:	6825      	ldr	r5, [r4, #0]
 8007c2a:	1d18      	adds	r0, r3, #4
 8007c2c:	6961      	ldr	r1, [r4, #20]
 8007c2e:	6030      	str	r0, [r6, #0]
 8007c30:	062e      	lsls	r6, r5, #24
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	d501      	bpl.n	8007c3a <_printf_i+0x1be>
 8007c36:	6019      	str	r1, [r3, #0]
 8007c38:	e002      	b.n	8007c40 <_printf_i+0x1c4>
 8007c3a:	0668      	lsls	r0, r5, #25
 8007c3c:	d5fb      	bpl.n	8007c36 <_printf_i+0x1ba>
 8007c3e:	8019      	strh	r1, [r3, #0]
 8007c40:	2300      	movs	r3, #0
 8007c42:	4616      	mov	r6, r2
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	e7bc      	b.n	8007bc2 <_printf_i+0x146>
 8007c48:	6833      	ldr	r3, [r6, #0]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	6032      	str	r2, [r6, #0]
 8007c50:	681e      	ldr	r6, [r3, #0]
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 f9d6 	bl	8008006 <memchr>
 8007c5a:	b108      	cbz	r0, 8007c60 <_printf_i+0x1e4>
 8007c5c:	1b80      	subs	r0, r0, r6
 8007c5e:	6060      	str	r0, [r4, #4]
 8007c60:	6863      	ldr	r3, [r4, #4]
 8007c62:	6123      	str	r3, [r4, #16]
 8007c64:	2300      	movs	r3, #0
 8007c66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c6a:	e7aa      	b.n	8007bc2 <_printf_i+0x146>
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	47d0      	blx	sl
 8007c76:	3001      	adds	r0, #1
 8007c78:	d0ad      	beq.n	8007bd6 <_printf_i+0x15a>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	079b      	lsls	r3, r3, #30
 8007c7e:	d413      	bmi.n	8007ca8 <_printf_i+0x22c>
 8007c80:	68e0      	ldr	r0, [r4, #12]
 8007c82:	9b03      	ldr	r3, [sp, #12]
 8007c84:	4298      	cmp	r0, r3
 8007c86:	bfb8      	it	lt
 8007c88:	4618      	movlt	r0, r3
 8007c8a:	e7a6      	b.n	8007bda <_printf_i+0x15e>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	4632      	mov	r2, r6
 8007c90:	4649      	mov	r1, r9
 8007c92:	4640      	mov	r0, r8
 8007c94:	47d0      	blx	sl
 8007c96:	3001      	adds	r0, #1
 8007c98:	d09d      	beq.n	8007bd6 <_printf_i+0x15a>
 8007c9a:	3501      	adds	r5, #1
 8007c9c:	68e3      	ldr	r3, [r4, #12]
 8007c9e:	9903      	ldr	r1, [sp, #12]
 8007ca0:	1a5b      	subs	r3, r3, r1
 8007ca2:	42ab      	cmp	r3, r5
 8007ca4:	dcf2      	bgt.n	8007c8c <_printf_i+0x210>
 8007ca6:	e7eb      	b.n	8007c80 <_printf_i+0x204>
 8007ca8:	2500      	movs	r5, #0
 8007caa:	f104 0619 	add.w	r6, r4, #25
 8007cae:	e7f5      	b.n	8007c9c <_printf_i+0x220>
 8007cb0:	0800a914 	.word	0x0800a914
 8007cb4:	0800a925 	.word	0x0800a925

08007cb8 <std>:
 8007cb8:	2300      	movs	r3, #0
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cc6:	6083      	str	r3, [r0, #8]
 8007cc8:	8181      	strh	r1, [r0, #12]
 8007cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ccc:	81c2      	strh	r2, [r0, #14]
 8007cce:	6183      	str	r3, [r0, #24]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	305c      	adds	r0, #92	@ 0x5c
 8007cd6:	f000 f916 	bl	8007f06 <memset>
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <std+0x58>)
 8007cdc:	6224      	str	r4, [r4, #32]
 8007cde:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <std+0x5c>)
 8007ce2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <std+0x60>)
 8007ce6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d1c <std+0x64>)
 8007cea:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cec:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <std+0x68>)
 8007cee:	429c      	cmp	r4, r3
 8007cf0:	d006      	beq.n	8007d00 <std+0x48>
 8007cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cf6:	4294      	cmp	r4, r2
 8007cf8:	d002      	beq.n	8007d00 <std+0x48>
 8007cfa:	33d0      	adds	r3, #208	@ 0xd0
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	d105      	bne.n	8007d0c <std+0x54>
 8007d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d08:	f000 b97a 	b.w	8008000 <__retarget_lock_init_recursive>
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	bf00      	nop
 8007d10:	08007e81 	.word	0x08007e81
 8007d14:	08007ea3 	.word	0x08007ea3
 8007d18:	08007edb 	.word	0x08007edb
 8007d1c:	08007eff 	.word	0x08007eff
 8007d20:	20000868 	.word	0x20000868

08007d24 <stdio_exit_handler>:
 8007d24:	4a02      	ldr	r2, [pc, #8]	@ (8007d30 <stdio_exit_handler+0xc>)
 8007d26:	4903      	ldr	r1, [pc, #12]	@ (8007d34 <stdio_exit_handler+0x10>)
 8007d28:	4803      	ldr	r0, [pc, #12]	@ (8007d38 <stdio_exit_handler+0x14>)
 8007d2a:	f000 b869 	b.w	8007e00 <_fwalk_sglue>
 8007d2e:	bf00      	nop
 8007d30:	2000004c 	.word	0x2000004c
 8007d34:	08009981 	.word	0x08009981
 8007d38:	2000005c 	.word	0x2000005c

08007d3c <cleanup_stdio>:
 8007d3c:	6841      	ldr	r1, [r0, #4]
 8007d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d70 <cleanup_stdio+0x34>)
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4299      	cmp	r1, r3
 8007d44:	4604      	mov	r4, r0
 8007d46:	d001      	beq.n	8007d4c <cleanup_stdio+0x10>
 8007d48:	f001 fe1a 	bl	8009980 <_fflush_r>
 8007d4c:	68a1      	ldr	r1, [r4, #8]
 8007d4e:	4b09      	ldr	r3, [pc, #36]	@ (8007d74 <cleanup_stdio+0x38>)
 8007d50:	4299      	cmp	r1, r3
 8007d52:	d002      	beq.n	8007d5a <cleanup_stdio+0x1e>
 8007d54:	4620      	mov	r0, r4
 8007d56:	f001 fe13 	bl	8009980 <_fflush_r>
 8007d5a:	68e1      	ldr	r1, [r4, #12]
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <cleanup_stdio+0x3c>)
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	d004      	beq.n	8007d6c <cleanup_stdio+0x30>
 8007d62:	4620      	mov	r0, r4
 8007d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d68:	f001 be0a 	b.w	8009980 <_fflush_r>
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000868 	.word	0x20000868
 8007d74:	200008d0 	.word	0x200008d0
 8007d78:	20000938 	.word	0x20000938

08007d7c <global_stdio_init.part.0>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007dac <global_stdio_init.part.0+0x30>)
 8007d80:	4c0b      	ldr	r4, [pc, #44]	@ (8007db0 <global_stdio_init.part.0+0x34>)
 8007d82:	4a0c      	ldr	r2, [pc, #48]	@ (8007db4 <global_stdio_init.part.0+0x38>)
 8007d84:	4620      	mov	r0, r4
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	2104      	movs	r1, #4
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f7ff ff94 	bl	8007cb8 <std>
 8007d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d94:	2201      	movs	r2, #1
 8007d96:	2109      	movs	r1, #9
 8007d98:	f7ff ff8e 	bl	8007cb8 <std>
 8007d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007da0:	2202      	movs	r2, #2
 8007da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da6:	2112      	movs	r1, #18
 8007da8:	f7ff bf86 	b.w	8007cb8 <std>
 8007dac:	200009a0 	.word	0x200009a0
 8007db0:	20000868 	.word	0x20000868
 8007db4:	08007d25 	.word	0x08007d25

08007db8 <__sfp_lock_acquire>:
 8007db8:	4801      	ldr	r0, [pc, #4]	@ (8007dc0 <__sfp_lock_acquire+0x8>)
 8007dba:	f000 b922 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	200009a9 	.word	0x200009a9

08007dc4 <__sfp_lock_release>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	@ (8007dcc <__sfp_lock_release+0x8>)
 8007dc6:	f000 b91d 	b.w	8008004 <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	200009a9 	.word	0x200009a9

08007dd0 <__sinit>:
 8007dd0:	b510      	push	{r4, lr}
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	f7ff fff0 	bl	8007db8 <__sfp_lock_acquire>
 8007dd8:	6a23      	ldr	r3, [r4, #32]
 8007dda:	b11b      	cbz	r3, 8007de4 <__sinit+0x14>
 8007ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de0:	f7ff bff0 	b.w	8007dc4 <__sfp_lock_release>
 8007de4:	4b04      	ldr	r3, [pc, #16]	@ (8007df8 <__sinit+0x28>)
 8007de6:	6223      	str	r3, [r4, #32]
 8007de8:	4b04      	ldr	r3, [pc, #16]	@ (8007dfc <__sinit+0x2c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1f5      	bne.n	8007ddc <__sinit+0xc>
 8007df0:	f7ff ffc4 	bl	8007d7c <global_stdio_init.part.0>
 8007df4:	e7f2      	b.n	8007ddc <__sinit+0xc>
 8007df6:	bf00      	nop
 8007df8:	08007d3d 	.word	0x08007d3d
 8007dfc:	200009a0 	.word	0x200009a0

08007e00 <_fwalk_sglue>:
 8007e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	4607      	mov	r7, r0
 8007e06:	4688      	mov	r8, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e10:	f1b9 0901 	subs.w	r9, r9, #1
 8007e14:	d505      	bpl.n	8007e22 <_fwalk_sglue+0x22>
 8007e16:	6824      	ldr	r4, [r4, #0]
 8007e18:	2c00      	cmp	r4, #0
 8007e1a:	d1f7      	bne.n	8007e0c <_fwalk_sglue+0xc>
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d907      	bls.n	8007e38 <_fwalk_sglue+0x38>
 8007e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	d003      	beq.n	8007e38 <_fwalk_sglue+0x38>
 8007e30:	4629      	mov	r1, r5
 8007e32:	4638      	mov	r0, r7
 8007e34:	47c0      	blx	r8
 8007e36:	4306      	orrs	r6, r0
 8007e38:	3568      	adds	r5, #104	@ 0x68
 8007e3a:	e7e9      	b.n	8007e10 <_fwalk_sglue+0x10>

08007e3c <siprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e42:	b510      	push	{r4, lr}
 8007e44:	2400      	movs	r4, #0
 8007e46:	b09d      	sub	sp, #116	@ 0x74
 8007e48:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e4a:	9002      	str	r0, [sp, #8]
 8007e4c:	9006      	str	r0, [sp, #24]
 8007e4e:	9107      	str	r1, [sp, #28]
 8007e50:	9104      	str	r1, [sp, #16]
 8007e52:	4809      	ldr	r0, [pc, #36]	@ (8007e78 <siprintf+0x3c>)
 8007e54:	4909      	ldr	r1, [pc, #36]	@ (8007e7c <siprintf+0x40>)
 8007e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e5a:	9105      	str	r1, [sp, #20]
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	a902      	add	r1, sp, #8
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e64:	f001 fc10 	bl	8009688 <_svfiprintf_r>
 8007e68:	9b02      	ldr	r3, [sp, #8]
 8007e6a:	701c      	strb	r4, [r3, #0]
 8007e6c:	b01d      	add	sp, #116	@ 0x74
 8007e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e72:	b003      	add	sp, #12
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000058 	.word	0x20000058
 8007e7c:	ffff0208 	.word	0xffff0208

08007e80 <__sread>:
 8007e80:	b510      	push	{r4, lr}
 8007e82:	460c      	mov	r4, r1
 8007e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e88:	f000 f86c 	bl	8007f64 <_read_r>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	bfab      	itete	ge
 8007e90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e92:	89a3      	ldrhlt	r3, [r4, #12]
 8007e94:	181b      	addge	r3, r3, r0
 8007e96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e9a:	bfac      	ite	ge
 8007e9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e9e:	81a3      	strhlt	r3, [r4, #12]
 8007ea0:	bd10      	pop	{r4, pc}

08007ea2 <__swrite>:
 8007ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	898b      	ldrh	r3, [r1, #12]
 8007eaa:	4605      	mov	r5, r0
 8007eac:	05db      	lsls	r3, r3, #23
 8007eae:	460c      	mov	r4, r1
 8007eb0:	4616      	mov	r6, r2
 8007eb2:	d505      	bpl.n	8007ec0 <__swrite+0x1e>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebc:	f000 f840 	bl	8007f40 <_lseek_r>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	4632      	mov	r2, r6
 8007ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	4628      	mov	r0, r5
 8007ecc:	463b      	mov	r3, r7
 8007ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed6:	f000 b857 	b.w	8007f88 <_write_r>

08007eda <__sseek>:
 8007eda:	b510      	push	{r4, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee2:	f000 f82d 	bl	8007f40 <_lseek_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	bf15      	itete	ne
 8007eec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007eee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ef6:	81a3      	strheq	r3, [r4, #12]
 8007ef8:	bf18      	it	ne
 8007efa:	81a3      	strhne	r3, [r4, #12]
 8007efc:	bd10      	pop	{r4, pc}

08007efe <__sclose>:
 8007efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f02:	f000 b80d 	b.w	8007f20 <_close_r>

08007f06 <memset>:
 8007f06:	4603      	mov	r3, r0
 8007f08:	4402      	add	r2, r0
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d100      	bne.n	8007f10 <memset+0xa>
 8007f0e:	4770      	bx	lr
 8007f10:	f803 1b01 	strb.w	r1, [r3], #1
 8007f14:	e7f9      	b.n	8007f0a <memset+0x4>
	...

08007f18 <_localeconv_r>:
 8007f18:	4800      	ldr	r0, [pc, #0]	@ (8007f1c <_localeconv_r+0x4>)
 8007f1a:	4770      	bx	lr
 8007f1c:	20000198 	.word	0x20000198

08007f20 <_close_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	2300      	movs	r3, #0
 8007f24:	4d05      	ldr	r5, [pc, #20]	@ (8007f3c <_close_r+0x1c>)
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7fa fdf5 	bl	8002b1a <_close>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_close_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_close_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	200009a4 	.word	0x200009a4

08007f40 <_lseek_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4604      	mov	r4, r0
 8007f44:	4608      	mov	r0, r1
 8007f46:	4611      	mov	r1, r2
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4d05      	ldr	r5, [pc, #20]	@ (8007f60 <_lseek_r+0x20>)
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7fa fe07 	bl	8002b62 <_lseek>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_lseek_r+0x1e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_lseek_r+0x1e>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	200009a4 	.word	0x200009a4

08007f64 <_read_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4d05      	ldr	r5, [pc, #20]	@ (8007f84 <_read_r+0x20>)
 8007f70:	602a      	str	r2, [r5, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f7fa fdb4 	bl	8002ae0 <_read>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_read_r+0x1e>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_read_r+0x1e>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	200009a4 	.word	0x200009a4

08007f88 <_write_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	4611      	mov	r1, r2
 8007f90:	2200      	movs	r2, #0
 8007f92:	4d05      	ldr	r5, [pc, #20]	@ (8007fa8 <_write_r+0x20>)
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f8 fffa 	bl	8000f90 <_write>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_write_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_write_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	200009a4 	.word	0x200009a4

08007fac <__errno>:
 8007fac:	4b01      	ldr	r3, [pc, #4]	@ (8007fb4 <__errno+0x8>)
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000058 	.word	0x20000058

08007fb8 <__libc_init_array>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	2600      	movs	r6, #0
 8007fbc:	4d0c      	ldr	r5, [pc, #48]	@ (8007ff0 <__libc_init_array+0x38>)
 8007fbe:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff4 <__libc_init_array+0x3c>)
 8007fc0:	1b64      	subs	r4, r4, r5
 8007fc2:	10a4      	asrs	r4, r4, #2
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	d109      	bne.n	8007fdc <__libc_init_array+0x24>
 8007fc8:	f002 f876 	bl	800a0b8 <_init>
 8007fcc:	2600      	movs	r6, #0
 8007fce:	4d0a      	ldr	r5, [pc, #40]	@ (8007ff8 <__libc_init_array+0x40>)
 8007fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8007ffc <__libc_init_array+0x44>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	d105      	bne.n	8007fe6 <__libc_init_array+0x2e>
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe0:	4798      	blx	r3
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	e7ee      	b.n	8007fc4 <__libc_init_array+0xc>
 8007fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fea:	4798      	blx	r3
 8007fec:	3601      	adds	r6, #1
 8007fee:	e7f2      	b.n	8007fd6 <__libc_init_array+0x1e>
 8007ff0:	0800ac7c 	.word	0x0800ac7c
 8007ff4:	0800ac7c 	.word	0x0800ac7c
 8007ff8:	0800ac7c 	.word	0x0800ac7c
 8007ffc:	0800ac80 	.word	0x0800ac80

08008000 <__retarget_lock_init_recursive>:
 8008000:	4770      	bx	lr

08008002 <__retarget_lock_acquire_recursive>:
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_release_recursive>:
 8008004:	4770      	bx	lr

08008006 <memchr>:
 8008006:	4603      	mov	r3, r0
 8008008:	b510      	push	{r4, lr}
 800800a:	b2c9      	uxtb	r1, r1
 800800c:	4402      	add	r2, r0
 800800e:	4293      	cmp	r3, r2
 8008010:	4618      	mov	r0, r3
 8008012:	d101      	bne.n	8008018 <memchr+0x12>
 8008014:	2000      	movs	r0, #0
 8008016:	e003      	b.n	8008020 <memchr+0x1a>
 8008018:	7804      	ldrb	r4, [r0, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	428c      	cmp	r4, r1
 800801e:	d1f6      	bne.n	800800e <memchr+0x8>
 8008020:	bd10      	pop	{r4, pc}

08008022 <quorem>:
 8008022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	6903      	ldr	r3, [r0, #16]
 8008028:	690c      	ldr	r4, [r1, #16]
 800802a:	4607      	mov	r7, r0
 800802c:	42a3      	cmp	r3, r4
 800802e:	db7e      	blt.n	800812e <quorem+0x10c>
 8008030:	3c01      	subs	r4, #1
 8008032:	00a3      	lsls	r3, r4, #2
 8008034:	f100 0514 	add.w	r5, r0, #20
 8008038:	f101 0814 	add.w	r8, r1, #20
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008042:	9301      	str	r3, [sp, #4]
 8008044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800804c:	3301      	adds	r3, #1
 800804e:	429a      	cmp	r2, r3
 8008050:	fbb2 f6f3 	udiv	r6, r2, r3
 8008054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008058:	d32e      	bcc.n	80080b8 <quorem+0x96>
 800805a:	f04f 0a00 	mov.w	sl, #0
 800805e:	46c4      	mov	ip, r8
 8008060:	46ae      	mov	lr, r5
 8008062:	46d3      	mov	fp, sl
 8008064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008068:	b298      	uxth	r0, r3
 800806a:	fb06 a000 	mla	r0, r6, r0, sl
 800806e:	0c1b      	lsrs	r3, r3, #16
 8008070:	0c02      	lsrs	r2, r0, #16
 8008072:	fb06 2303 	mla	r3, r6, r3, r2
 8008076:	f8de 2000 	ldr.w	r2, [lr]
 800807a:	b280      	uxth	r0, r0
 800807c:	b292      	uxth	r2, r2
 800807e:	1a12      	subs	r2, r2, r0
 8008080:	445a      	add	r2, fp
 8008082:	f8de 0000 	ldr.w	r0, [lr]
 8008086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800808a:	b29b      	uxth	r3, r3
 800808c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008090:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008094:	b292      	uxth	r2, r2
 8008096:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800809a:	45e1      	cmp	r9, ip
 800809c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080a0:	f84e 2b04 	str.w	r2, [lr], #4
 80080a4:	d2de      	bcs.n	8008064 <quorem+0x42>
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	58eb      	ldr	r3, [r5, r3]
 80080aa:	b92b      	cbnz	r3, 80080b8 <quorem+0x96>
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	3b04      	subs	r3, #4
 80080b0:	429d      	cmp	r5, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	d32f      	bcc.n	8008116 <quorem+0xf4>
 80080b6:	613c      	str	r4, [r7, #16]
 80080b8:	4638      	mov	r0, r7
 80080ba:	f001 f981 	bl	80093c0 <__mcmp>
 80080be:	2800      	cmp	r0, #0
 80080c0:	db25      	blt.n	800810e <quorem+0xec>
 80080c2:	4629      	mov	r1, r5
 80080c4:	2000      	movs	r0, #0
 80080c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80080ca:	f8d1 c000 	ldr.w	ip, [r1]
 80080ce:	fa1f fe82 	uxth.w	lr, r2
 80080d2:	fa1f f38c 	uxth.w	r3, ip
 80080d6:	eba3 030e 	sub.w	r3, r3, lr
 80080da:	4403      	add	r3, r0
 80080dc:	0c12      	lsrs	r2, r2, #16
 80080de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ec:	45c1      	cmp	r9, r8
 80080ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080f2:	f841 3b04 	str.w	r3, [r1], #4
 80080f6:	d2e6      	bcs.n	80080c6 <quorem+0xa4>
 80080f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008100:	b922      	cbnz	r2, 800810c <quorem+0xea>
 8008102:	3b04      	subs	r3, #4
 8008104:	429d      	cmp	r5, r3
 8008106:	461a      	mov	r2, r3
 8008108:	d30b      	bcc.n	8008122 <quorem+0x100>
 800810a:	613c      	str	r4, [r7, #16]
 800810c:	3601      	adds	r6, #1
 800810e:	4630      	mov	r0, r6
 8008110:	b003      	add	sp, #12
 8008112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	3b04      	subs	r3, #4
 800811a:	2a00      	cmp	r2, #0
 800811c:	d1cb      	bne.n	80080b6 <quorem+0x94>
 800811e:	3c01      	subs	r4, #1
 8008120:	e7c6      	b.n	80080b0 <quorem+0x8e>
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	3b04      	subs	r3, #4
 8008126:	2a00      	cmp	r2, #0
 8008128:	d1ef      	bne.n	800810a <quorem+0xe8>
 800812a:	3c01      	subs	r4, #1
 800812c:	e7ea      	b.n	8008104 <quorem+0xe2>
 800812e:	2000      	movs	r0, #0
 8008130:	e7ee      	b.n	8008110 <quorem+0xee>
 8008132:	0000      	movs	r0, r0
 8008134:	0000      	movs	r0, r0
	...

08008138 <_dtoa_r>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	4614      	mov	r4, r2
 800813e:	461d      	mov	r5, r3
 8008140:	69c7      	ldr	r7, [r0, #28]
 8008142:	b097      	sub	sp, #92	@ 0x5c
 8008144:	4681      	mov	r9, r0
 8008146:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800814a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800814c:	b97f      	cbnz	r7, 800816e <_dtoa_r+0x36>
 800814e:	2010      	movs	r0, #16
 8008150:	f000 fe0e 	bl	8008d70 <malloc>
 8008154:	4602      	mov	r2, r0
 8008156:	f8c9 001c 	str.w	r0, [r9, #28]
 800815a:	b920      	cbnz	r0, 8008166 <_dtoa_r+0x2e>
 800815c:	21ef      	movs	r1, #239	@ 0xef
 800815e:	4bac      	ldr	r3, [pc, #688]	@ (8008410 <_dtoa_r+0x2d8>)
 8008160:	48ac      	ldr	r0, [pc, #688]	@ (8008414 <_dtoa_r+0x2dc>)
 8008162:	f001 fc6d 	bl	8009a40 <__assert_func>
 8008166:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800816a:	6007      	str	r7, [r0, #0]
 800816c:	60c7      	str	r7, [r0, #12]
 800816e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008172:	6819      	ldr	r1, [r3, #0]
 8008174:	b159      	cbz	r1, 800818e <_dtoa_r+0x56>
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	2301      	movs	r3, #1
 800817a:	4093      	lsls	r3, r2
 800817c:	604a      	str	r2, [r1, #4]
 800817e:	608b      	str	r3, [r1, #8]
 8008180:	4648      	mov	r0, r9
 8008182:	f000 feeb 	bl	8008f5c <_Bfree>
 8008186:	2200      	movs	r2, #0
 8008188:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	1e2b      	subs	r3, r5, #0
 8008190:	bfaf      	iteee	ge
 8008192:	2300      	movge	r3, #0
 8008194:	2201      	movlt	r2, #1
 8008196:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800819a:	9307      	strlt	r3, [sp, #28]
 800819c:	bfa8      	it	ge
 800819e:	6033      	strge	r3, [r6, #0]
 80081a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80081a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008418 <_dtoa_r+0x2e0>)
 80081a6:	bfb8      	it	lt
 80081a8:	6032      	strlt	r2, [r6, #0]
 80081aa:	ea33 0308 	bics.w	r3, r3, r8
 80081ae:	d112      	bne.n	80081d6 <_dtoa_r+0x9e>
 80081b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081bc:	4323      	orrs	r3, r4
 80081be:	f000 855e 	beq.w	8008c7e <_dtoa_r+0xb46>
 80081c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800841c <_dtoa_r+0x2e4>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8560 	beq.w	8008c8e <_dtoa_r+0xb56>
 80081ce:	f10a 0303 	add.w	r3, sl, #3
 80081d2:	f000 bd5a 	b.w	8008c8a <_dtoa_r+0xb52>
 80081d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80081de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	f7f8 fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80081ea:	4607      	mov	r7, r0
 80081ec:	b158      	cbz	r0, 8008206 <_dtoa_r+0xce>
 80081ee:	2301      	movs	r3, #1
 80081f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081f6:	b113      	cbz	r3, 80081fe <_dtoa_r+0xc6>
 80081f8:	4b89      	ldr	r3, [pc, #548]	@ (8008420 <_dtoa_r+0x2e8>)
 80081fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008424 <_dtoa_r+0x2ec>
 8008202:	f000 bd44 	b.w	8008c8e <_dtoa_r+0xb56>
 8008206:	ab14      	add	r3, sp, #80	@ 0x50
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	ab15      	add	r3, sp, #84	@ 0x54
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	4648      	mov	r0, r9
 8008210:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008214:	f001 f984 	bl	8009520 <__d2b>
 8008218:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800821c:	9003      	str	r0, [sp, #12]
 800821e:	2e00      	cmp	r6, #0
 8008220:	d078      	beq.n	8008314 <_dtoa_r+0x1dc>
 8008222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008228:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800822c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008230:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008234:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008238:	9712      	str	r7, [sp, #72]	@ 0x48
 800823a:	4619      	mov	r1, r3
 800823c:	2200      	movs	r2, #0
 800823e:	4b7a      	ldr	r3, [pc, #488]	@ (8008428 <_dtoa_r+0x2f0>)
 8008240:	f7f7 ff92 	bl	8000168 <__aeabi_dsub>
 8008244:	a36c      	add	r3, pc, #432	@ (adr r3, 80083f8 <_dtoa_r+0x2c0>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f8 f945 	bl	80004d8 <__aeabi_dmul>
 800824e:	a36c      	add	r3, pc, #432	@ (adr r3, 8008400 <_dtoa_r+0x2c8>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f7 ff8a 	bl	800016c <__adddf3>
 8008258:	4604      	mov	r4, r0
 800825a:	4630      	mov	r0, r6
 800825c:	460d      	mov	r5, r1
 800825e:	f7f8 f8d1 	bl	8000404 <__aeabi_i2d>
 8008262:	a369      	add	r3, pc, #420	@ (adr r3, 8008408 <_dtoa_r+0x2d0>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f7f8 f936 	bl	80004d8 <__aeabi_dmul>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4620      	mov	r0, r4
 8008272:	4629      	mov	r1, r5
 8008274:	f7f7 ff7a 	bl	800016c <__adddf3>
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	f7f8 fbdc 	bl	8000a38 <__aeabi_d2iz>
 8008280:	2200      	movs	r2, #0
 8008282:	4607      	mov	r7, r0
 8008284:	2300      	movs	r3, #0
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 fb97 	bl	80009bc <__aeabi_dcmplt>
 800828e:	b140      	cbz	r0, 80082a2 <_dtoa_r+0x16a>
 8008290:	4638      	mov	r0, r7
 8008292:	f7f8 f8b7 	bl	8000404 <__aeabi_i2d>
 8008296:	4622      	mov	r2, r4
 8008298:	462b      	mov	r3, r5
 800829a:	f7f8 fb85 	bl	80009a8 <__aeabi_dcmpeq>
 800829e:	b900      	cbnz	r0, 80082a2 <_dtoa_r+0x16a>
 80082a0:	3f01      	subs	r7, #1
 80082a2:	2f16      	cmp	r7, #22
 80082a4:	d854      	bhi.n	8008350 <_dtoa_r+0x218>
 80082a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082aa:	4b60      	ldr	r3, [pc, #384]	@ (800842c <_dtoa_r+0x2f4>)
 80082ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f8 fb82 	bl	80009bc <__aeabi_dcmplt>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d04b      	beq.n	8008354 <_dtoa_r+0x21c>
 80082bc:	2300      	movs	r3, #0
 80082be:	3f01      	subs	r7, #1
 80082c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082c4:	1b9b      	subs	r3, r3, r6
 80082c6:	1e5a      	subs	r2, r3, #1
 80082c8:	bf49      	itett	mi
 80082ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80082ce:	2300      	movpl	r3, #0
 80082d0:	9304      	strmi	r3, [sp, #16]
 80082d2:	2300      	movmi	r3, #0
 80082d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80082d6:	bf54      	ite	pl
 80082d8:	9304      	strpl	r3, [sp, #16]
 80082da:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80082dc:	2f00      	cmp	r7, #0
 80082de:	db3b      	blt.n	8008358 <_dtoa_r+0x220>
 80082e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e2:	970e      	str	r7, [sp, #56]	@ 0x38
 80082e4:	443b      	add	r3, r7
 80082e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e8:	2300      	movs	r3, #0
 80082ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d865      	bhi.n	80083be <_dtoa_r+0x286>
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	bfc4      	itt	gt
 80082f6:	3b04      	subgt	r3, #4
 80082f8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80082fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082fc:	bfc8      	it	gt
 80082fe:	2400      	movgt	r4, #0
 8008300:	f1a3 0302 	sub.w	r3, r3, #2
 8008304:	bfd8      	it	le
 8008306:	2401      	movle	r4, #1
 8008308:	2b03      	cmp	r3, #3
 800830a:	d864      	bhi.n	80083d6 <_dtoa_r+0x29e>
 800830c:	e8df f003 	tbb	[pc, r3]
 8008310:	2c385553 	.word	0x2c385553
 8008314:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008318:	441e      	add	r6, r3
 800831a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800831e:	2b20      	cmp	r3, #32
 8008320:	bfc1      	itttt	gt
 8008322:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008326:	fa08 f803 	lslgt.w	r8, r8, r3
 800832a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800832e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008332:	bfd6      	itet	le
 8008334:	f1c3 0320 	rsble	r3, r3, #32
 8008338:	ea48 0003 	orrgt.w	r0, r8, r3
 800833c:	fa04 f003 	lslle.w	r0, r4, r3
 8008340:	f7f8 f850 	bl	80003e4 <__aeabi_ui2d>
 8008344:	2201      	movs	r2, #1
 8008346:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800834a:	3e01      	subs	r6, #1
 800834c:	9212      	str	r2, [sp, #72]	@ 0x48
 800834e:	e774      	b.n	800823a <_dtoa_r+0x102>
 8008350:	2301      	movs	r3, #1
 8008352:	e7b5      	b.n	80082c0 <_dtoa_r+0x188>
 8008354:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008356:	e7b4      	b.n	80082c2 <_dtoa_r+0x18a>
 8008358:	9b04      	ldr	r3, [sp, #16]
 800835a:	1bdb      	subs	r3, r3, r7
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	427b      	negs	r3, r7
 8008360:	930a      	str	r3, [sp, #40]	@ 0x28
 8008362:	2300      	movs	r3, #0
 8008364:	930e      	str	r3, [sp, #56]	@ 0x38
 8008366:	e7c1      	b.n	80082ec <_dtoa_r+0x1b4>
 8008368:	2301      	movs	r3, #1
 800836a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800836c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800836e:	eb07 0b03 	add.w	fp, r7, r3
 8008372:	f10b 0301 	add.w	r3, fp, #1
 8008376:	2b01      	cmp	r3, #1
 8008378:	9308      	str	r3, [sp, #32]
 800837a:	bfb8      	it	lt
 800837c:	2301      	movlt	r3, #1
 800837e:	e006      	b.n	800838e <_dtoa_r+0x256>
 8008380:	2301      	movs	r3, #1
 8008382:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008384:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008386:	2b00      	cmp	r3, #0
 8008388:	dd28      	ble.n	80083dc <_dtoa_r+0x2a4>
 800838a:	469b      	mov	fp, r3
 800838c:	9308      	str	r3, [sp, #32]
 800838e:	2100      	movs	r1, #0
 8008390:	2204      	movs	r2, #4
 8008392:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008396:	f102 0514 	add.w	r5, r2, #20
 800839a:	429d      	cmp	r5, r3
 800839c:	d926      	bls.n	80083ec <_dtoa_r+0x2b4>
 800839e:	6041      	str	r1, [r0, #4]
 80083a0:	4648      	mov	r0, r9
 80083a2:	f000 fd9b 	bl	8008edc <_Balloc>
 80083a6:	4682      	mov	sl, r0
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d143      	bne.n	8008434 <_dtoa_r+0x2fc>
 80083ac:	4602      	mov	r2, r0
 80083ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80083b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008430 <_dtoa_r+0x2f8>)
 80083b4:	e6d4      	b.n	8008160 <_dtoa_r+0x28>
 80083b6:	2300      	movs	r3, #0
 80083b8:	e7e3      	b.n	8008382 <_dtoa_r+0x24a>
 80083ba:	2300      	movs	r3, #0
 80083bc:	e7d5      	b.n	800836a <_dtoa_r+0x232>
 80083be:	2401      	movs	r4, #1
 80083c0:	2300      	movs	r3, #0
 80083c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80083c6:	f04f 3bff 	mov.w	fp, #4294967295
 80083ca:	2200      	movs	r2, #0
 80083cc:	2312      	movs	r3, #18
 80083ce:	f8cd b020 	str.w	fp, [sp, #32]
 80083d2:	9221      	str	r2, [sp, #132]	@ 0x84
 80083d4:	e7db      	b.n	800838e <_dtoa_r+0x256>
 80083d6:	2301      	movs	r3, #1
 80083d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083da:	e7f4      	b.n	80083c6 <_dtoa_r+0x28e>
 80083dc:	f04f 0b01 	mov.w	fp, #1
 80083e0:	465b      	mov	r3, fp
 80083e2:	f8cd b020 	str.w	fp, [sp, #32]
 80083e6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80083ea:	e7d0      	b.n	800838e <_dtoa_r+0x256>
 80083ec:	3101      	adds	r1, #1
 80083ee:	0052      	lsls	r2, r2, #1
 80083f0:	e7d1      	b.n	8008396 <_dtoa_r+0x25e>
 80083f2:	bf00      	nop
 80083f4:	f3af 8000 	nop.w
 80083f8:	636f4361 	.word	0x636f4361
 80083fc:	3fd287a7 	.word	0x3fd287a7
 8008400:	8b60c8b3 	.word	0x8b60c8b3
 8008404:	3fc68a28 	.word	0x3fc68a28
 8008408:	509f79fb 	.word	0x509f79fb
 800840c:	3fd34413 	.word	0x3fd34413
 8008410:	0800a943 	.word	0x0800a943
 8008414:	0800a95a 	.word	0x0800a95a
 8008418:	7ff00000 	.word	0x7ff00000
 800841c:	0800a93f 	.word	0x0800a93f
 8008420:	0800a913 	.word	0x0800a913
 8008424:	0800a912 	.word	0x0800a912
 8008428:	3ff80000 	.word	0x3ff80000
 800842c:	0800aaa8 	.word	0x0800aaa8
 8008430:	0800a9b2 	.word	0x0800a9b2
 8008434:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008438:	6018      	str	r0, [r3, #0]
 800843a:	9b08      	ldr	r3, [sp, #32]
 800843c:	2b0e      	cmp	r3, #14
 800843e:	f200 80a1 	bhi.w	8008584 <_dtoa_r+0x44c>
 8008442:	2c00      	cmp	r4, #0
 8008444:	f000 809e 	beq.w	8008584 <_dtoa_r+0x44c>
 8008448:	2f00      	cmp	r7, #0
 800844a:	dd33      	ble.n	80084b4 <_dtoa_r+0x37c>
 800844c:	4b9c      	ldr	r3, [pc, #624]	@ (80086c0 <_dtoa_r+0x588>)
 800844e:	f007 020f 	and.w	r2, r7, #15
 8008452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008456:	05f8      	lsls	r0, r7, #23
 8008458:	e9d3 3400 	ldrd	r3, r4, [r3]
 800845c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008460:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008464:	d516      	bpl.n	8008494 <_dtoa_r+0x35c>
 8008466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800846a:	4b96      	ldr	r3, [pc, #600]	@ (80086c4 <_dtoa_r+0x58c>)
 800846c:	2603      	movs	r6, #3
 800846e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008472:	f7f8 f95b 	bl	800072c <__aeabi_ddiv>
 8008476:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800847a:	f004 040f 	and.w	r4, r4, #15
 800847e:	4d91      	ldr	r5, [pc, #580]	@ (80086c4 <_dtoa_r+0x58c>)
 8008480:	b954      	cbnz	r4, 8008498 <_dtoa_r+0x360>
 8008482:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800848a:	f7f8 f94f 	bl	800072c <__aeabi_ddiv>
 800848e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008492:	e028      	b.n	80084e6 <_dtoa_r+0x3ae>
 8008494:	2602      	movs	r6, #2
 8008496:	e7f2      	b.n	800847e <_dtoa_r+0x346>
 8008498:	07e1      	lsls	r1, r4, #31
 800849a:	d508      	bpl.n	80084ae <_dtoa_r+0x376>
 800849c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084a4:	f7f8 f818 	bl	80004d8 <__aeabi_dmul>
 80084a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084ac:	3601      	adds	r6, #1
 80084ae:	1064      	asrs	r4, r4, #1
 80084b0:	3508      	adds	r5, #8
 80084b2:	e7e5      	b.n	8008480 <_dtoa_r+0x348>
 80084b4:	f000 80af 	beq.w	8008616 <_dtoa_r+0x4de>
 80084b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084bc:	427c      	negs	r4, r7
 80084be:	4b80      	ldr	r3, [pc, #512]	@ (80086c0 <_dtoa_r+0x588>)
 80084c0:	f004 020f 	and.w	r2, r4, #15
 80084c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f7f8 f804 	bl	80004d8 <__aeabi_dmul>
 80084d0:	2602      	movs	r6, #2
 80084d2:	2300      	movs	r3, #0
 80084d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084d8:	4d7a      	ldr	r5, [pc, #488]	@ (80086c4 <_dtoa_r+0x58c>)
 80084da:	1124      	asrs	r4, r4, #4
 80084dc:	2c00      	cmp	r4, #0
 80084de:	f040 808f 	bne.w	8008600 <_dtoa_r+0x4c8>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1d3      	bne.n	800848e <_dtoa_r+0x356>
 80084e6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80084ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8094 	beq.w	800861a <_dtoa_r+0x4e2>
 80084f2:	2200      	movs	r2, #0
 80084f4:	4620      	mov	r0, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	4b73      	ldr	r3, [pc, #460]	@ (80086c8 <_dtoa_r+0x590>)
 80084fa:	f7f8 fa5f 	bl	80009bc <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	f000 808b 	beq.w	800861a <_dtoa_r+0x4e2>
 8008504:	9b08      	ldr	r3, [sp, #32]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 8087 	beq.w	800861a <_dtoa_r+0x4e2>
 800850c:	f1bb 0f00 	cmp.w	fp, #0
 8008510:	dd34      	ble.n	800857c <_dtoa_r+0x444>
 8008512:	4620      	mov	r0, r4
 8008514:	2200      	movs	r2, #0
 8008516:	4629      	mov	r1, r5
 8008518:	4b6c      	ldr	r3, [pc, #432]	@ (80086cc <_dtoa_r+0x594>)
 800851a:	f7f7 ffdd 	bl	80004d8 <__aeabi_dmul>
 800851e:	465c      	mov	r4, fp
 8008520:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008524:	f107 38ff 	add.w	r8, r7, #4294967295
 8008528:	3601      	adds	r6, #1
 800852a:	4630      	mov	r0, r6
 800852c:	f7f7 ff6a 	bl	8000404 <__aeabi_i2d>
 8008530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008534:	f7f7 ffd0 	bl	80004d8 <__aeabi_dmul>
 8008538:	2200      	movs	r2, #0
 800853a:	4b65      	ldr	r3, [pc, #404]	@ (80086d0 <_dtoa_r+0x598>)
 800853c:	f7f7 fe16 	bl	800016c <__adddf3>
 8008540:	4605      	mov	r5, r0
 8008542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008546:	2c00      	cmp	r4, #0
 8008548:	d16a      	bne.n	8008620 <_dtoa_r+0x4e8>
 800854a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800854e:	2200      	movs	r2, #0
 8008550:	4b60      	ldr	r3, [pc, #384]	@ (80086d4 <_dtoa_r+0x59c>)
 8008552:	f7f7 fe09 	bl	8000168 <__aeabi_dsub>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800855e:	462a      	mov	r2, r5
 8008560:	4633      	mov	r3, r6
 8008562:	f7f8 fa49 	bl	80009f8 <__aeabi_dcmpgt>
 8008566:	2800      	cmp	r0, #0
 8008568:	f040 8298 	bne.w	8008a9c <_dtoa_r+0x964>
 800856c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008570:	462a      	mov	r2, r5
 8008572:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008576:	f7f8 fa21 	bl	80009bc <__aeabi_dcmplt>
 800857a:	bb38      	cbnz	r0, 80085cc <_dtoa_r+0x494>
 800857c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008580:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008584:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008586:	2b00      	cmp	r3, #0
 8008588:	f2c0 8157 	blt.w	800883a <_dtoa_r+0x702>
 800858c:	2f0e      	cmp	r7, #14
 800858e:	f300 8154 	bgt.w	800883a <_dtoa_r+0x702>
 8008592:	4b4b      	ldr	r3, [pc, #300]	@ (80086c0 <_dtoa_r+0x588>)
 8008594:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800859c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f280 80e5 	bge.w	8008772 <_dtoa_r+0x63a>
 80085a8:	9b08      	ldr	r3, [sp, #32]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f300 80e1 	bgt.w	8008772 <_dtoa_r+0x63a>
 80085b0:	d10c      	bne.n	80085cc <_dtoa_r+0x494>
 80085b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085b6:	2200      	movs	r2, #0
 80085b8:	4b46      	ldr	r3, [pc, #280]	@ (80086d4 <_dtoa_r+0x59c>)
 80085ba:	f7f7 ff8d 	bl	80004d8 <__aeabi_dmul>
 80085be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085c2:	f7f8 fa0f 	bl	80009e4 <__aeabi_dcmpge>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f000 8266 	beq.w	8008a98 <_dtoa_r+0x960>
 80085cc:	2400      	movs	r4, #0
 80085ce:	4625      	mov	r5, r4
 80085d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085d2:	4656      	mov	r6, sl
 80085d4:	ea6f 0803 	mvn.w	r8, r3
 80085d8:	2700      	movs	r7, #0
 80085da:	4621      	mov	r1, r4
 80085dc:	4648      	mov	r0, r9
 80085de:	f000 fcbd 	bl	8008f5c <_Bfree>
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	f000 80bd 	beq.w	8008762 <_dtoa_r+0x62a>
 80085e8:	b12f      	cbz	r7, 80085f6 <_dtoa_r+0x4be>
 80085ea:	42af      	cmp	r7, r5
 80085ec:	d003      	beq.n	80085f6 <_dtoa_r+0x4be>
 80085ee:	4639      	mov	r1, r7
 80085f0:	4648      	mov	r0, r9
 80085f2:	f000 fcb3 	bl	8008f5c <_Bfree>
 80085f6:	4629      	mov	r1, r5
 80085f8:	4648      	mov	r0, r9
 80085fa:	f000 fcaf 	bl	8008f5c <_Bfree>
 80085fe:	e0b0      	b.n	8008762 <_dtoa_r+0x62a>
 8008600:	07e2      	lsls	r2, r4, #31
 8008602:	d505      	bpl.n	8008610 <_dtoa_r+0x4d8>
 8008604:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008608:	f7f7 ff66 	bl	80004d8 <__aeabi_dmul>
 800860c:	2301      	movs	r3, #1
 800860e:	3601      	adds	r6, #1
 8008610:	1064      	asrs	r4, r4, #1
 8008612:	3508      	adds	r5, #8
 8008614:	e762      	b.n	80084dc <_dtoa_r+0x3a4>
 8008616:	2602      	movs	r6, #2
 8008618:	e765      	b.n	80084e6 <_dtoa_r+0x3ae>
 800861a:	46b8      	mov	r8, r7
 800861c:	9c08      	ldr	r4, [sp, #32]
 800861e:	e784      	b.n	800852a <_dtoa_r+0x3f2>
 8008620:	4b27      	ldr	r3, [pc, #156]	@ (80086c0 <_dtoa_r+0x588>)
 8008622:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008628:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800862c:	4454      	add	r4, sl
 800862e:	2900      	cmp	r1, #0
 8008630:	d054      	beq.n	80086dc <_dtoa_r+0x5a4>
 8008632:	2000      	movs	r0, #0
 8008634:	4928      	ldr	r1, [pc, #160]	@ (80086d8 <_dtoa_r+0x5a0>)
 8008636:	f7f8 f879 	bl	800072c <__aeabi_ddiv>
 800863a:	4633      	mov	r3, r6
 800863c:	462a      	mov	r2, r5
 800863e:	f7f7 fd93 	bl	8000168 <__aeabi_dsub>
 8008642:	4656      	mov	r6, sl
 8008644:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800864c:	f7f8 f9f4 	bl	8000a38 <__aeabi_d2iz>
 8008650:	4605      	mov	r5, r0
 8008652:	f7f7 fed7 	bl	8000404 <__aeabi_i2d>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800865e:	f7f7 fd83 	bl	8000168 <__aeabi_dsub>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	3530      	adds	r5, #48	@ 0x30
 8008668:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800866c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008670:	f806 5b01 	strb.w	r5, [r6], #1
 8008674:	f7f8 f9a2 	bl	80009bc <__aeabi_dcmplt>
 8008678:	2800      	cmp	r0, #0
 800867a:	d172      	bne.n	8008762 <_dtoa_r+0x62a>
 800867c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008680:	2000      	movs	r0, #0
 8008682:	4911      	ldr	r1, [pc, #68]	@ (80086c8 <_dtoa_r+0x590>)
 8008684:	f7f7 fd70 	bl	8000168 <__aeabi_dsub>
 8008688:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800868c:	f7f8 f996 	bl	80009bc <__aeabi_dcmplt>
 8008690:	2800      	cmp	r0, #0
 8008692:	f040 80b4 	bne.w	80087fe <_dtoa_r+0x6c6>
 8008696:	42a6      	cmp	r6, r4
 8008698:	f43f af70 	beq.w	800857c <_dtoa_r+0x444>
 800869c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086a0:	2200      	movs	r2, #0
 80086a2:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <_dtoa_r+0x594>)
 80086a4:	f7f7 ff18 	bl	80004d8 <__aeabi_dmul>
 80086a8:	2200      	movs	r2, #0
 80086aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086b2:	4b06      	ldr	r3, [pc, #24]	@ (80086cc <_dtoa_r+0x594>)
 80086b4:	f7f7 ff10 	bl	80004d8 <__aeabi_dmul>
 80086b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086bc:	e7c4      	b.n	8008648 <_dtoa_r+0x510>
 80086be:	bf00      	nop
 80086c0:	0800aaa8 	.word	0x0800aaa8
 80086c4:	0800aa80 	.word	0x0800aa80
 80086c8:	3ff00000 	.word	0x3ff00000
 80086cc:	40240000 	.word	0x40240000
 80086d0:	401c0000 	.word	0x401c0000
 80086d4:	40140000 	.word	0x40140000
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	4631      	mov	r1, r6
 80086de:	4628      	mov	r0, r5
 80086e0:	f7f7 fefa 	bl	80004d8 <__aeabi_dmul>
 80086e4:	4656      	mov	r6, sl
 80086e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80086ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086f0:	f7f8 f9a2 	bl	8000a38 <__aeabi_d2iz>
 80086f4:	4605      	mov	r5, r0
 80086f6:	f7f7 fe85 	bl	8000404 <__aeabi_i2d>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008702:	f7f7 fd31 	bl	8000168 <__aeabi_dsub>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	3530      	adds	r5, #48	@ 0x30
 800870c:	f806 5b01 	strb.w	r5, [r6], #1
 8008710:	42a6      	cmp	r6, r4
 8008712:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	d124      	bne.n	8008766 <_dtoa_r+0x62e>
 800871c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008720:	4bae      	ldr	r3, [pc, #696]	@ (80089dc <_dtoa_r+0x8a4>)
 8008722:	f7f7 fd23 	bl	800016c <__adddf3>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800872e:	f7f8 f963 	bl	80009f8 <__aeabi_dcmpgt>
 8008732:	2800      	cmp	r0, #0
 8008734:	d163      	bne.n	80087fe <_dtoa_r+0x6c6>
 8008736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800873a:	2000      	movs	r0, #0
 800873c:	49a7      	ldr	r1, [pc, #668]	@ (80089dc <_dtoa_r+0x8a4>)
 800873e:	f7f7 fd13 	bl	8000168 <__aeabi_dsub>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800874a:	f7f8 f937 	bl	80009bc <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f af14 	beq.w	800857c <_dtoa_r+0x444>
 8008754:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008756:	1e73      	subs	r3, r6, #1
 8008758:	9313      	str	r3, [sp, #76]	@ 0x4c
 800875a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800875e:	2b30      	cmp	r3, #48	@ 0x30
 8008760:	d0f8      	beq.n	8008754 <_dtoa_r+0x61c>
 8008762:	4647      	mov	r7, r8
 8008764:	e03b      	b.n	80087de <_dtoa_r+0x6a6>
 8008766:	4b9e      	ldr	r3, [pc, #632]	@ (80089e0 <_dtoa_r+0x8a8>)
 8008768:	f7f7 feb6 	bl	80004d8 <__aeabi_dmul>
 800876c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008770:	e7bc      	b.n	80086ec <_dtoa_r+0x5b4>
 8008772:	4656      	mov	r6, sl
 8008774:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	f7f7 ffd4 	bl	800072c <__aeabi_ddiv>
 8008784:	f7f8 f958 	bl	8000a38 <__aeabi_d2iz>
 8008788:	4680      	mov	r8, r0
 800878a:	f7f7 fe3b 	bl	8000404 <__aeabi_i2d>
 800878e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008792:	f7f7 fea1 	bl	80004d8 <__aeabi_dmul>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4620      	mov	r0, r4
 800879c:	4629      	mov	r1, r5
 800879e:	f7f7 fce3 	bl	8000168 <__aeabi_dsub>
 80087a2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087a6:	9d08      	ldr	r5, [sp, #32]
 80087a8:	f806 4b01 	strb.w	r4, [r6], #1
 80087ac:	eba6 040a 	sub.w	r4, r6, sl
 80087b0:	42a5      	cmp	r5, r4
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	d133      	bne.n	8008820 <_dtoa_r+0x6e8>
 80087b8:	f7f7 fcd8 	bl	800016c <__adddf3>
 80087bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c0:	4604      	mov	r4, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	f7f8 f918 	bl	80009f8 <__aeabi_dcmpgt>
 80087c8:	b9c0      	cbnz	r0, 80087fc <_dtoa_r+0x6c4>
 80087ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ce:	4620      	mov	r0, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7f8 f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80087d6:	b110      	cbz	r0, 80087de <_dtoa_r+0x6a6>
 80087d8:	f018 0f01 	tst.w	r8, #1
 80087dc:	d10e      	bne.n	80087fc <_dtoa_r+0x6c4>
 80087de:	4648      	mov	r0, r9
 80087e0:	9903      	ldr	r1, [sp, #12]
 80087e2:	f000 fbbb 	bl	8008f5c <_Bfree>
 80087e6:	2300      	movs	r3, #0
 80087e8:	7033      	strb	r3, [r6, #0]
 80087ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80087ec:	3701      	adds	r7, #1
 80087ee:	601f      	str	r7, [r3, #0]
 80087f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 824b 	beq.w	8008c8e <_dtoa_r+0xb56>
 80087f8:	601e      	str	r6, [r3, #0]
 80087fa:	e248      	b.n	8008c8e <_dtoa_r+0xb56>
 80087fc:	46b8      	mov	r8, r7
 80087fe:	4633      	mov	r3, r6
 8008800:	461e      	mov	r6, r3
 8008802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008806:	2a39      	cmp	r2, #57	@ 0x39
 8008808:	d106      	bne.n	8008818 <_dtoa_r+0x6e0>
 800880a:	459a      	cmp	sl, r3
 800880c:	d1f8      	bne.n	8008800 <_dtoa_r+0x6c8>
 800880e:	2230      	movs	r2, #48	@ 0x30
 8008810:	f108 0801 	add.w	r8, r8, #1
 8008814:	f88a 2000 	strb.w	r2, [sl]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	3201      	adds	r2, #1
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e7a0      	b.n	8008762 <_dtoa_r+0x62a>
 8008820:	2200      	movs	r2, #0
 8008822:	4b6f      	ldr	r3, [pc, #444]	@ (80089e0 <_dtoa_r+0x8a8>)
 8008824:	f7f7 fe58 	bl	80004d8 <__aeabi_dmul>
 8008828:	2200      	movs	r2, #0
 800882a:	2300      	movs	r3, #0
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	f7f8 f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8008834:	2800      	cmp	r0, #0
 8008836:	d09f      	beq.n	8008778 <_dtoa_r+0x640>
 8008838:	e7d1      	b.n	80087de <_dtoa_r+0x6a6>
 800883a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800883c:	2a00      	cmp	r2, #0
 800883e:	f000 80ea 	beq.w	8008a16 <_dtoa_r+0x8de>
 8008842:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008844:	2a01      	cmp	r2, #1
 8008846:	f300 80cd 	bgt.w	80089e4 <_dtoa_r+0x8ac>
 800884a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800884c:	2a00      	cmp	r2, #0
 800884e:	f000 80c1 	beq.w	80089d4 <_dtoa_r+0x89c>
 8008852:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008856:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008858:	9e04      	ldr	r6, [sp, #16]
 800885a:	9a04      	ldr	r2, [sp, #16]
 800885c:	2101      	movs	r1, #1
 800885e:	441a      	add	r2, r3
 8008860:	9204      	str	r2, [sp, #16]
 8008862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008864:	4648      	mov	r0, r9
 8008866:	441a      	add	r2, r3
 8008868:	9209      	str	r2, [sp, #36]	@ 0x24
 800886a:	f000 fc2b 	bl	80090c4 <__i2b>
 800886e:	4605      	mov	r5, r0
 8008870:	b166      	cbz	r6, 800888c <_dtoa_r+0x754>
 8008872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008874:	2b00      	cmp	r3, #0
 8008876:	dd09      	ble.n	800888c <_dtoa_r+0x754>
 8008878:	42b3      	cmp	r3, r6
 800887a:	bfa8      	it	ge
 800887c:	4633      	movge	r3, r6
 800887e:	9a04      	ldr	r2, [sp, #16]
 8008880:	1af6      	subs	r6, r6, r3
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	9204      	str	r2, [sp, #16]
 8008886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	9309      	str	r3, [sp, #36]	@ 0x24
 800888c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800888e:	b30b      	cbz	r3, 80088d4 <_dtoa_r+0x79c>
 8008890:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 80c6 	beq.w	8008a24 <_dtoa_r+0x8ec>
 8008898:	2c00      	cmp	r4, #0
 800889a:	f000 80c0 	beq.w	8008a1e <_dtoa_r+0x8e6>
 800889e:	4629      	mov	r1, r5
 80088a0:	4622      	mov	r2, r4
 80088a2:	4648      	mov	r0, r9
 80088a4:	f000 fcc6 	bl	8009234 <__pow5mult>
 80088a8:	9a03      	ldr	r2, [sp, #12]
 80088aa:	4601      	mov	r1, r0
 80088ac:	4605      	mov	r5, r0
 80088ae:	4648      	mov	r0, r9
 80088b0:	f000 fc1e 	bl	80090f0 <__multiply>
 80088b4:	9903      	ldr	r1, [sp, #12]
 80088b6:	4680      	mov	r8, r0
 80088b8:	4648      	mov	r0, r9
 80088ba:	f000 fb4f 	bl	8008f5c <_Bfree>
 80088be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c0:	1b1b      	subs	r3, r3, r4
 80088c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088c4:	f000 80b1 	beq.w	8008a2a <_dtoa_r+0x8f2>
 80088c8:	4641      	mov	r1, r8
 80088ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088cc:	4648      	mov	r0, r9
 80088ce:	f000 fcb1 	bl	8009234 <__pow5mult>
 80088d2:	9003      	str	r0, [sp, #12]
 80088d4:	2101      	movs	r1, #1
 80088d6:	4648      	mov	r0, r9
 80088d8:	f000 fbf4 	bl	80090c4 <__i2b>
 80088dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088de:	4604      	mov	r4, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 81d8 	beq.w	8008c96 <_dtoa_r+0xb5e>
 80088e6:	461a      	mov	r2, r3
 80088e8:	4601      	mov	r1, r0
 80088ea:	4648      	mov	r0, r9
 80088ec:	f000 fca2 	bl	8009234 <__pow5mult>
 80088f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088f2:	4604      	mov	r4, r0
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	f300 809f 	bgt.w	8008a38 <_dtoa_r+0x900>
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 8097 	bne.w	8008a30 <_dtoa_r+0x8f8>
 8008902:	9b07      	ldr	r3, [sp, #28]
 8008904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008908:	2b00      	cmp	r3, #0
 800890a:	f040 8093 	bne.w	8008a34 <_dtoa_r+0x8fc>
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008914:	0d1b      	lsrs	r3, r3, #20
 8008916:	051b      	lsls	r3, r3, #20
 8008918:	b133      	cbz	r3, 8008928 <_dtoa_r+0x7f0>
 800891a:	9b04      	ldr	r3, [sp, #16]
 800891c:	3301      	adds	r3, #1
 800891e:	9304      	str	r3, [sp, #16]
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	3301      	adds	r3, #1
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	2301      	movs	r3, #1
 8008928:	930a      	str	r3, [sp, #40]	@ 0x28
 800892a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 81b8 	beq.w	8008ca2 <_dtoa_r+0xb6a>
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008938:	6918      	ldr	r0, [r3, #16]
 800893a:	f000 fb77 	bl	800902c <__hi0bits>
 800893e:	f1c0 0020 	rsb	r0, r0, #32
 8008942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008944:	4418      	add	r0, r3
 8008946:	f010 001f 	ands.w	r0, r0, #31
 800894a:	f000 8082 	beq.w	8008a52 <_dtoa_r+0x91a>
 800894e:	f1c0 0320 	rsb	r3, r0, #32
 8008952:	2b04      	cmp	r3, #4
 8008954:	dd73      	ble.n	8008a3e <_dtoa_r+0x906>
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	f1c0 001c 	rsb	r0, r0, #28
 800895c:	4403      	add	r3, r0
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008962:	4406      	add	r6, r0
 8008964:	4403      	add	r3, r0
 8008966:	9309      	str	r3, [sp, #36]	@ 0x24
 8008968:	9b04      	ldr	r3, [sp, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	dd05      	ble.n	800897a <_dtoa_r+0x842>
 800896e:	461a      	mov	r2, r3
 8008970:	4648      	mov	r0, r9
 8008972:	9903      	ldr	r1, [sp, #12]
 8008974:	f000 fcb8 	bl	80092e8 <__lshift>
 8008978:	9003      	str	r0, [sp, #12]
 800897a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897c:	2b00      	cmp	r3, #0
 800897e:	dd05      	ble.n	800898c <_dtoa_r+0x854>
 8008980:	4621      	mov	r1, r4
 8008982:	461a      	mov	r2, r3
 8008984:	4648      	mov	r0, r9
 8008986:	f000 fcaf 	bl	80092e8 <__lshift>
 800898a:	4604      	mov	r4, r0
 800898c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d061      	beq.n	8008a56 <_dtoa_r+0x91e>
 8008992:	4621      	mov	r1, r4
 8008994:	9803      	ldr	r0, [sp, #12]
 8008996:	f000 fd13 	bl	80093c0 <__mcmp>
 800899a:	2800      	cmp	r0, #0
 800899c:	da5b      	bge.n	8008a56 <_dtoa_r+0x91e>
 800899e:	2300      	movs	r3, #0
 80089a0:	220a      	movs	r2, #10
 80089a2:	4648      	mov	r0, r9
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	f000 fafb 	bl	8008fa0 <__multadd>
 80089aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80089b0:	9003      	str	r0, [sp, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 8177 	beq.w	8008ca6 <_dtoa_r+0xb6e>
 80089b8:	4629      	mov	r1, r5
 80089ba:	2300      	movs	r3, #0
 80089bc:	220a      	movs	r2, #10
 80089be:	4648      	mov	r0, r9
 80089c0:	f000 faee 	bl	8008fa0 <__multadd>
 80089c4:	f1bb 0f00 	cmp.w	fp, #0
 80089c8:	4605      	mov	r5, r0
 80089ca:	dc6f      	bgt.n	8008aac <_dtoa_r+0x974>
 80089cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	dc49      	bgt.n	8008a66 <_dtoa_r+0x92e>
 80089d2:	e06b      	b.n	8008aac <_dtoa_r+0x974>
 80089d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089da:	e73c      	b.n	8008856 <_dtoa_r+0x71e>
 80089dc:	3fe00000 	.word	0x3fe00000
 80089e0:	40240000 	.word	0x40240000
 80089e4:	9b08      	ldr	r3, [sp, #32]
 80089e6:	1e5c      	subs	r4, r3, #1
 80089e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	db09      	blt.n	8008a02 <_dtoa_r+0x8ca>
 80089ee:	1b1c      	subs	r4, r3, r4
 80089f0:	9b08      	ldr	r3, [sp, #32]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f6bf af30 	bge.w	8008858 <_dtoa_r+0x720>
 80089f8:	9b04      	ldr	r3, [sp, #16]
 80089fa:	9a08      	ldr	r2, [sp, #32]
 80089fc:	1a9e      	subs	r6, r3, r2
 80089fe:	2300      	movs	r3, #0
 8008a00:	e72b      	b.n	800885a <_dtoa_r+0x722>
 8008a02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a06:	1ae3      	subs	r3, r4, r3
 8008a08:	441a      	add	r2, r3
 8008a0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a0c:	9e04      	ldr	r6, [sp, #16]
 8008a0e:	2400      	movs	r4, #0
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a14:	e721      	b.n	800885a <_dtoa_r+0x722>
 8008a16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a18:	9e04      	ldr	r6, [sp, #16]
 8008a1a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a1c:	e728      	b.n	8008870 <_dtoa_r+0x738>
 8008a1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a22:	e751      	b.n	80088c8 <_dtoa_r+0x790>
 8008a24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a26:	9903      	ldr	r1, [sp, #12]
 8008a28:	e750      	b.n	80088cc <_dtoa_r+0x794>
 8008a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a2e:	e751      	b.n	80088d4 <_dtoa_r+0x79c>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e779      	b.n	8008928 <_dtoa_r+0x7f0>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	e777      	b.n	8008928 <_dtoa_r+0x7f0>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3c:	e779      	b.n	8008932 <_dtoa_r+0x7fa>
 8008a3e:	d093      	beq.n	8008968 <_dtoa_r+0x830>
 8008a40:	9a04      	ldr	r2, [sp, #16]
 8008a42:	331c      	adds	r3, #28
 8008a44:	441a      	add	r2, r3
 8008a46:	9204      	str	r2, [sp, #16]
 8008a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a4a:	441e      	add	r6, r3
 8008a4c:	441a      	add	r2, r3
 8008a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a50:	e78a      	b.n	8008968 <_dtoa_r+0x830>
 8008a52:	4603      	mov	r3, r0
 8008a54:	e7f4      	b.n	8008a40 <_dtoa_r+0x908>
 8008a56:	9b08      	ldr	r3, [sp, #32]
 8008a58:	46b8      	mov	r8, r7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dc20      	bgt.n	8008aa0 <_dtoa_r+0x968>
 8008a5e:	469b      	mov	fp, r3
 8008a60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	dd1e      	ble.n	8008aa4 <_dtoa_r+0x96c>
 8008a66:	f1bb 0f00 	cmp.w	fp, #0
 8008a6a:	f47f adb1 	bne.w	80085d0 <_dtoa_r+0x498>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	465b      	mov	r3, fp
 8008a72:	2205      	movs	r2, #5
 8008a74:	4648      	mov	r0, r9
 8008a76:	f000 fa93 	bl	8008fa0 <__multadd>
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	9803      	ldr	r0, [sp, #12]
 8008a80:	f000 fc9e 	bl	80093c0 <__mcmp>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f77f ada3 	ble.w	80085d0 <_dtoa_r+0x498>
 8008a8a:	4656      	mov	r6, sl
 8008a8c:	2331      	movs	r3, #49	@ 0x31
 8008a8e:	f108 0801 	add.w	r8, r8, #1
 8008a92:	f806 3b01 	strb.w	r3, [r6], #1
 8008a96:	e59f      	b.n	80085d8 <_dtoa_r+0x4a0>
 8008a98:	46b8      	mov	r8, r7
 8008a9a:	9c08      	ldr	r4, [sp, #32]
 8008a9c:	4625      	mov	r5, r4
 8008a9e:	e7f4      	b.n	8008a8a <_dtoa_r+0x952>
 8008aa0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 8101 	beq.w	8008cae <_dtoa_r+0xb76>
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	dd05      	ble.n	8008abc <_dtoa_r+0x984>
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f000 fc17 	bl	80092e8 <__lshift>
 8008aba:	4605      	mov	r5, r0
 8008abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d05c      	beq.n	8008b7c <_dtoa_r+0xa44>
 8008ac2:	4648      	mov	r0, r9
 8008ac4:	6869      	ldr	r1, [r5, #4]
 8008ac6:	f000 fa09 	bl	8008edc <_Balloc>
 8008aca:	4606      	mov	r6, r0
 8008acc:	b928      	cbnz	r0, 8008ada <_dtoa_r+0x9a2>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ad4:	4b80      	ldr	r3, [pc, #512]	@ (8008cd8 <_dtoa_r+0xba0>)
 8008ad6:	f7ff bb43 	b.w	8008160 <_dtoa_r+0x28>
 8008ada:	692a      	ldr	r2, [r5, #16]
 8008adc:	f105 010c 	add.w	r1, r5, #12
 8008ae0:	3202      	adds	r2, #2
 8008ae2:	0092      	lsls	r2, r2, #2
 8008ae4:	300c      	adds	r0, #12
 8008ae6:	f000 ff9d 	bl	8009a24 <memcpy>
 8008aea:	2201      	movs	r2, #1
 8008aec:	4631      	mov	r1, r6
 8008aee:	4648      	mov	r0, r9
 8008af0:	f000 fbfa 	bl	80092e8 <__lshift>
 8008af4:	462f      	mov	r7, r5
 8008af6:	4605      	mov	r5, r0
 8008af8:	f10a 0301 	add.w	r3, sl, #1
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	eb0a 030b 	add.w	r3, sl, fp
 8008b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b04:	9b06      	ldr	r3, [sp, #24]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	4621      	mov	r1, r4
 8008b10:	9803      	ldr	r0, [sp, #12]
 8008b12:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b16:	f7ff fa84 	bl	8008022 <quorem>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	3330      	adds	r3, #48	@ 0x30
 8008b20:	9006      	str	r0, [sp, #24]
 8008b22:	9803      	ldr	r0, [sp, #12]
 8008b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b26:	f000 fc4b 	bl	80093c0 <__mcmp>
 8008b2a:	462a      	mov	r2, r5
 8008b2c:	9008      	str	r0, [sp, #32]
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4648      	mov	r0, r9
 8008b32:	f000 fc61 	bl	80093f8 <__mdiff>
 8008b36:	68c2      	ldr	r2, [r0, #12]
 8008b38:	4606      	mov	r6, r0
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b3c:	bb02      	cbnz	r2, 8008b80 <_dtoa_r+0xa48>
 8008b3e:	4601      	mov	r1, r0
 8008b40:	9803      	ldr	r0, [sp, #12]
 8008b42:	f000 fc3d 	bl	80093c0 <__mcmp>
 8008b46:	4602      	mov	r2, r0
 8008b48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4648      	mov	r0, r9
 8008b4e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008b52:	f000 fa03 	bl	8008f5c <_Bfree>
 8008b56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b5a:	9e04      	ldr	r6, [sp, #16]
 8008b5c:	ea42 0103 	orr.w	r1, r2, r3
 8008b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b62:	4319      	orrs	r1, r3
 8008b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b66:	d10d      	bne.n	8008b84 <_dtoa_r+0xa4c>
 8008b68:	2b39      	cmp	r3, #57	@ 0x39
 8008b6a:	d027      	beq.n	8008bbc <_dtoa_r+0xa84>
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	dd01      	ble.n	8008b76 <_dtoa_r+0xa3e>
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	3331      	adds	r3, #49	@ 0x31
 8008b76:	f88b 3000 	strb.w	r3, [fp]
 8008b7a:	e52e      	b.n	80085da <_dtoa_r+0x4a2>
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	e7b9      	b.n	8008af4 <_dtoa_r+0x9bc>
 8008b80:	2201      	movs	r2, #1
 8008b82:	e7e2      	b.n	8008b4a <_dtoa_r+0xa12>
 8008b84:	9908      	ldr	r1, [sp, #32]
 8008b86:	2900      	cmp	r1, #0
 8008b88:	db04      	blt.n	8008b94 <_dtoa_r+0xa5c>
 8008b8a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008b8c:	4301      	orrs	r1, r0
 8008b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b90:	4301      	orrs	r1, r0
 8008b92:	d120      	bne.n	8008bd6 <_dtoa_r+0xa9e>
 8008b94:	2a00      	cmp	r2, #0
 8008b96:	ddee      	ble.n	8008b76 <_dtoa_r+0xa3e>
 8008b98:	2201      	movs	r2, #1
 8008b9a:	9903      	ldr	r1, [sp, #12]
 8008b9c:	4648      	mov	r0, r9
 8008b9e:	9304      	str	r3, [sp, #16]
 8008ba0:	f000 fba2 	bl	80092e8 <__lshift>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	9003      	str	r0, [sp, #12]
 8008ba8:	f000 fc0a 	bl	80093c0 <__mcmp>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	9b04      	ldr	r3, [sp, #16]
 8008bb0:	dc02      	bgt.n	8008bb8 <_dtoa_r+0xa80>
 8008bb2:	d1e0      	bne.n	8008b76 <_dtoa_r+0xa3e>
 8008bb4:	07da      	lsls	r2, r3, #31
 8008bb6:	d5de      	bpl.n	8008b76 <_dtoa_r+0xa3e>
 8008bb8:	2b39      	cmp	r3, #57	@ 0x39
 8008bba:	d1da      	bne.n	8008b72 <_dtoa_r+0xa3a>
 8008bbc:	2339      	movs	r3, #57	@ 0x39
 8008bbe:	f88b 3000 	strb.w	r3, [fp]
 8008bc2:	4633      	mov	r3, r6
 8008bc4:	461e      	mov	r6, r3
 8008bc6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	2a39      	cmp	r2, #57	@ 0x39
 8008bce:	d04e      	beq.n	8008c6e <_dtoa_r+0xb36>
 8008bd0:	3201      	adds	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e501      	b.n	80085da <_dtoa_r+0x4a2>
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	dd03      	ble.n	8008be2 <_dtoa_r+0xaaa>
 8008bda:	2b39      	cmp	r3, #57	@ 0x39
 8008bdc:	d0ee      	beq.n	8008bbc <_dtoa_r+0xa84>
 8008bde:	3301      	adds	r3, #1
 8008be0:	e7c9      	b.n	8008b76 <_dtoa_r+0xa3e>
 8008be2:	9a04      	ldr	r2, [sp, #16]
 8008be4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008be6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bea:	428a      	cmp	r2, r1
 8008bec:	d028      	beq.n	8008c40 <_dtoa_r+0xb08>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	220a      	movs	r2, #10
 8008bf2:	9903      	ldr	r1, [sp, #12]
 8008bf4:	4648      	mov	r0, r9
 8008bf6:	f000 f9d3 	bl	8008fa0 <__multadd>
 8008bfa:	42af      	cmp	r7, r5
 8008bfc:	9003      	str	r0, [sp, #12]
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	f04f 020a 	mov.w	r2, #10
 8008c06:	4639      	mov	r1, r7
 8008c08:	4648      	mov	r0, r9
 8008c0a:	d107      	bne.n	8008c1c <_dtoa_r+0xae4>
 8008c0c:	f000 f9c8 	bl	8008fa0 <__multadd>
 8008c10:	4607      	mov	r7, r0
 8008c12:	4605      	mov	r5, r0
 8008c14:	9b04      	ldr	r3, [sp, #16]
 8008c16:	3301      	adds	r3, #1
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	e777      	b.n	8008b0c <_dtoa_r+0x9d4>
 8008c1c:	f000 f9c0 	bl	8008fa0 <__multadd>
 8008c20:	4629      	mov	r1, r5
 8008c22:	4607      	mov	r7, r0
 8008c24:	2300      	movs	r3, #0
 8008c26:	220a      	movs	r2, #10
 8008c28:	4648      	mov	r0, r9
 8008c2a:	f000 f9b9 	bl	8008fa0 <__multadd>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	e7f0      	b.n	8008c14 <_dtoa_r+0xadc>
 8008c32:	f1bb 0f00 	cmp.w	fp, #0
 8008c36:	bfcc      	ite	gt
 8008c38:	465e      	movgt	r6, fp
 8008c3a:	2601      	movle	r6, #1
 8008c3c:	2700      	movs	r7, #0
 8008c3e:	4456      	add	r6, sl
 8008c40:	2201      	movs	r2, #1
 8008c42:	9903      	ldr	r1, [sp, #12]
 8008c44:	4648      	mov	r0, r9
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	f000 fb4e 	bl	80092e8 <__lshift>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	9003      	str	r0, [sp, #12]
 8008c50:	f000 fbb6 	bl	80093c0 <__mcmp>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	dcb4      	bgt.n	8008bc2 <_dtoa_r+0xa8a>
 8008c58:	d102      	bne.n	8008c60 <_dtoa_r+0xb28>
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	07db      	lsls	r3, r3, #31
 8008c5e:	d4b0      	bmi.n	8008bc2 <_dtoa_r+0xa8a>
 8008c60:	4633      	mov	r3, r6
 8008c62:	461e      	mov	r6, r3
 8008c64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c68:	2a30      	cmp	r2, #48	@ 0x30
 8008c6a:	d0fa      	beq.n	8008c62 <_dtoa_r+0xb2a>
 8008c6c:	e4b5      	b.n	80085da <_dtoa_r+0x4a2>
 8008c6e:	459a      	cmp	sl, r3
 8008c70:	d1a8      	bne.n	8008bc4 <_dtoa_r+0xa8c>
 8008c72:	2331      	movs	r3, #49	@ 0x31
 8008c74:	f108 0801 	add.w	r8, r8, #1
 8008c78:	f88a 3000 	strb.w	r3, [sl]
 8008c7c:	e4ad      	b.n	80085da <_dtoa_r+0x4a2>
 8008c7e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008cdc <_dtoa_r+0xba4>
 8008c84:	b11b      	cbz	r3, 8008c8e <_dtoa_r+0xb56>
 8008c86:	f10a 0308 	add.w	r3, sl, #8
 8008c8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4650      	mov	r0, sl
 8008c90:	b017      	add	sp, #92	@ 0x5c
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	f77f ae2e 	ble.w	80088fa <_dtoa_r+0x7c2>
 8008c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	e64d      	b.n	8008942 <_dtoa_r+0x80a>
 8008ca6:	f1bb 0f00 	cmp.w	fp, #0
 8008caa:	f77f aed9 	ble.w	8008a60 <_dtoa_r+0x928>
 8008cae:	4656      	mov	r6, sl
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	9803      	ldr	r0, [sp, #12]
 8008cb4:	f7ff f9b5 	bl	8008022 <quorem>
 8008cb8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008cbc:	f806 3b01 	strb.w	r3, [r6], #1
 8008cc0:	eba6 020a 	sub.w	r2, r6, sl
 8008cc4:	4593      	cmp	fp, r2
 8008cc6:	ddb4      	ble.n	8008c32 <_dtoa_r+0xafa>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	220a      	movs	r2, #10
 8008ccc:	4648      	mov	r0, r9
 8008cce:	9903      	ldr	r1, [sp, #12]
 8008cd0:	f000 f966 	bl	8008fa0 <__multadd>
 8008cd4:	9003      	str	r0, [sp, #12]
 8008cd6:	e7eb      	b.n	8008cb0 <_dtoa_r+0xb78>
 8008cd8:	0800a9b2 	.word	0x0800a9b2
 8008cdc:	0800a936 	.word	0x0800a936

08008ce0 <_free_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	d040      	beq.n	8008d6a <_free_r+0x8a>
 8008ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cec:	1f0c      	subs	r4, r1, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfb8      	it	lt
 8008cf2:	18e4      	addlt	r4, r4, r3
 8008cf4:	f000 f8e6 	bl	8008ec4 <__malloc_lock>
 8008cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d6c <_free_r+0x8c>)
 8008cfa:	6813      	ldr	r3, [r2, #0]
 8008cfc:	b933      	cbnz	r3, 8008d0c <_free_r+0x2c>
 8008cfe:	6063      	str	r3, [r4, #4]
 8008d00:	6014      	str	r4, [r2, #0]
 8008d02:	4628      	mov	r0, r5
 8008d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d08:	f000 b8e2 	b.w	8008ed0 <__malloc_unlock>
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	d908      	bls.n	8008d22 <_free_r+0x42>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	1821      	adds	r1, r4, r0
 8008d14:	428b      	cmp	r3, r1
 8008d16:	bf01      	itttt	eq
 8008d18:	6819      	ldreq	r1, [r3, #0]
 8008d1a:	685b      	ldreq	r3, [r3, #4]
 8008d1c:	1809      	addeq	r1, r1, r0
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	e7ed      	b.n	8008cfe <_free_r+0x1e>
 8008d22:	461a      	mov	r2, r3
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	b10b      	cbz	r3, 8008d2c <_free_r+0x4c>
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d9fa      	bls.n	8008d22 <_free_r+0x42>
 8008d2c:	6811      	ldr	r1, [r2, #0]
 8008d2e:	1850      	adds	r0, r2, r1
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d10b      	bne.n	8008d4c <_free_r+0x6c>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	4401      	add	r1, r0
 8008d38:	1850      	adds	r0, r2, r1
 8008d3a:	4283      	cmp	r3, r0
 8008d3c:	6011      	str	r1, [r2, #0]
 8008d3e:	d1e0      	bne.n	8008d02 <_free_r+0x22>
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4408      	add	r0, r1
 8008d46:	6010      	str	r0, [r2, #0]
 8008d48:	6053      	str	r3, [r2, #4]
 8008d4a:	e7da      	b.n	8008d02 <_free_r+0x22>
 8008d4c:	d902      	bls.n	8008d54 <_free_r+0x74>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	e7d6      	b.n	8008d02 <_free_r+0x22>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	1821      	adds	r1, r4, r0
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	bf01      	itttt	eq
 8008d5c:	6819      	ldreq	r1, [r3, #0]
 8008d5e:	685b      	ldreq	r3, [r3, #4]
 8008d60:	1809      	addeq	r1, r1, r0
 8008d62:	6021      	streq	r1, [r4, #0]
 8008d64:	6063      	str	r3, [r4, #4]
 8008d66:	6054      	str	r4, [r2, #4]
 8008d68:	e7cb      	b.n	8008d02 <_free_r+0x22>
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	200009b0 	.word	0x200009b0

08008d70 <malloc>:
 8008d70:	4b02      	ldr	r3, [pc, #8]	@ (8008d7c <malloc+0xc>)
 8008d72:	4601      	mov	r1, r0
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	f000 b825 	b.w	8008dc4 <_malloc_r>
 8008d7a:	bf00      	nop
 8008d7c:	20000058 	.word	0x20000058

08008d80 <sbrk_aligned>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	4e0f      	ldr	r6, [pc, #60]	@ (8008dc0 <sbrk_aligned+0x40>)
 8008d84:	460c      	mov	r4, r1
 8008d86:	6831      	ldr	r1, [r6, #0]
 8008d88:	4605      	mov	r5, r0
 8008d8a:	b911      	cbnz	r1, 8008d92 <sbrk_aligned+0x12>
 8008d8c:	f000 fe3a 	bl	8009a04 <_sbrk_r>
 8008d90:	6030      	str	r0, [r6, #0]
 8008d92:	4621      	mov	r1, r4
 8008d94:	4628      	mov	r0, r5
 8008d96:	f000 fe35 	bl	8009a04 <_sbrk_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	d103      	bne.n	8008da6 <sbrk_aligned+0x26>
 8008d9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008da2:	4620      	mov	r0, r4
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
 8008da6:	1cc4      	adds	r4, r0, #3
 8008da8:	f024 0403 	bic.w	r4, r4, #3
 8008dac:	42a0      	cmp	r0, r4
 8008dae:	d0f8      	beq.n	8008da2 <sbrk_aligned+0x22>
 8008db0:	1a21      	subs	r1, r4, r0
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 fe26 	bl	8009a04 <_sbrk_r>
 8008db8:	3001      	adds	r0, #1
 8008dba:	d1f2      	bne.n	8008da2 <sbrk_aligned+0x22>
 8008dbc:	e7ef      	b.n	8008d9e <sbrk_aligned+0x1e>
 8008dbe:	bf00      	nop
 8008dc0:	200009ac 	.word	0x200009ac

08008dc4 <_malloc_r>:
 8008dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc8:	1ccd      	adds	r5, r1, #3
 8008dca:	f025 0503 	bic.w	r5, r5, #3
 8008dce:	3508      	adds	r5, #8
 8008dd0:	2d0c      	cmp	r5, #12
 8008dd2:	bf38      	it	cc
 8008dd4:	250c      	movcc	r5, #12
 8008dd6:	2d00      	cmp	r5, #0
 8008dd8:	4606      	mov	r6, r0
 8008dda:	db01      	blt.n	8008de0 <_malloc_r+0x1c>
 8008ddc:	42a9      	cmp	r1, r5
 8008dde:	d904      	bls.n	8008dea <_malloc_r+0x26>
 8008de0:	230c      	movs	r3, #12
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	2000      	movs	r0, #0
 8008de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ec0 <_malloc_r+0xfc>
 8008dee:	f000 f869 	bl	8008ec4 <__malloc_lock>
 8008df2:	f8d8 3000 	ldr.w	r3, [r8]
 8008df6:	461c      	mov	r4, r3
 8008df8:	bb44      	cbnz	r4, 8008e4c <_malloc_r+0x88>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ffbf 	bl	8008d80 <sbrk_aligned>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	4604      	mov	r4, r0
 8008e06:	d158      	bne.n	8008eba <_malloc_r+0xf6>
 8008e08:	f8d8 4000 	ldr.w	r4, [r8]
 8008e0c:	4627      	mov	r7, r4
 8008e0e:	2f00      	cmp	r7, #0
 8008e10:	d143      	bne.n	8008e9a <_malloc_r+0xd6>
 8008e12:	2c00      	cmp	r4, #0
 8008e14:	d04b      	beq.n	8008eae <_malloc_r+0xea>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	4639      	mov	r1, r7
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	eb04 0903 	add.w	r9, r4, r3
 8008e20:	f000 fdf0 	bl	8009a04 <_sbrk_r>
 8008e24:	4581      	cmp	r9, r0
 8008e26:	d142      	bne.n	8008eae <_malloc_r+0xea>
 8008e28:	6821      	ldr	r1, [r4, #0]
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	1a6d      	subs	r5, r5, r1
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7ff ffa6 	bl	8008d80 <sbrk_aligned>
 8008e34:	3001      	adds	r0, #1
 8008e36:	d03a      	beq.n	8008eae <_malloc_r+0xea>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	442b      	add	r3, r5
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	bb62      	cbnz	r2, 8008ea0 <_malloc_r+0xdc>
 8008e46:	f8c8 7000 	str.w	r7, [r8]
 8008e4a:	e00f      	b.n	8008e6c <_malloc_r+0xa8>
 8008e4c:	6822      	ldr	r2, [r4, #0]
 8008e4e:	1b52      	subs	r2, r2, r5
 8008e50:	d420      	bmi.n	8008e94 <_malloc_r+0xd0>
 8008e52:	2a0b      	cmp	r2, #11
 8008e54:	d917      	bls.n	8008e86 <_malloc_r+0xc2>
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	6025      	str	r5, [r4, #0]
 8008e5c:	bf18      	it	ne
 8008e5e:	6059      	strne	r1, [r3, #4]
 8008e60:	6863      	ldr	r3, [r4, #4]
 8008e62:	bf08      	it	eq
 8008e64:	f8c8 1000 	streq.w	r1, [r8]
 8008e68:	5162      	str	r2, [r4, r5]
 8008e6a:	604b      	str	r3, [r1, #4]
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f000 f82f 	bl	8008ed0 <__malloc_unlock>
 8008e72:	f104 000b 	add.w	r0, r4, #11
 8008e76:	1d23      	adds	r3, r4, #4
 8008e78:	f020 0007 	bic.w	r0, r0, #7
 8008e7c:	1ac2      	subs	r2, r0, r3
 8008e7e:	bf1c      	itt	ne
 8008e80:	1a1b      	subne	r3, r3, r0
 8008e82:	50a3      	strne	r3, [r4, r2]
 8008e84:	e7af      	b.n	8008de6 <_malloc_r+0x22>
 8008e86:	6862      	ldr	r2, [r4, #4]
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	bf0c      	ite	eq
 8008e8c:	f8c8 2000 	streq.w	r2, [r8]
 8008e90:	605a      	strne	r2, [r3, #4]
 8008e92:	e7eb      	b.n	8008e6c <_malloc_r+0xa8>
 8008e94:	4623      	mov	r3, r4
 8008e96:	6864      	ldr	r4, [r4, #4]
 8008e98:	e7ae      	b.n	8008df8 <_malloc_r+0x34>
 8008e9a:	463c      	mov	r4, r7
 8008e9c:	687f      	ldr	r7, [r7, #4]
 8008e9e:	e7b6      	b.n	8008e0e <_malloc_r+0x4a>
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d1fb      	bne.n	8008ea0 <_malloc_r+0xdc>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	6053      	str	r3, [r2, #4]
 8008eac:	e7de      	b.n	8008e6c <_malloc_r+0xa8>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	6033      	str	r3, [r6, #0]
 8008eb4:	f000 f80c 	bl	8008ed0 <__malloc_unlock>
 8008eb8:	e794      	b.n	8008de4 <_malloc_r+0x20>
 8008eba:	6005      	str	r5, [r0, #0]
 8008ebc:	e7d6      	b.n	8008e6c <_malloc_r+0xa8>
 8008ebe:	bf00      	nop
 8008ec0:	200009b0 	.word	0x200009b0

08008ec4 <__malloc_lock>:
 8008ec4:	4801      	ldr	r0, [pc, #4]	@ (8008ecc <__malloc_lock+0x8>)
 8008ec6:	f7ff b89c 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8008eca:	bf00      	nop
 8008ecc:	200009a8 	.word	0x200009a8

08008ed0 <__malloc_unlock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	@ (8008ed8 <__malloc_unlock+0x8>)
 8008ed2:	f7ff b897 	b.w	8008004 <__retarget_lock_release_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	200009a8 	.word	0x200009a8

08008edc <_Balloc>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	69c6      	ldr	r6, [r0, #28]
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	b976      	cbnz	r6, 8008f04 <_Balloc+0x28>
 8008ee6:	2010      	movs	r0, #16
 8008ee8:	f7ff ff42 	bl	8008d70 <malloc>
 8008eec:	4602      	mov	r2, r0
 8008eee:	61e0      	str	r0, [r4, #28]
 8008ef0:	b920      	cbnz	r0, 8008efc <_Balloc+0x20>
 8008ef2:	216b      	movs	r1, #107	@ 0x6b
 8008ef4:	4b17      	ldr	r3, [pc, #92]	@ (8008f54 <_Balloc+0x78>)
 8008ef6:	4818      	ldr	r0, [pc, #96]	@ (8008f58 <_Balloc+0x7c>)
 8008ef8:	f000 fda2 	bl	8009a40 <__assert_func>
 8008efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f00:	6006      	str	r6, [r0, #0]
 8008f02:	60c6      	str	r6, [r0, #12]
 8008f04:	69e6      	ldr	r6, [r4, #28]
 8008f06:	68f3      	ldr	r3, [r6, #12]
 8008f08:	b183      	cbz	r3, 8008f2c <_Balloc+0x50>
 8008f0a:	69e3      	ldr	r3, [r4, #28]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f12:	b9b8      	cbnz	r0, 8008f44 <_Balloc+0x68>
 8008f14:	2101      	movs	r1, #1
 8008f16:	fa01 f605 	lsl.w	r6, r1, r5
 8008f1a:	1d72      	adds	r2, r6, #5
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	0092      	lsls	r2, r2, #2
 8008f20:	f000 fdac 	bl	8009a7c <_calloc_r>
 8008f24:	b160      	cbz	r0, 8008f40 <_Balloc+0x64>
 8008f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f2a:	e00e      	b.n	8008f4a <_Balloc+0x6e>
 8008f2c:	2221      	movs	r2, #33	@ 0x21
 8008f2e:	2104      	movs	r1, #4
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 fda3 	bl	8009a7c <_calloc_r>
 8008f36:	69e3      	ldr	r3, [r4, #28]
 8008f38:	60f0      	str	r0, [r6, #12]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e4      	bne.n	8008f0a <_Balloc+0x2e>
 8008f40:	2000      	movs	r0, #0
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	6802      	ldr	r2, [r0, #0]
 8008f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f50:	e7f7      	b.n	8008f42 <_Balloc+0x66>
 8008f52:	bf00      	nop
 8008f54:	0800a943 	.word	0x0800a943
 8008f58:	0800a9c3 	.word	0x0800a9c3

08008f5c <_Bfree>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	69c6      	ldr	r6, [r0, #28]
 8008f60:	4605      	mov	r5, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	b976      	cbnz	r6, 8008f84 <_Bfree+0x28>
 8008f66:	2010      	movs	r0, #16
 8008f68:	f7ff ff02 	bl	8008d70 <malloc>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	61e8      	str	r0, [r5, #28]
 8008f70:	b920      	cbnz	r0, 8008f7c <_Bfree+0x20>
 8008f72:	218f      	movs	r1, #143	@ 0x8f
 8008f74:	4b08      	ldr	r3, [pc, #32]	@ (8008f98 <_Bfree+0x3c>)
 8008f76:	4809      	ldr	r0, [pc, #36]	@ (8008f9c <_Bfree+0x40>)
 8008f78:	f000 fd62 	bl	8009a40 <__assert_func>
 8008f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f80:	6006      	str	r6, [r0, #0]
 8008f82:	60c6      	str	r6, [r0, #12]
 8008f84:	b13c      	cbz	r4, 8008f96 <_Bfree+0x3a>
 8008f86:	69eb      	ldr	r3, [r5, #28]
 8008f88:	6862      	ldr	r2, [r4, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f90:	6021      	str	r1, [r4, #0]
 8008f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	0800a943 	.word	0x0800a943
 8008f9c:	0800a9c3 	.word	0x0800a9c3

08008fa0 <__multadd>:
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa4:	4607      	mov	r7, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	461e      	mov	r6, r3
 8008faa:	2000      	movs	r0, #0
 8008fac:	690d      	ldr	r5, [r1, #16]
 8008fae:	f101 0c14 	add.w	ip, r1, #20
 8008fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	b299      	uxth	r1, r3
 8008fba:	fb02 6101 	mla	r1, r2, r1, r6
 8008fbe:	0c1e      	lsrs	r6, r3, #16
 8008fc0:	0c0b      	lsrs	r3, r1, #16
 8008fc2:	fb02 3306 	mla	r3, r2, r6, r3
 8008fc6:	b289      	uxth	r1, r1
 8008fc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fcc:	4285      	cmp	r5, r0
 8008fce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fd2:	f84c 1b04 	str.w	r1, [ip], #4
 8008fd6:	dcec      	bgt.n	8008fb2 <__multadd+0x12>
 8008fd8:	b30e      	cbz	r6, 800901e <__multadd+0x7e>
 8008fda:	68a3      	ldr	r3, [r4, #8]
 8008fdc:	42ab      	cmp	r3, r5
 8008fde:	dc19      	bgt.n	8009014 <__multadd+0x74>
 8008fe0:	6861      	ldr	r1, [r4, #4]
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	3101      	adds	r1, #1
 8008fe6:	f7ff ff79 	bl	8008edc <_Balloc>
 8008fea:	4680      	mov	r8, r0
 8008fec:	b928      	cbnz	r0, 8008ffa <__multadd+0x5a>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	21ba      	movs	r1, #186	@ 0xba
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <__multadd+0x84>)
 8008ff4:	480c      	ldr	r0, [pc, #48]	@ (8009028 <__multadd+0x88>)
 8008ff6:	f000 fd23 	bl	8009a40 <__assert_func>
 8008ffa:	6922      	ldr	r2, [r4, #16]
 8008ffc:	f104 010c 	add.w	r1, r4, #12
 8009000:	3202      	adds	r2, #2
 8009002:	0092      	lsls	r2, r2, #2
 8009004:	300c      	adds	r0, #12
 8009006:	f000 fd0d 	bl	8009a24 <memcpy>
 800900a:	4621      	mov	r1, r4
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff ffa5 	bl	8008f5c <_Bfree>
 8009012:	4644      	mov	r4, r8
 8009014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009018:	3501      	adds	r5, #1
 800901a:	615e      	str	r6, [r3, #20]
 800901c:	6125      	str	r5, [r4, #16]
 800901e:	4620      	mov	r0, r4
 8009020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009024:	0800a9b2 	.word	0x0800a9b2
 8009028:	0800a9c3 	.word	0x0800a9c3

0800902c <__hi0bits>:
 800902c:	4603      	mov	r3, r0
 800902e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009032:	bf3a      	itte	cc
 8009034:	0403      	lslcc	r3, r0, #16
 8009036:	2010      	movcc	r0, #16
 8009038:	2000      	movcs	r0, #0
 800903a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800903e:	bf3c      	itt	cc
 8009040:	021b      	lslcc	r3, r3, #8
 8009042:	3008      	addcc	r0, #8
 8009044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009048:	bf3c      	itt	cc
 800904a:	011b      	lslcc	r3, r3, #4
 800904c:	3004      	addcc	r0, #4
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009052:	bf3c      	itt	cc
 8009054:	009b      	lslcc	r3, r3, #2
 8009056:	3002      	addcc	r0, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	db05      	blt.n	8009068 <__hi0bits+0x3c>
 800905c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009060:	f100 0001 	add.w	r0, r0, #1
 8009064:	bf08      	it	eq
 8009066:	2020      	moveq	r0, #32
 8009068:	4770      	bx	lr

0800906a <__lo0bits>:
 800906a:	6803      	ldr	r3, [r0, #0]
 800906c:	4602      	mov	r2, r0
 800906e:	f013 0007 	ands.w	r0, r3, #7
 8009072:	d00b      	beq.n	800908c <__lo0bits+0x22>
 8009074:	07d9      	lsls	r1, r3, #31
 8009076:	d421      	bmi.n	80090bc <__lo0bits+0x52>
 8009078:	0798      	lsls	r0, r3, #30
 800907a:	bf49      	itett	mi
 800907c:	085b      	lsrmi	r3, r3, #1
 800907e:	089b      	lsrpl	r3, r3, #2
 8009080:	2001      	movmi	r0, #1
 8009082:	6013      	strmi	r3, [r2, #0]
 8009084:	bf5c      	itt	pl
 8009086:	2002      	movpl	r0, #2
 8009088:	6013      	strpl	r3, [r2, #0]
 800908a:	4770      	bx	lr
 800908c:	b299      	uxth	r1, r3
 800908e:	b909      	cbnz	r1, 8009094 <__lo0bits+0x2a>
 8009090:	2010      	movs	r0, #16
 8009092:	0c1b      	lsrs	r3, r3, #16
 8009094:	b2d9      	uxtb	r1, r3
 8009096:	b909      	cbnz	r1, 800909c <__lo0bits+0x32>
 8009098:	3008      	adds	r0, #8
 800909a:	0a1b      	lsrs	r3, r3, #8
 800909c:	0719      	lsls	r1, r3, #28
 800909e:	bf04      	itt	eq
 80090a0:	091b      	lsreq	r3, r3, #4
 80090a2:	3004      	addeq	r0, #4
 80090a4:	0799      	lsls	r1, r3, #30
 80090a6:	bf04      	itt	eq
 80090a8:	089b      	lsreq	r3, r3, #2
 80090aa:	3002      	addeq	r0, #2
 80090ac:	07d9      	lsls	r1, r3, #31
 80090ae:	d403      	bmi.n	80090b8 <__lo0bits+0x4e>
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	f100 0001 	add.w	r0, r0, #1
 80090b6:	d003      	beq.n	80090c0 <__lo0bits+0x56>
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	4770      	bx	lr
 80090bc:	2000      	movs	r0, #0
 80090be:	4770      	bx	lr
 80090c0:	2020      	movs	r0, #32
 80090c2:	4770      	bx	lr

080090c4 <__i2b>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	460c      	mov	r4, r1
 80090c8:	2101      	movs	r1, #1
 80090ca:	f7ff ff07 	bl	8008edc <_Balloc>
 80090ce:	4602      	mov	r2, r0
 80090d0:	b928      	cbnz	r0, 80090de <__i2b+0x1a>
 80090d2:	f240 1145 	movw	r1, #325	@ 0x145
 80090d6:	4b04      	ldr	r3, [pc, #16]	@ (80090e8 <__i2b+0x24>)
 80090d8:	4804      	ldr	r0, [pc, #16]	@ (80090ec <__i2b+0x28>)
 80090da:	f000 fcb1 	bl	8009a40 <__assert_func>
 80090de:	2301      	movs	r3, #1
 80090e0:	6144      	str	r4, [r0, #20]
 80090e2:	6103      	str	r3, [r0, #16]
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	bf00      	nop
 80090e8:	0800a9b2 	.word	0x0800a9b2
 80090ec:	0800a9c3 	.word	0x0800a9c3

080090f0 <__multiply>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	4617      	mov	r7, r2
 80090f6:	690a      	ldr	r2, [r1, #16]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4689      	mov	r9, r1
 80090fc:	429a      	cmp	r2, r3
 80090fe:	bfa2      	ittt	ge
 8009100:	463b      	movge	r3, r7
 8009102:	460f      	movge	r7, r1
 8009104:	4699      	movge	r9, r3
 8009106:	693d      	ldr	r5, [r7, #16]
 8009108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	eb05 060a 	add.w	r6, r5, sl
 8009114:	42b3      	cmp	r3, r6
 8009116:	b085      	sub	sp, #20
 8009118:	bfb8      	it	lt
 800911a:	3101      	addlt	r1, #1
 800911c:	f7ff fede 	bl	8008edc <_Balloc>
 8009120:	b930      	cbnz	r0, 8009130 <__multiply+0x40>
 8009122:	4602      	mov	r2, r0
 8009124:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009128:	4b40      	ldr	r3, [pc, #256]	@ (800922c <__multiply+0x13c>)
 800912a:	4841      	ldr	r0, [pc, #260]	@ (8009230 <__multiply+0x140>)
 800912c:	f000 fc88 	bl	8009a40 <__assert_func>
 8009130:	f100 0414 	add.w	r4, r0, #20
 8009134:	4623      	mov	r3, r4
 8009136:	2200      	movs	r2, #0
 8009138:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800913c:	4573      	cmp	r3, lr
 800913e:	d320      	bcc.n	8009182 <__multiply+0x92>
 8009140:	f107 0814 	add.w	r8, r7, #20
 8009144:	f109 0114 	add.w	r1, r9, #20
 8009148:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800914c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009150:	9302      	str	r3, [sp, #8]
 8009152:	1beb      	subs	r3, r5, r7
 8009154:	3b15      	subs	r3, #21
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	3304      	adds	r3, #4
 800915c:	3715      	adds	r7, #21
 800915e:	42bd      	cmp	r5, r7
 8009160:	bf38      	it	cc
 8009162:	2304      	movcc	r3, #4
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	9b02      	ldr	r3, [sp, #8]
 8009168:	9103      	str	r1, [sp, #12]
 800916a:	428b      	cmp	r3, r1
 800916c:	d80c      	bhi.n	8009188 <__multiply+0x98>
 800916e:	2e00      	cmp	r6, #0
 8009170:	dd03      	ble.n	800917a <__multiply+0x8a>
 8009172:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009176:	2b00      	cmp	r3, #0
 8009178:	d055      	beq.n	8009226 <__multiply+0x136>
 800917a:	6106      	str	r6, [r0, #16]
 800917c:	b005      	add	sp, #20
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	f843 2b04 	str.w	r2, [r3], #4
 8009186:	e7d9      	b.n	800913c <__multiply+0x4c>
 8009188:	f8b1 a000 	ldrh.w	sl, [r1]
 800918c:	f1ba 0f00 	cmp.w	sl, #0
 8009190:	d01f      	beq.n	80091d2 <__multiply+0xe2>
 8009192:	46c4      	mov	ip, r8
 8009194:	46a1      	mov	r9, r4
 8009196:	2700      	movs	r7, #0
 8009198:	f85c 2b04 	ldr.w	r2, [ip], #4
 800919c:	f8d9 3000 	ldr.w	r3, [r9]
 80091a0:	fa1f fb82 	uxth.w	fp, r2
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80091aa:	443b      	add	r3, r7
 80091ac:	f8d9 7000 	ldr.w	r7, [r9]
 80091b0:	0c12      	lsrs	r2, r2, #16
 80091b2:	0c3f      	lsrs	r7, r7, #16
 80091b4:	fb0a 7202 	mla	r2, sl, r2, r7
 80091b8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80091bc:	b29b      	uxth	r3, r3
 80091be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091c2:	4565      	cmp	r5, ip
 80091c4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80091c8:	f849 3b04 	str.w	r3, [r9], #4
 80091cc:	d8e4      	bhi.n	8009198 <__multiply+0xa8>
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	50e7      	str	r7, [r4, r3]
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	3104      	adds	r1, #4
 80091d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091da:	f1b9 0f00 	cmp.w	r9, #0
 80091de:	d020      	beq.n	8009222 <__multiply+0x132>
 80091e0:	4647      	mov	r7, r8
 80091e2:	46a4      	mov	ip, r4
 80091e4:	f04f 0a00 	mov.w	sl, #0
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	f8b7 b000 	ldrh.w	fp, [r7]
 80091ee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	fb09 220b 	mla	r2, r9, fp, r2
 80091f8:	4452      	add	r2, sl
 80091fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009202:	f857 3b04 	ldr.w	r3, [r7], #4
 8009206:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800920a:	f8bc 3000 	ldrh.w	r3, [ip]
 800920e:	42bd      	cmp	r5, r7
 8009210:	fb09 330a 	mla	r3, r9, sl, r3
 8009214:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800921c:	d8e5      	bhi.n	80091ea <__multiply+0xfa>
 800921e:	9a01      	ldr	r2, [sp, #4]
 8009220:	50a3      	str	r3, [r4, r2]
 8009222:	3404      	adds	r4, #4
 8009224:	e79f      	b.n	8009166 <__multiply+0x76>
 8009226:	3e01      	subs	r6, #1
 8009228:	e7a1      	b.n	800916e <__multiply+0x7e>
 800922a:	bf00      	nop
 800922c:	0800a9b2 	.word	0x0800a9b2
 8009230:	0800a9c3 	.word	0x0800a9c3

08009234 <__pow5mult>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4615      	mov	r5, r2
 800923a:	f012 0203 	ands.w	r2, r2, #3
 800923e:	4607      	mov	r7, r0
 8009240:	460e      	mov	r6, r1
 8009242:	d007      	beq.n	8009254 <__pow5mult+0x20>
 8009244:	4c25      	ldr	r4, [pc, #148]	@ (80092dc <__pow5mult+0xa8>)
 8009246:	3a01      	subs	r2, #1
 8009248:	2300      	movs	r3, #0
 800924a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800924e:	f7ff fea7 	bl	8008fa0 <__multadd>
 8009252:	4606      	mov	r6, r0
 8009254:	10ad      	asrs	r5, r5, #2
 8009256:	d03d      	beq.n	80092d4 <__pow5mult+0xa0>
 8009258:	69fc      	ldr	r4, [r7, #28]
 800925a:	b97c      	cbnz	r4, 800927c <__pow5mult+0x48>
 800925c:	2010      	movs	r0, #16
 800925e:	f7ff fd87 	bl	8008d70 <malloc>
 8009262:	4602      	mov	r2, r0
 8009264:	61f8      	str	r0, [r7, #28]
 8009266:	b928      	cbnz	r0, 8009274 <__pow5mult+0x40>
 8009268:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800926c:	4b1c      	ldr	r3, [pc, #112]	@ (80092e0 <__pow5mult+0xac>)
 800926e:	481d      	ldr	r0, [pc, #116]	@ (80092e4 <__pow5mult+0xb0>)
 8009270:	f000 fbe6 	bl	8009a40 <__assert_func>
 8009274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009278:	6004      	str	r4, [r0, #0]
 800927a:	60c4      	str	r4, [r0, #12]
 800927c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009284:	b94c      	cbnz	r4, 800929a <__pow5mult+0x66>
 8009286:	f240 2171 	movw	r1, #625	@ 0x271
 800928a:	4638      	mov	r0, r7
 800928c:	f7ff ff1a 	bl	80090c4 <__i2b>
 8009290:	2300      	movs	r3, #0
 8009292:	4604      	mov	r4, r0
 8009294:	f8c8 0008 	str.w	r0, [r8, #8]
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	f04f 0900 	mov.w	r9, #0
 800929e:	07eb      	lsls	r3, r5, #31
 80092a0:	d50a      	bpl.n	80092b8 <__pow5mult+0x84>
 80092a2:	4631      	mov	r1, r6
 80092a4:	4622      	mov	r2, r4
 80092a6:	4638      	mov	r0, r7
 80092a8:	f7ff ff22 	bl	80090f0 <__multiply>
 80092ac:	4680      	mov	r8, r0
 80092ae:	4631      	mov	r1, r6
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7ff fe53 	bl	8008f5c <_Bfree>
 80092b6:	4646      	mov	r6, r8
 80092b8:	106d      	asrs	r5, r5, #1
 80092ba:	d00b      	beq.n	80092d4 <__pow5mult+0xa0>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	b938      	cbnz	r0, 80092d0 <__pow5mult+0x9c>
 80092c0:	4622      	mov	r2, r4
 80092c2:	4621      	mov	r1, r4
 80092c4:	4638      	mov	r0, r7
 80092c6:	f7ff ff13 	bl	80090f0 <__multiply>
 80092ca:	6020      	str	r0, [r4, #0]
 80092cc:	f8c0 9000 	str.w	r9, [r0]
 80092d0:	4604      	mov	r4, r0
 80092d2:	e7e4      	b.n	800929e <__pow5mult+0x6a>
 80092d4:	4630      	mov	r0, r6
 80092d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092da:	bf00      	nop
 80092dc:	0800aa74 	.word	0x0800aa74
 80092e0:	0800a943 	.word	0x0800a943
 80092e4:	0800a9c3 	.word	0x0800a9c3

080092e8 <__lshift>:
 80092e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	460c      	mov	r4, r1
 80092ee:	4607      	mov	r7, r0
 80092f0:	4691      	mov	r9, r2
 80092f2:	6923      	ldr	r3, [r4, #16]
 80092f4:	6849      	ldr	r1, [r1, #4]
 80092f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092fa:	68a3      	ldr	r3, [r4, #8]
 80092fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009300:	f108 0601 	add.w	r6, r8, #1
 8009304:	42b3      	cmp	r3, r6
 8009306:	db0b      	blt.n	8009320 <__lshift+0x38>
 8009308:	4638      	mov	r0, r7
 800930a:	f7ff fde7 	bl	8008edc <_Balloc>
 800930e:	4605      	mov	r5, r0
 8009310:	b948      	cbnz	r0, 8009326 <__lshift+0x3e>
 8009312:	4602      	mov	r2, r0
 8009314:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009318:	4b27      	ldr	r3, [pc, #156]	@ (80093b8 <__lshift+0xd0>)
 800931a:	4828      	ldr	r0, [pc, #160]	@ (80093bc <__lshift+0xd4>)
 800931c:	f000 fb90 	bl	8009a40 <__assert_func>
 8009320:	3101      	adds	r1, #1
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	e7ee      	b.n	8009304 <__lshift+0x1c>
 8009326:	2300      	movs	r3, #0
 8009328:	f100 0114 	add.w	r1, r0, #20
 800932c:	f100 0210 	add.w	r2, r0, #16
 8009330:	4618      	mov	r0, r3
 8009332:	4553      	cmp	r3, sl
 8009334:	db33      	blt.n	800939e <__lshift+0xb6>
 8009336:	6920      	ldr	r0, [r4, #16]
 8009338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800933c:	f104 0314 	add.w	r3, r4, #20
 8009340:	f019 091f 	ands.w	r9, r9, #31
 8009344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800934c:	d02b      	beq.n	80093a6 <__lshift+0xbe>
 800934e:	468a      	mov	sl, r1
 8009350:	2200      	movs	r2, #0
 8009352:	f1c9 0e20 	rsb	lr, r9, #32
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	fa00 f009 	lsl.w	r0, r0, r9
 800935c:	4310      	orrs	r0, r2
 800935e:	f84a 0b04 	str.w	r0, [sl], #4
 8009362:	f853 2b04 	ldr.w	r2, [r3], #4
 8009366:	459c      	cmp	ip, r3
 8009368:	fa22 f20e 	lsr.w	r2, r2, lr
 800936c:	d8f3      	bhi.n	8009356 <__lshift+0x6e>
 800936e:	ebac 0304 	sub.w	r3, ip, r4
 8009372:	3b15      	subs	r3, #21
 8009374:	f023 0303 	bic.w	r3, r3, #3
 8009378:	3304      	adds	r3, #4
 800937a:	f104 0015 	add.w	r0, r4, #21
 800937e:	4560      	cmp	r0, ip
 8009380:	bf88      	it	hi
 8009382:	2304      	movhi	r3, #4
 8009384:	50ca      	str	r2, [r1, r3]
 8009386:	b10a      	cbz	r2, 800938c <__lshift+0xa4>
 8009388:	f108 0602 	add.w	r6, r8, #2
 800938c:	3e01      	subs	r6, #1
 800938e:	4638      	mov	r0, r7
 8009390:	4621      	mov	r1, r4
 8009392:	612e      	str	r6, [r5, #16]
 8009394:	f7ff fde2 	bl	8008f5c <_Bfree>
 8009398:	4628      	mov	r0, r5
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939e:	f842 0f04 	str.w	r0, [r2, #4]!
 80093a2:	3301      	adds	r3, #1
 80093a4:	e7c5      	b.n	8009332 <__lshift+0x4a>
 80093a6:	3904      	subs	r1, #4
 80093a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ac:	459c      	cmp	ip, r3
 80093ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80093b2:	d8f9      	bhi.n	80093a8 <__lshift+0xc0>
 80093b4:	e7ea      	b.n	800938c <__lshift+0xa4>
 80093b6:	bf00      	nop
 80093b8:	0800a9b2 	.word	0x0800a9b2
 80093bc:	0800a9c3 	.word	0x0800a9c3

080093c0 <__mcmp>:
 80093c0:	4603      	mov	r3, r0
 80093c2:	690a      	ldr	r2, [r1, #16]
 80093c4:	6900      	ldr	r0, [r0, #16]
 80093c6:	b530      	push	{r4, r5, lr}
 80093c8:	1a80      	subs	r0, r0, r2
 80093ca:	d10e      	bne.n	80093ea <__mcmp+0x2a>
 80093cc:	3314      	adds	r3, #20
 80093ce:	3114      	adds	r1, #20
 80093d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093e0:	4295      	cmp	r5, r2
 80093e2:	d003      	beq.n	80093ec <__mcmp+0x2c>
 80093e4:	d205      	bcs.n	80093f2 <__mcmp+0x32>
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	bd30      	pop	{r4, r5, pc}
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	d3f3      	bcc.n	80093d8 <__mcmp+0x18>
 80093f0:	e7fb      	b.n	80093ea <__mcmp+0x2a>
 80093f2:	2001      	movs	r0, #1
 80093f4:	e7f9      	b.n	80093ea <__mcmp+0x2a>
	...

080093f8 <__mdiff>:
 80093f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4689      	mov	r9, r1
 80093fe:	4606      	mov	r6, r0
 8009400:	4611      	mov	r1, r2
 8009402:	4648      	mov	r0, r9
 8009404:	4614      	mov	r4, r2
 8009406:	f7ff ffdb 	bl	80093c0 <__mcmp>
 800940a:	1e05      	subs	r5, r0, #0
 800940c:	d112      	bne.n	8009434 <__mdiff+0x3c>
 800940e:	4629      	mov	r1, r5
 8009410:	4630      	mov	r0, r6
 8009412:	f7ff fd63 	bl	8008edc <_Balloc>
 8009416:	4602      	mov	r2, r0
 8009418:	b928      	cbnz	r0, 8009426 <__mdiff+0x2e>
 800941a:	f240 2137 	movw	r1, #567	@ 0x237
 800941e:	4b3e      	ldr	r3, [pc, #248]	@ (8009518 <__mdiff+0x120>)
 8009420:	483e      	ldr	r0, [pc, #248]	@ (800951c <__mdiff+0x124>)
 8009422:	f000 fb0d 	bl	8009a40 <__assert_func>
 8009426:	2301      	movs	r3, #1
 8009428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800942c:	4610      	mov	r0, r2
 800942e:	b003      	add	sp, #12
 8009430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009434:	bfbc      	itt	lt
 8009436:	464b      	movlt	r3, r9
 8009438:	46a1      	movlt	r9, r4
 800943a:	4630      	mov	r0, r6
 800943c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009440:	bfba      	itte	lt
 8009442:	461c      	movlt	r4, r3
 8009444:	2501      	movlt	r5, #1
 8009446:	2500      	movge	r5, #0
 8009448:	f7ff fd48 	bl	8008edc <_Balloc>
 800944c:	4602      	mov	r2, r0
 800944e:	b918      	cbnz	r0, 8009458 <__mdiff+0x60>
 8009450:	f240 2145 	movw	r1, #581	@ 0x245
 8009454:	4b30      	ldr	r3, [pc, #192]	@ (8009518 <__mdiff+0x120>)
 8009456:	e7e3      	b.n	8009420 <__mdiff+0x28>
 8009458:	f100 0b14 	add.w	fp, r0, #20
 800945c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009460:	f109 0310 	add.w	r3, r9, #16
 8009464:	60c5      	str	r5, [r0, #12]
 8009466:	f04f 0c00 	mov.w	ip, #0
 800946a:	f109 0514 	add.w	r5, r9, #20
 800946e:	46d9      	mov	r9, fp
 8009470:	6926      	ldr	r6, [r4, #16]
 8009472:	f104 0e14 	add.w	lr, r4, #20
 8009476:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800947a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009486:	f853 af04 	ldr.w	sl, [r3, #4]!
 800948a:	b281      	uxth	r1, r0
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	fa1f f38a 	uxth.w	r3, sl
 8009492:	1a5b      	subs	r3, r3, r1
 8009494:	0c00      	lsrs	r0, r0, #16
 8009496:	4463      	add	r3, ip
 8009498:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800949c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094a6:	4576      	cmp	r6, lr
 80094a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094ac:	f849 3b04 	str.w	r3, [r9], #4
 80094b0:	d8e6      	bhi.n	8009480 <__mdiff+0x88>
 80094b2:	1b33      	subs	r3, r6, r4
 80094b4:	3b15      	subs	r3, #21
 80094b6:	f023 0303 	bic.w	r3, r3, #3
 80094ba:	3415      	adds	r4, #21
 80094bc:	3304      	adds	r3, #4
 80094be:	42a6      	cmp	r6, r4
 80094c0:	bf38      	it	cc
 80094c2:	2304      	movcc	r3, #4
 80094c4:	441d      	add	r5, r3
 80094c6:	445b      	add	r3, fp
 80094c8:	461e      	mov	r6, r3
 80094ca:	462c      	mov	r4, r5
 80094cc:	4544      	cmp	r4, r8
 80094ce:	d30e      	bcc.n	80094ee <__mdiff+0xf6>
 80094d0:	f108 0103 	add.w	r1, r8, #3
 80094d4:	1b49      	subs	r1, r1, r5
 80094d6:	f021 0103 	bic.w	r1, r1, #3
 80094da:	3d03      	subs	r5, #3
 80094dc:	45a8      	cmp	r8, r5
 80094de:	bf38      	it	cc
 80094e0:	2100      	movcc	r1, #0
 80094e2:	440b      	add	r3, r1
 80094e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094e8:	b199      	cbz	r1, 8009512 <__mdiff+0x11a>
 80094ea:	6117      	str	r7, [r2, #16]
 80094ec:	e79e      	b.n	800942c <__mdiff+0x34>
 80094ee:	46e6      	mov	lr, ip
 80094f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80094f4:	fa1f fc81 	uxth.w	ip, r1
 80094f8:	44f4      	add	ip, lr
 80094fa:	0c08      	lsrs	r0, r1, #16
 80094fc:	4471      	add	r1, lr
 80094fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009502:	b289      	uxth	r1, r1
 8009504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009508:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800950c:	f846 1b04 	str.w	r1, [r6], #4
 8009510:	e7dc      	b.n	80094cc <__mdiff+0xd4>
 8009512:	3f01      	subs	r7, #1
 8009514:	e7e6      	b.n	80094e4 <__mdiff+0xec>
 8009516:	bf00      	nop
 8009518:	0800a9b2 	.word	0x0800a9b2
 800951c:	0800a9c3 	.word	0x0800a9c3

08009520 <__d2b>:
 8009520:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009524:	2101      	movs	r1, #1
 8009526:	4690      	mov	r8, r2
 8009528:	4699      	mov	r9, r3
 800952a:	9e08      	ldr	r6, [sp, #32]
 800952c:	f7ff fcd6 	bl	8008edc <_Balloc>
 8009530:	4604      	mov	r4, r0
 8009532:	b930      	cbnz	r0, 8009542 <__d2b+0x22>
 8009534:	4602      	mov	r2, r0
 8009536:	f240 310f 	movw	r1, #783	@ 0x30f
 800953a:	4b23      	ldr	r3, [pc, #140]	@ (80095c8 <__d2b+0xa8>)
 800953c:	4823      	ldr	r0, [pc, #140]	@ (80095cc <__d2b+0xac>)
 800953e:	f000 fa7f 	bl	8009a40 <__assert_func>
 8009542:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009546:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800954a:	b10d      	cbz	r5, 8009550 <__d2b+0x30>
 800954c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	f1b8 0300 	subs.w	r3, r8, #0
 8009556:	d024      	beq.n	80095a2 <__d2b+0x82>
 8009558:	4668      	mov	r0, sp
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	f7ff fd85 	bl	800906a <__lo0bits>
 8009560:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009564:	b1d8      	cbz	r0, 800959e <__d2b+0x7e>
 8009566:	f1c0 0320 	rsb	r3, r0, #32
 800956a:	fa02 f303 	lsl.w	r3, r2, r3
 800956e:	430b      	orrs	r3, r1
 8009570:	40c2      	lsrs	r2, r0
 8009572:	6163      	str	r3, [r4, #20]
 8009574:	9201      	str	r2, [sp, #4]
 8009576:	9b01      	ldr	r3, [sp, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf0c      	ite	eq
 800957c:	2201      	moveq	r2, #1
 800957e:	2202      	movne	r2, #2
 8009580:	61a3      	str	r3, [r4, #24]
 8009582:	6122      	str	r2, [r4, #16]
 8009584:	b1ad      	cbz	r5, 80095b2 <__d2b+0x92>
 8009586:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800958a:	4405      	add	r5, r0
 800958c:	6035      	str	r5, [r6, #0]
 800958e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009594:	6018      	str	r0, [r3, #0]
 8009596:	4620      	mov	r0, r4
 8009598:	b002      	add	sp, #8
 800959a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800959e:	6161      	str	r1, [r4, #20]
 80095a0:	e7e9      	b.n	8009576 <__d2b+0x56>
 80095a2:	a801      	add	r0, sp, #4
 80095a4:	f7ff fd61 	bl	800906a <__lo0bits>
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	6163      	str	r3, [r4, #20]
 80095ae:	3020      	adds	r0, #32
 80095b0:	e7e7      	b.n	8009582 <__d2b+0x62>
 80095b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80095b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095ba:	6030      	str	r0, [r6, #0]
 80095bc:	6918      	ldr	r0, [r3, #16]
 80095be:	f7ff fd35 	bl	800902c <__hi0bits>
 80095c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095c6:	e7e4      	b.n	8009592 <__d2b+0x72>
 80095c8:	0800a9b2 	.word	0x0800a9b2
 80095cc:	0800a9c3 	.word	0x0800a9c3

080095d0 <__ssputs_r>:
 80095d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	461f      	mov	r7, r3
 80095d6:	688e      	ldr	r6, [r1, #8]
 80095d8:	4682      	mov	sl, r0
 80095da:	42be      	cmp	r6, r7
 80095dc:	460c      	mov	r4, r1
 80095de:	4690      	mov	r8, r2
 80095e0:	680b      	ldr	r3, [r1, #0]
 80095e2:	d82d      	bhi.n	8009640 <__ssputs_r+0x70>
 80095e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095ec:	d026      	beq.n	800963c <__ssputs_r+0x6c>
 80095ee:	6965      	ldr	r5, [r4, #20]
 80095f0:	6909      	ldr	r1, [r1, #16]
 80095f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f6:	eba3 0901 	sub.w	r9, r3, r1
 80095fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095fe:	1c7b      	adds	r3, r7, #1
 8009600:	444b      	add	r3, r9
 8009602:	106d      	asrs	r5, r5, #1
 8009604:	429d      	cmp	r5, r3
 8009606:	bf38      	it	cc
 8009608:	461d      	movcc	r5, r3
 800960a:	0553      	lsls	r3, r2, #21
 800960c:	d527      	bpl.n	800965e <__ssputs_r+0x8e>
 800960e:	4629      	mov	r1, r5
 8009610:	f7ff fbd8 	bl	8008dc4 <_malloc_r>
 8009614:	4606      	mov	r6, r0
 8009616:	b360      	cbz	r0, 8009672 <__ssputs_r+0xa2>
 8009618:	464a      	mov	r2, r9
 800961a:	6921      	ldr	r1, [r4, #16]
 800961c:	f000 fa02 	bl	8009a24 <memcpy>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	6126      	str	r6, [r4, #16]
 800962e:	444e      	add	r6, r9
 8009630:	6026      	str	r6, [r4, #0]
 8009632:	463e      	mov	r6, r7
 8009634:	6165      	str	r5, [r4, #20]
 8009636:	eba5 0509 	sub.w	r5, r5, r9
 800963a:	60a5      	str	r5, [r4, #8]
 800963c:	42be      	cmp	r6, r7
 800963e:	d900      	bls.n	8009642 <__ssputs_r+0x72>
 8009640:	463e      	mov	r6, r7
 8009642:	4632      	mov	r2, r6
 8009644:	4641      	mov	r1, r8
 8009646:	6820      	ldr	r0, [r4, #0]
 8009648:	f000 f9c2 	bl	80099d0 <memmove>
 800964c:	2000      	movs	r0, #0
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	1b9b      	subs	r3, r3, r6
 8009652:	60a3      	str	r3, [r4, #8]
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	4433      	add	r3, r6
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965e:	462a      	mov	r2, r5
 8009660:	f000 fa32 	bl	8009ac8 <_realloc_r>
 8009664:	4606      	mov	r6, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d1e0      	bne.n	800962c <__ssputs_r+0x5c>
 800966a:	4650      	mov	r0, sl
 800966c:	6921      	ldr	r1, [r4, #16]
 800966e:	f7ff fb37 	bl	8008ce0 <_free_r>
 8009672:	230c      	movs	r3, #12
 8009674:	f8ca 3000 	str.w	r3, [sl]
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	e7e9      	b.n	800965a <__ssputs_r+0x8a>
	...

08009688 <_svfiprintf_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4698      	mov	r8, r3
 800968e:	898b      	ldrh	r3, [r1, #12]
 8009690:	4607      	mov	r7, r0
 8009692:	061b      	lsls	r3, r3, #24
 8009694:	460d      	mov	r5, r1
 8009696:	4614      	mov	r4, r2
 8009698:	b09d      	sub	sp, #116	@ 0x74
 800969a:	d510      	bpl.n	80096be <_svfiprintf_r+0x36>
 800969c:	690b      	ldr	r3, [r1, #16]
 800969e:	b973      	cbnz	r3, 80096be <_svfiprintf_r+0x36>
 80096a0:	2140      	movs	r1, #64	@ 0x40
 80096a2:	f7ff fb8f 	bl	8008dc4 <_malloc_r>
 80096a6:	6028      	str	r0, [r5, #0]
 80096a8:	6128      	str	r0, [r5, #16]
 80096aa:	b930      	cbnz	r0, 80096ba <_svfiprintf_r+0x32>
 80096ac:	230c      	movs	r3, #12
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	b01d      	add	sp, #116	@ 0x74
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	2340      	movs	r3, #64	@ 0x40
 80096bc:	616b      	str	r3, [r5, #20]
 80096be:	2300      	movs	r3, #0
 80096c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c2:	2320      	movs	r3, #32
 80096c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096c8:	2330      	movs	r3, #48	@ 0x30
 80096ca:	f04f 0901 	mov.w	r9, #1
 80096ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80096d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800986c <_svfiprintf_r+0x1e4>
 80096d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096da:	4623      	mov	r3, r4
 80096dc:	469a      	mov	sl, r3
 80096de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e2:	b10a      	cbz	r2, 80096e8 <_svfiprintf_r+0x60>
 80096e4:	2a25      	cmp	r2, #37	@ 0x25
 80096e6:	d1f9      	bne.n	80096dc <_svfiprintf_r+0x54>
 80096e8:	ebba 0b04 	subs.w	fp, sl, r4
 80096ec:	d00b      	beq.n	8009706 <_svfiprintf_r+0x7e>
 80096ee:	465b      	mov	r3, fp
 80096f0:	4622      	mov	r2, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff ff6b 	bl	80095d0 <__ssputs_r>
 80096fa:	3001      	adds	r0, #1
 80096fc:	f000 80a7 	beq.w	800984e <_svfiprintf_r+0x1c6>
 8009700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009702:	445a      	add	r2, fp
 8009704:	9209      	str	r2, [sp, #36]	@ 0x24
 8009706:	f89a 3000 	ldrb.w	r3, [sl]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 809f 	beq.w	800984e <_svfiprintf_r+0x1c6>
 8009710:	2300      	movs	r3, #0
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800971a:	f10a 0a01 	add.w	sl, sl, #1
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	9307      	str	r3, [sp, #28]
 8009722:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009726:	931a      	str	r3, [sp, #104]	@ 0x68
 8009728:	4654      	mov	r4, sl
 800972a:	2205      	movs	r2, #5
 800972c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009730:	484e      	ldr	r0, [pc, #312]	@ (800986c <_svfiprintf_r+0x1e4>)
 8009732:	f7fe fc68 	bl	8008006 <memchr>
 8009736:	9a04      	ldr	r2, [sp, #16]
 8009738:	b9d8      	cbnz	r0, 8009772 <_svfiprintf_r+0xea>
 800973a:	06d0      	lsls	r0, r2, #27
 800973c:	bf44      	itt	mi
 800973e:	2320      	movmi	r3, #32
 8009740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009744:	0711      	lsls	r1, r2, #28
 8009746:	bf44      	itt	mi
 8009748:	232b      	movmi	r3, #43	@ 0x2b
 800974a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800974e:	f89a 3000 	ldrb.w	r3, [sl]
 8009752:	2b2a      	cmp	r3, #42	@ 0x2a
 8009754:	d015      	beq.n	8009782 <_svfiprintf_r+0xfa>
 8009756:	4654      	mov	r4, sl
 8009758:	2000      	movs	r0, #0
 800975a:	f04f 0c0a 	mov.w	ip, #10
 800975e:	9a07      	ldr	r2, [sp, #28]
 8009760:	4621      	mov	r1, r4
 8009762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009766:	3b30      	subs	r3, #48	@ 0x30
 8009768:	2b09      	cmp	r3, #9
 800976a:	d94b      	bls.n	8009804 <_svfiprintf_r+0x17c>
 800976c:	b1b0      	cbz	r0, 800979c <_svfiprintf_r+0x114>
 800976e:	9207      	str	r2, [sp, #28]
 8009770:	e014      	b.n	800979c <_svfiprintf_r+0x114>
 8009772:	eba0 0308 	sub.w	r3, r0, r8
 8009776:	fa09 f303 	lsl.w	r3, r9, r3
 800977a:	4313      	orrs	r3, r2
 800977c:	46a2      	mov	sl, r4
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	e7d2      	b.n	8009728 <_svfiprintf_r+0xa0>
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	1d19      	adds	r1, r3, #4
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	9103      	str	r1, [sp, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	bfbb      	ittet	lt
 800978e:	425b      	neglt	r3, r3
 8009790:	f042 0202 	orrlt.w	r2, r2, #2
 8009794:	9307      	strge	r3, [sp, #28]
 8009796:	9307      	strlt	r3, [sp, #28]
 8009798:	bfb8      	it	lt
 800979a:	9204      	strlt	r2, [sp, #16]
 800979c:	7823      	ldrb	r3, [r4, #0]
 800979e:	2b2e      	cmp	r3, #46	@ 0x2e
 80097a0:	d10a      	bne.n	80097b8 <_svfiprintf_r+0x130>
 80097a2:	7863      	ldrb	r3, [r4, #1]
 80097a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80097a6:	d132      	bne.n	800980e <_svfiprintf_r+0x186>
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	3402      	adds	r4, #2
 80097ac:	1d1a      	adds	r2, r3, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	9203      	str	r2, [sp, #12]
 80097b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009870 <_svfiprintf_r+0x1e8>
 80097bc:	2203      	movs	r2, #3
 80097be:	4650      	mov	r0, sl
 80097c0:	7821      	ldrb	r1, [r4, #0]
 80097c2:	f7fe fc20 	bl	8008006 <memchr>
 80097c6:	b138      	cbz	r0, 80097d8 <_svfiprintf_r+0x150>
 80097c8:	2240      	movs	r2, #64	@ 0x40
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	eba0 000a 	sub.w	r0, r0, sl
 80097d0:	4082      	lsls	r2, r0
 80097d2:	4313      	orrs	r3, r2
 80097d4:	3401      	adds	r4, #1
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097dc:	2206      	movs	r2, #6
 80097de:	4825      	ldr	r0, [pc, #148]	@ (8009874 <_svfiprintf_r+0x1ec>)
 80097e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097e4:	f7fe fc0f 	bl	8008006 <memchr>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d036      	beq.n	800985a <_svfiprintf_r+0x1d2>
 80097ec:	4b22      	ldr	r3, [pc, #136]	@ (8009878 <_svfiprintf_r+0x1f0>)
 80097ee:	bb1b      	cbnz	r3, 8009838 <_svfiprintf_r+0x1b0>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	3307      	adds	r3, #7
 80097f4:	f023 0307 	bic.w	r3, r3, #7
 80097f8:	3308      	adds	r3, #8
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fe:	4433      	add	r3, r6
 8009800:	9309      	str	r3, [sp, #36]	@ 0x24
 8009802:	e76a      	b.n	80096da <_svfiprintf_r+0x52>
 8009804:	460c      	mov	r4, r1
 8009806:	2001      	movs	r0, #1
 8009808:	fb0c 3202 	mla	r2, ip, r2, r3
 800980c:	e7a8      	b.n	8009760 <_svfiprintf_r+0xd8>
 800980e:	2300      	movs	r3, #0
 8009810:	f04f 0c0a 	mov.w	ip, #10
 8009814:	4619      	mov	r1, r3
 8009816:	3401      	adds	r4, #1
 8009818:	9305      	str	r3, [sp, #20]
 800981a:	4620      	mov	r0, r4
 800981c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009820:	3a30      	subs	r2, #48	@ 0x30
 8009822:	2a09      	cmp	r2, #9
 8009824:	d903      	bls.n	800982e <_svfiprintf_r+0x1a6>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0c6      	beq.n	80097b8 <_svfiprintf_r+0x130>
 800982a:	9105      	str	r1, [sp, #20]
 800982c:	e7c4      	b.n	80097b8 <_svfiprintf_r+0x130>
 800982e:	4604      	mov	r4, r0
 8009830:	2301      	movs	r3, #1
 8009832:	fb0c 2101 	mla	r1, ip, r1, r2
 8009836:	e7f0      	b.n	800981a <_svfiprintf_r+0x192>
 8009838:	ab03      	add	r3, sp, #12
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	462a      	mov	r2, r5
 800983e:	4638      	mov	r0, r7
 8009840:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <_svfiprintf_r+0x1f4>)
 8009842:	a904      	add	r1, sp, #16
 8009844:	f7fd fe7c 	bl	8007540 <_printf_float>
 8009848:	1c42      	adds	r2, r0, #1
 800984a:	4606      	mov	r6, r0
 800984c:	d1d6      	bne.n	80097fc <_svfiprintf_r+0x174>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	065b      	lsls	r3, r3, #25
 8009852:	f53f af2d 	bmi.w	80096b0 <_svfiprintf_r+0x28>
 8009856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009858:	e72c      	b.n	80096b4 <_svfiprintf_r+0x2c>
 800985a:	ab03      	add	r3, sp, #12
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	462a      	mov	r2, r5
 8009860:	4638      	mov	r0, r7
 8009862:	4b06      	ldr	r3, [pc, #24]	@ (800987c <_svfiprintf_r+0x1f4>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	f7fe f909 	bl	8007a7c <_printf_i>
 800986a:	e7ed      	b.n	8009848 <_svfiprintf_r+0x1c0>
 800986c:	0800aa1c 	.word	0x0800aa1c
 8009870:	0800aa22 	.word	0x0800aa22
 8009874:	0800aa26 	.word	0x0800aa26
 8009878:	08007541 	.word	0x08007541
 800987c:	080095d1 	.word	0x080095d1

08009880 <__sflush_r>:
 8009880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	0716      	lsls	r6, r2, #28
 8009888:	4605      	mov	r5, r0
 800988a:	460c      	mov	r4, r1
 800988c:	d454      	bmi.n	8009938 <__sflush_r+0xb8>
 800988e:	684b      	ldr	r3, [r1, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	dc02      	bgt.n	800989a <__sflush_r+0x1a>
 8009894:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	dd48      	ble.n	800992c <__sflush_r+0xac>
 800989a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800989c:	2e00      	cmp	r6, #0
 800989e:	d045      	beq.n	800992c <__sflush_r+0xac>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098a6:	682f      	ldr	r7, [r5, #0]
 80098a8:	6a21      	ldr	r1, [r4, #32]
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	d030      	beq.n	8009910 <__sflush_r+0x90>
 80098ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	0759      	lsls	r1, r3, #29
 80098b4:	d505      	bpl.n	80098c2 <__sflush_r+0x42>
 80098b6:	6863      	ldr	r3, [r4, #4]
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098bc:	b10b      	cbz	r3, 80098c2 <__sflush_r+0x42>
 80098be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	4628      	mov	r0, r5
 80098c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098c8:	6a21      	ldr	r1, [r4, #32]
 80098ca:	47b0      	blx	r6
 80098cc:	1c43      	adds	r3, r0, #1
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	d106      	bne.n	80098e0 <__sflush_r+0x60>
 80098d2:	6829      	ldr	r1, [r5, #0]
 80098d4:	291d      	cmp	r1, #29
 80098d6:	d82b      	bhi.n	8009930 <__sflush_r+0xb0>
 80098d8:	4a28      	ldr	r2, [pc, #160]	@ (800997c <__sflush_r+0xfc>)
 80098da:	40ca      	lsrs	r2, r1
 80098dc:	07d6      	lsls	r6, r2, #31
 80098de:	d527      	bpl.n	8009930 <__sflush_r+0xb0>
 80098e0:	2200      	movs	r2, #0
 80098e2:	6062      	str	r2, [r4, #4]
 80098e4:	6922      	ldr	r2, [r4, #16]
 80098e6:	04d9      	lsls	r1, r3, #19
 80098e8:	6022      	str	r2, [r4, #0]
 80098ea:	d504      	bpl.n	80098f6 <__sflush_r+0x76>
 80098ec:	1c42      	adds	r2, r0, #1
 80098ee:	d101      	bne.n	80098f4 <__sflush_r+0x74>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b903      	cbnz	r3, 80098f6 <__sflush_r+0x76>
 80098f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80098f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098f8:	602f      	str	r7, [r5, #0]
 80098fa:	b1b9      	cbz	r1, 800992c <__sflush_r+0xac>
 80098fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009900:	4299      	cmp	r1, r3
 8009902:	d002      	beq.n	800990a <__sflush_r+0x8a>
 8009904:	4628      	mov	r0, r5
 8009906:	f7ff f9eb 	bl	8008ce0 <_free_r>
 800990a:	2300      	movs	r3, #0
 800990c:	6363      	str	r3, [r4, #52]	@ 0x34
 800990e:	e00d      	b.n	800992c <__sflush_r+0xac>
 8009910:	2301      	movs	r3, #1
 8009912:	4628      	mov	r0, r5
 8009914:	47b0      	blx	r6
 8009916:	4602      	mov	r2, r0
 8009918:	1c50      	adds	r0, r2, #1
 800991a:	d1c9      	bne.n	80098b0 <__sflush_r+0x30>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c6      	beq.n	80098b0 <__sflush_r+0x30>
 8009922:	2b1d      	cmp	r3, #29
 8009924:	d001      	beq.n	800992a <__sflush_r+0xaa>
 8009926:	2b16      	cmp	r3, #22
 8009928:	d11d      	bne.n	8009966 <__sflush_r+0xe6>
 800992a:	602f      	str	r7, [r5, #0]
 800992c:	2000      	movs	r0, #0
 800992e:	e021      	b.n	8009974 <__sflush_r+0xf4>
 8009930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009934:	b21b      	sxth	r3, r3
 8009936:	e01a      	b.n	800996e <__sflush_r+0xee>
 8009938:	690f      	ldr	r7, [r1, #16]
 800993a:	2f00      	cmp	r7, #0
 800993c:	d0f6      	beq.n	800992c <__sflush_r+0xac>
 800993e:	0793      	lsls	r3, r2, #30
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	bf08      	it	eq
 8009948:	694b      	ldreq	r3, [r1, #20]
 800994a:	1bf6      	subs	r6, r6, r7
 800994c:	600f      	str	r7, [r1, #0]
 800994e:	608b      	str	r3, [r1, #8]
 8009950:	2e00      	cmp	r6, #0
 8009952:	ddeb      	ble.n	800992c <__sflush_r+0xac>
 8009954:	4633      	mov	r3, r6
 8009956:	463a      	mov	r2, r7
 8009958:	4628      	mov	r0, r5
 800995a:	6a21      	ldr	r1, [r4, #32]
 800995c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009960:	47e0      	blx	ip
 8009962:	2800      	cmp	r0, #0
 8009964:	dc07      	bgt.n	8009976 <__sflush_r+0xf6>
 8009966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800996a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800996e:	f04f 30ff 	mov.w	r0, #4294967295
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009976:	4407      	add	r7, r0
 8009978:	1a36      	subs	r6, r6, r0
 800997a:	e7e9      	b.n	8009950 <__sflush_r+0xd0>
 800997c:	20400001 	.word	0x20400001

08009980 <_fflush_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	690b      	ldr	r3, [r1, #16]
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b913      	cbnz	r3, 8009990 <_fflush_r+0x10>
 800998a:	2500      	movs	r5, #0
 800998c:	4628      	mov	r0, r5
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	b118      	cbz	r0, 800999a <_fflush_r+0x1a>
 8009992:	6a03      	ldr	r3, [r0, #32]
 8009994:	b90b      	cbnz	r3, 800999a <_fflush_r+0x1a>
 8009996:	f7fe fa1b 	bl	8007dd0 <__sinit>
 800999a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f3      	beq.n	800998a <_fflush_r+0xa>
 80099a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099a4:	07d0      	lsls	r0, r2, #31
 80099a6:	d404      	bmi.n	80099b2 <_fflush_r+0x32>
 80099a8:	0599      	lsls	r1, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_fflush_r+0x32>
 80099ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ae:	f7fe fb28 	bl	8008002 <__retarget_lock_acquire_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7ff ff63 	bl	8009880 <__sflush_r>
 80099ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099bc:	4605      	mov	r5, r0
 80099be:	07da      	lsls	r2, r3, #31
 80099c0:	d4e4      	bmi.n	800998c <_fflush_r+0xc>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	059b      	lsls	r3, r3, #22
 80099c6:	d4e1      	bmi.n	800998c <_fflush_r+0xc>
 80099c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ca:	f7fe fb1b 	bl	8008004 <__retarget_lock_release_recursive>
 80099ce:	e7dd      	b.n	800998c <_fflush_r+0xc>

080099d0 <memmove>:
 80099d0:	4288      	cmp	r0, r1
 80099d2:	b510      	push	{r4, lr}
 80099d4:	eb01 0402 	add.w	r4, r1, r2
 80099d8:	d902      	bls.n	80099e0 <memmove+0x10>
 80099da:	4284      	cmp	r4, r0
 80099dc:	4623      	mov	r3, r4
 80099de:	d807      	bhi.n	80099f0 <memmove+0x20>
 80099e0:	1e43      	subs	r3, r0, #1
 80099e2:	42a1      	cmp	r1, r4
 80099e4:	d008      	beq.n	80099f8 <memmove+0x28>
 80099e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ee:	e7f8      	b.n	80099e2 <memmove+0x12>
 80099f0:	4601      	mov	r1, r0
 80099f2:	4402      	add	r2, r0
 80099f4:	428a      	cmp	r2, r1
 80099f6:	d100      	bne.n	80099fa <memmove+0x2a>
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a02:	e7f7      	b.n	80099f4 <memmove+0x24>

08009a04 <_sbrk_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4d05      	ldr	r5, [pc, #20]	@ (8009a20 <_sbrk_r+0x1c>)
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f9 f8b4 	bl	8002b7c <_sbrk>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_sbrk_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_sbrk_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	200009a4 	.word	0x200009a4

08009a24 <memcpy>:
 8009a24:	440a      	add	r2, r1
 8009a26:	4291      	cmp	r1, r2
 8009a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a2c:	d100      	bne.n	8009a30 <memcpy+0xc>
 8009a2e:	4770      	bx	lr
 8009a30:	b510      	push	{r4, lr}
 8009a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a36:	4291      	cmp	r1, r2
 8009a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a3c:	d1f9      	bne.n	8009a32 <memcpy+0xe>
 8009a3e:	bd10      	pop	{r4, pc}

08009a40 <__assert_func>:
 8009a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a42:	4614      	mov	r4, r2
 8009a44:	461a      	mov	r2, r3
 8009a46:	4b09      	ldr	r3, [pc, #36]	@ (8009a6c <__assert_func+0x2c>)
 8009a48:	4605      	mov	r5, r0
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68d8      	ldr	r0, [r3, #12]
 8009a4e:	b14c      	cbz	r4, 8009a64 <__assert_func+0x24>
 8009a50:	4b07      	ldr	r3, [pc, #28]	@ (8009a70 <__assert_func+0x30>)
 8009a52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a56:	9100      	str	r1, [sp, #0]
 8009a58:	462b      	mov	r3, r5
 8009a5a:	4906      	ldr	r1, [pc, #24]	@ (8009a74 <__assert_func+0x34>)
 8009a5c:	f000 f870 	bl	8009b40 <fiprintf>
 8009a60:	f000 f880 	bl	8009b64 <abort>
 8009a64:	4b04      	ldr	r3, [pc, #16]	@ (8009a78 <__assert_func+0x38>)
 8009a66:	461c      	mov	r4, r3
 8009a68:	e7f3      	b.n	8009a52 <__assert_func+0x12>
 8009a6a:	bf00      	nop
 8009a6c:	20000058 	.word	0x20000058
 8009a70:	0800aa37 	.word	0x0800aa37
 8009a74:	0800aa44 	.word	0x0800aa44
 8009a78:	0800aa72 	.word	0x0800aa72

08009a7c <_calloc_r>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	fba1 5402 	umull	r5, r4, r1, r2
 8009a82:	b934      	cbnz	r4, 8009a92 <_calloc_r+0x16>
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7ff f99d 	bl	8008dc4 <_malloc_r>
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	b928      	cbnz	r0, 8009a9a <_calloc_r+0x1e>
 8009a8e:	4630      	mov	r0, r6
 8009a90:	bd70      	pop	{r4, r5, r6, pc}
 8009a92:	220c      	movs	r2, #12
 8009a94:	2600      	movs	r6, #0
 8009a96:	6002      	str	r2, [r0, #0]
 8009a98:	e7f9      	b.n	8009a8e <_calloc_r+0x12>
 8009a9a:	462a      	mov	r2, r5
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f7fe fa32 	bl	8007f06 <memset>
 8009aa2:	e7f4      	b.n	8009a8e <_calloc_r+0x12>

08009aa4 <__ascii_mbtowc>:
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	b901      	cbnz	r1, 8009aaa <__ascii_mbtowc+0x6>
 8009aa8:	a901      	add	r1, sp, #4
 8009aaa:	b142      	cbz	r2, 8009abe <__ascii_mbtowc+0x1a>
 8009aac:	b14b      	cbz	r3, 8009ac2 <__ascii_mbtowc+0x1e>
 8009aae:	7813      	ldrb	r3, [r2, #0]
 8009ab0:	600b      	str	r3, [r1, #0]
 8009ab2:	7812      	ldrb	r2, [r2, #0]
 8009ab4:	1e10      	subs	r0, r2, #0
 8009ab6:	bf18      	it	ne
 8009ab8:	2001      	movne	r0, #1
 8009aba:	b002      	add	sp, #8
 8009abc:	4770      	bx	lr
 8009abe:	4610      	mov	r0, r2
 8009ac0:	e7fb      	b.n	8009aba <__ascii_mbtowc+0x16>
 8009ac2:	f06f 0001 	mvn.w	r0, #1
 8009ac6:	e7f8      	b.n	8009aba <__ascii_mbtowc+0x16>

08009ac8 <_realloc_r>:
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	4607      	mov	r7, r0
 8009ace:	4614      	mov	r4, r2
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	b921      	cbnz	r1, 8009ade <_realloc_r+0x16>
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ada:	f7ff b973 	b.w	8008dc4 <_malloc_r>
 8009ade:	b92a      	cbnz	r2, 8009aec <_realloc_r+0x24>
 8009ae0:	f7ff f8fe 	bl	8008ce0 <_free_r>
 8009ae4:	4625      	mov	r5, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	f000 f841 	bl	8009b72 <_malloc_usable_size_r>
 8009af0:	4284      	cmp	r4, r0
 8009af2:	4606      	mov	r6, r0
 8009af4:	d802      	bhi.n	8009afc <_realloc_r+0x34>
 8009af6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009afa:	d8f4      	bhi.n	8009ae6 <_realloc_r+0x1e>
 8009afc:	4621      	mov	r1, r4
 8009afe:	4638      	mov	r0, r7
 8009b00:	f7ff f960 	bl	8008dc4 <_malloc_r>
 8009b04:	4680      	mov	r8, r0
 8009b06:	b908      	cbnz	r0, 8009b0c <_realloc_r+0x44>
 8009b08:	4645      	mov	r5, r8
 8009b0a:	e7ec      	b.n	8009ae6 <_realloc_r+0x1e>
 8009b0c:	42b4      	cmp	r4, r6
 8009b0e:	4622      	mov	r2, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	bf28      	it	cs
 8009b14:	4632      	movcs	r2, r6
 8009b16:	f7ff ff85 	bl	8009a24 <memcpy>
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	f7ff f8df 	bl	8008ce0 <_free_r>
 8009b22:	e7f1      	b.n	8009b08 <_realloc_r+0x40>

08009b24 <__ascii_wctomb>:
 8009b24:	4603      	mov	r3, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	b141      	cbz	r1, 8009b3c <__ascii_wctomb+0x18>
 8009b2a:	2aff      	cmp	r2, #255	@ 0xff
 8009b2c:	d904      	bls.n	8009b38 <__ascii_wctomb+0x14>
 8009b2e:	228a      	movs	r2, #138	@ 0x8a
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	4770      	bx	lr
 8009b38:	2001      	movs	r0, #1
 8009b3a:	700a      	strb	r2, [r1, #0]
 8009b3c:	4770      	bx	lr
	...

08009b40 <fiprintf>:
 8009b40:	b40e      	push	{r1, r2, r3}
 8009b42:	b503      	push	{r0, r1, lr}
 8009b44:	4601      	mov	r1, r0
 8009b46:	ab03      	add	r3, sp, #12
 8009b48:	4805      	ldr	r0, [pc, #20]	@ (8009b60 <fiprintf+0x20>)
 8009b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4e:	6800      	ldr	r0, [r0, #0]
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	f000 f83d 	bl	8009bd0 <_vfiprintf_r>
 8009b56:	b002      	add	sp, #8
 8009b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b5c:	b003      	add	sp, #12
 8009b5e:	4770      	bx	lr
 8009b60:	20000058 	.word	0x20000058

08009b64 <abort>:
 8009b64:	2006      	movs	r0, #6
 8009b66:	b508      	push	{r3, lr}
 8009b68:	f000 fa06 	bl	8009f78 <raise>
 8009b6c:	2001      	movs	r0, #1
 8009b6e:	f7f8 ffac 	bl	8002aca <_exit>

08009b72 <_malloc_usable_size_r>:
 8009b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b76:	1f18      	subs	r0, r3, #4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bfbc      	itt	lt
 8009b7c:	580b      	ldrlt	r3, [r1, r0]
 8009b7e:	18c0      	addlt	r0, r0, r3
 8009b80:	4770      	bx	lr

08009b82 <__sfputc_r>:
 8009b82:	6893      	ldr	r3, [r2, #8]
 8009b84:	b410      	push	{r4}
 8009b86:	3b01      	subs	r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	6093      	str	r3, [r2, #8]
 8009b8c:	da07      	bge.n	8009b9e <__sfputc_r+0x1c>
 8009b8e:	6994      	ldr	r4, [r2, #24]
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	db01      	blt.n	8009b98 <__sfputc_r+0x16>
 8009b94:	290a      	cmp	r1, #10
 8009b96:	d102      	bne.n	8009b9e <__sfputc_r+0x1c>
 8009b98:	bc10      	pop	{r4}
 8009b9a:	f000 b931 	b.w	8009e00 <__swbuf_r>
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	1c58      	adds	r0, r3, #1
 8009ba2:	6010      	str	r0, [r2, #0]
 8009ba4:	7019      	strb	r1, [r3, #0]
 8009ba6:	4608      	mov	r0, r1
 8009ba8:	bc10      	pop	{r4}
 8009baa:	4770      	bx	lr

08009bac <__sfputs_r>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460f      	mov	r7, r1
 8009bb2:	4614      	mov	r4, r2
 8009bb4:	18d5      	adds	r5, r2, r3
 8009bb6:	42ac      	cmp	r4, r5
 8009bb8:	d101      	bne.n	8009bbe <__sfputs_r+0x12>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e007      	b.n	8009bce <__sfputs_r+0x22>
 8009bbe:	463a      	mov	r2, r7
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc6:	f7ff ffdc 	bl	8009b82 <__sfputc_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d1f3      	bne.n	8009bb6 <__sfputs_r+0xa>
 8009bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bd0 <_vfiprintf_r>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	460d      	mov	r5, r1
 8009bd6:	4614      	mov	r4, r2
 8009bd8:	4698      	mov	r8, r3
 8009bda:	4606      	mov	r6, r0
 8009bdc:	b09d      	sub	sp, #116	@ 0x74
 8009bde:	b118      	cbz	r0, 8009be8 <_vfiprintf_r+0x18>
 8009be0:	6a03      	ldr	r3, [r0, #32]
 8009be2:	b90b      	cbnz	r3, 8009be8 <_vfiprintf_r+0x18>
 8009be4:	f7fe f8f4 	bl	8007dd0 <__sinit>
 8009be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_vfiprintf_r+0x2a>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_vfiprintf_r+0x2a>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bf6:	f7fe fa04 	bl	8008002 <__retarget_lock_acquire_recursive>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	071b      	lsls	r3, r3, #28
 8009bfe:	d501      	bpl.n	8009c04 <_vfiprintf_r+0x34>
 8009c00:	692b      	ldr	r3, [r5, #16]
 8009c02:	b99b      	cbnz	r3, 8009c2c <_vfiprintf_r+0x5c>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4630      	mov	r0, r6
 8009c08:	f000 f938 	bl	8009e7c <__swsetup_r>
 8009c0c:	b170      	cbz	r0, 8009c2c <_vfiprintf_r+0x5c>
 8009c0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c10:	07dc      	lsls	r4, r3, #31
 8009c12:	d504      	bpl.n	8009c1e <_vfiprintf_r+0x4e>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b01d      	add	sp, #116	@ 0x74
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	0598      	lsls	r0, r3, #22
 8009c22:	d4f7      	bmi.n	8009c14 <_vfiprintf_r+0x44>
 8009c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c26:	f7fe f9ed 	bl	8008004 <__retarget_lock_release_recursive>
 8009c2a:	e7f3      	b.n	8009c14 <_vfiprintf_r+0x44>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c30:	2320      	movs	r3, #32
 8009c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c36:	2330      	movs	r3, #48	@ 0x30
 8009c38:	f04f 0901 	mov.w	r9, #1
 8009c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c40:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009dec <_vfiprintf_r+0x21c>
 8009c44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c48:	4623      	mov	r3, r4
 8009c4a:	469a      	mov	sl, r3
 8009c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c50:	b10a      	cbz	r2, 8009c56 <_vfiprintf_r+0x86>
 8009c52:	2a25      	cmp	r2, #37	@ 0x25
 8009c54:	d1f9      	bne.n	8009c4a <_vfiprintf_r+0x7a>
 8009c56:	ebba 0b04 	subs.w	fp, sl, r4
 8009c5a:	d00b      	beq.n	8009c74 <_vfiprintf_r+0xa4>
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	4622      	mov	r2, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ffa2 	bl	8009bac <__sfputs_r>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f000 80a7 	beq.w	8009dbc <_vfiprintf_r+0x1ec>
 8009c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c70:	445a      	add	r2, fp
 8009c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c74:	f89a 3000 	ldrb.w	r3, [sl]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 809f 	beq.w	8009dbc <_vfiprintf_r+0x1ec>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f04f 32ff 	mov.w	r2, #4294967295
 8009c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c88:	f10a 0a01 	add.w	sl, sl, #1
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	9307      	str	r3, [sp, #28]
 8009c90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c96:	4654      	mov	r4, sl
 8009c98:	2205      	movs	r2, #5
 8009c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9e:	4853      	ldr	r0, [pc, #332]	@ (8009dec <_vfiprintf_r+0x21c>)
 8009ca0:	f7fe f9b1 	bl	8008006 <memchr>
 8009ca4:	9a04      	ldr	r2, [sp, #16]
 8009ca6:	b9d8      	cbnz	r0, 8009ce0 <_vfiprintf_r+0x110>
 8009ca8:	06d1      	lsls	r1, r2, #27
 8009caa:	bf44      	itt	mi
 8009cac:	2320      	movmi	r3, #32
 8009cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cb2:	0713      	lsls	r3, r2, #28
 8009cb4:	bf44      	itt	mi
 8009cb6:	232b      	movmi	r3, #43	@ 0x2b
 8009cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cc2:	d015      	beq.n	8009cf0 <_vfiprintf_r+0x120>
 8009cc4:	4654      	mov	r4, sl
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f04f 0c0a 	mov.w	ip, #10
 8009ccc:	9a07      	ldr	r2, [sp, #28]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cd4:	3b30      	subs	r3, #48	@ 0x30
 8009cd6:	2b09      	cmp	r3, #9
 8009cd8:	d94b      	bls.n	8009d72 <_vfiprintf_r+0x1a2>
 8009cda:	b1b0      	cbz	r0, 8009d0a <_vfiprintf_r+0x13a>
 8009cdc:	9207      	str	r2, [sp, #28]
 8009cde:	e014      	b.n	8009d0a <_vfiprintf_r+0x13a>
 8009ce0:	eba0 0308 	sub.w	r3, r0, r8
 8009ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	46a2      	mov	sl, r4
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	e7d2      	b.n	8009c96 <_vfiprintf_r+0xc6>
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	1d19      	adds	r1, r3, #4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	9103      	str	r1, [sp, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bfbb      	ittet	lt
 8009cfc:	425b      	neglt	r3, r3
 8009cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8009d02:	9307      	strge	r3, [sp, #28]
 8009d04:	9307      	strlt	r3, [sp, #28]
 8009d06:	bfb8      	it	lt
 8009d08:	9204      	strlt	r2, [sp, #16]
 8009d0a:	7823      	ldrb	r3, [r4, #0]
 8009d0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d0e:	d10a      	bne.n	8009d26 <_vfiprintf_r+0x156>
 8009d10:	7863      	ldrb	r3, [r4, #1]
 8009d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d14:	d132      	bne.n	8009d7c <_vfiprintf_r+0x1ac>
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	3402      	adds	r4, #2
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	9203      	str	r2, [sp, #12]
 8009d20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d24:	9305      	str	r3, [sp, #20]
 8009d26:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009df0 <_vfiprintf_r+0x220>
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	4650      	mov	r0, sl
 8009d2e:	7821      	ldrb	r1, [r4, #0]
 8009d30:	f7fe f969 	bl	8008006 <memchr>
 8009d34:	b138      	cbz	r0, 8009d46 <_vfiprintf_r+0x176>
 8009d36:	2240      	movs	r2, #64	@ 0x40
 8009d38:	9b04      	ldr	r3, [sp, #16]
 8009d3a:	eba0 000a 	sub.w	r0, r0, sl
 8009d3e:	4082      	lsls	r2, r0
 8009d40:	4313      	orrs	r3, r2
 8009d42:	3401      	adds	r4, #1
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4a:	2206      	movs	r2, #6
 8009d4c:	4829      	ldr	r0, [pc, #164]	@ (8009df4 <_vfiprintf_r+0x224>)
 8009d4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d52:	f7fe f958 	bl	8008006 <memchr>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d03f      	beq.n	8009dda <_vfiprintf_r+0x20a>
 8009d5a:	4b27      	ldr	r3, [pc, #156]	@ (8009df8 <_vfiprintf_r+0x228>)
 8009d5c:	bb1b      	cbnz	r3, 8009da6 <_vfiprintf_r+0x1d6>
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	3307      	adds	r3, #7
 8009d62:	f023 0307 	bic.w	r3, r3, #7
 8009d66:	3308      	adds	r3, #8
 8009d68:	9303      	str	r3, [sp, #12]
 8009d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6c:	443b      	add	r3, r7
 8009d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d70:	e76a      	b.n	8009c48 <_vfiprintf_r+0x78>
 8009d72:	460c      	mov	r4, r1
 8009d74:	2001      	movs	r0, #1
 8009d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d7a:	e7a8      	b.n	8009cce <_vfiprintf_r+0xfe>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f04f 0c0a 	mov.w	ip, #10
 8009d82:	4619      	mov	r1, r3
 8009d84:	3401      	adds	r4, #1
 8009d86:	9305      	str	r3, [sp, #20]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8e:	3a30      	subs	r2, #48	@ 0x30
 8009d90:	2a09      	cmp	r2, #9
 8009d92:	d903      	bls.n	8009d9c <_vfiprintf_r+0x1cc>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0c6      	beq.n	8009d26 <_vfiprintf_r+0x156>
 8009d98:	9105      	str	r1, [sp, #20]
 8009d9a:	e7c4      	b.n	8009d26 <_vfiprintf_r+0x156>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	2301      	movs	r3, #1
 8009da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009da4:	e7f0      	b.n	8009d88 <_vfiprintf_r+0x1b8>
 8009da6:	ab03      	add	r3, sp, #12
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	462a      	mov	r2, r5
 8009dac:	4630      	mov	r0, r6
 8009dae:	4b13      	ldr	r3, [pc, #76]	@ (8009dfc <_vfiprintf_r+0x22c>)
 8009db0:	a904      	add	r1, sp, #16
 8009db2:	f7fd fbc5 	bl	8007540 <_printf_float>
 8009db6:	4607      	mov	r7, r0
 8009db8:	1c78      	adds	r0, r7, #1
 8009dba:	d1d6      	bne.n	8009d6a <_vfiprintf_r+0x19a>
 8009dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dbe:	07d9      	lsls	r1, r3, #31
 8009dc0:	d405      	bmi.n	8009dce <_vfiprintf_r+0x1fe>
 8009dc2:	89ab      	ldrh	r3, [r5, #12]
 8009dc4:	059a      	lsls	r2, r3, #22
 8009dc6:	d402      	bmi.n	8009dce <_vfiprintf_r+0x1fe>
 8009dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dca:	f7fe f91b 	bl	8008004 <__retarget_lock_release_recursive>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	065b      	lsls	r3, r3, #25
 8009dd2:	f53f af1f 	bmi.w	8009c14 <_vfiprintf_r+0x44>
 8009dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dd8:	e71e      	b.n	8009c18 <_vfiprintf_r+0x48>
 8009dda:	ab03      	add	r3, sp, #12
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	462a      	mov	r2, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <_vfiprintf_r+0x22c>)
 8009de4:	a904      	add	r1, sp, #16
 8009de6:	f7fd fe49 	bl	8007a7c <_printf_i>
 8009dea:	e7e4      	b.n	8009db6 <_vfiprintf_r+0x1e6>
 8009dec:	0800aa1c 	.word	0x0800aa1c
 8009df0:	0800aa22 	.word	0x0800aa22
 8009df4:	0800aa26 	.word	0x0800aa26
 8009df8:	08007541 	.word	0x08007541
 8009dfc:	08009bad 	.word	0x08009bad

08009e00 <__swbuf_r>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	460e      	mov	r6, r1
 8009e04:	4614      	mov	r4, r2
 8009e06:	4605      	mov	r5, r0
 8009e08:	b118      	cbz	r0, 8009e12 <__swbuf_r+0x12>
 8009e0a:	6a03      	ldr	r3, [r0, #32]
 8009e0c:	b90b      	cbnz	r3, 8009e12 <__swbuf_r+0x12>
 8009e0e:	f7fd ffdf 	bl	8007dd0 <__sinit>
 8009e12:	69a3      	ldr	r3, [r4, #24]
 8009e14:	60a3      	str	r3, [r4, #8]
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	071a      	lsls	r2, r3, #28
 8009e1a:	d501      	bpl.n	8009e20 <__swbuf_r+0x20>
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	b943      	cbnz	r3, 8009e32 <__swbuf_r+0x32>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 f82a 	bl	8009e7c <__swsetup_r>
 8009e28:	b118      	cbz	r0, 8009e32 <__swbuf_r+0x32>
 8009e2a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e2e:	4638      	mov	r0, r7
 8009e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	b2f6      	uxtb	r6, r6
 8009e38:	1a98      	subs	r0, r3, r2
 8009e3a:	6963      	ldr	r3, [r4, #20]
 8009e3c:	4637      	mov	r7, r6
 8009e3e:	4283      	cmp	r3, r0
 8009e40:	dc05      	bgt.n	8009e4e <__swbuf_r+0x4e>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f7ff fd9b 	bl	8009980 <_fflush_r>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d1ed      	bne.n	8009e2a <__swbuf_r+0x2a>
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	60a3      	str	r3, [r4, #8]
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	701e      	strb	r6, [r3, #0]
 8009e5c:	6962      	ldr	r2, [r4, #20]
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d004      	beq.n	8009e6e <__swbuf_r+0x6e>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d5e1      	bpl.n	8009e2e <__swbuf_r+0x2e>
 8009e6a:	2e0a      	cmp	r6, #10
 8009e6c:	d1df      	bne.n	8009e2e <__swbuf_r+0x2e>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7ff fd85 	bl	8009980 <_fflush_r>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d0d9      	beq.n	8009e2e <__swbuf_r+0x2e>
 8009e7a:	e7d6      	b.n	8009e2a <__swbuf_r+0x2a>

08009e7c <__swsetup_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4b29      	ldr	r3, [pc, #164]	@ (8009f24 <__swsetup_r+0xa8>)
 8009e80:	4605      	mov	r5, r0
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	460c      	mov	r4, r1
 8009e86:	b118      	cbz	r0, 8009e90 <__swsetup_r+0x14>
 8009e88:	6a03      	ldr	r3, [r0, #32]
 8009e8a:	b90b      	cbnz	r3, 8009e90 <__swsetup_r+0x14>
 8009e8c:	f7fd ffa0 	bl	8007dd0 <__sinit>
 8009e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e94:	0719      	lsls	r1, r3, #28
 8009e96:	d422      	bmi.n	8009ede <__swsetup_r+0x62>
 8009e98:	06da      	lsls	r2, r3, #27
 8009e9a:	d407      	bmi.n	8009eac <__swsetup_r+0x30>
 8009e9c:	2209      	movs	r2, #9
 8009e9e:	602a      	str	r2, [r5, #0]
 8009ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	81a3      	strh	r3, [r4, #12]
 8009eaa:	e033      	b.n	8009f14 <__swsetup_r+0x98>
 8009eac:	0758      	lsls	r0, r3, #29
 8009eae:	d512      	bpl.n	8009ed6 <__swsetup_r+0x5a>
 8009eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eb2:	b141      	cbz	r1, 8009ec6 <__swsetup_r+0x4a>
 8009eb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009eb8:	4299      	cmp	r1, r3
 8009eba:	d002      	beq.n	8009ec2 <__swsetup_r+0x46>
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f7fe ff0f 	bl	8008ce0 <_free_r>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	6063      	str	r3, [r4, #4]
 8009ed2:	6923      	ldr	r3, [r4, #16]
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	f043 0308 	orr.w	r3, r3, #8
 8009edc:	81a3      	strh	r3, [r4, #12]
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	b94b      	cbnz	r3, 8009ef6 <__swsetup_r+0x7a>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eec:	d003      	beq.n	8009ef6 <__swsetup_r+0x7a>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f000 f882 	bl	8009ffa <__smakebuf_r>
 8009ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efa:	f013 0201 	ands.w	r2, r3, #1
 8009efe:	d00a      	beq.n	8009f16 <__swsetup_r+0x9a>
 8009f00:	2200      	movs	r2, #0
 8009f02:	60a2      	str	r2, [r4, #8]
 8009f04:	6962      	ldr	r2, [r4, #20]
 8009f06:	4252      	negs	r2, r2
 8009f08:	61a2      	str	r2, [r4, #24]
 8009f0a:	6922      	ldr	r2, [r4, #16]
 8009f0c:	b942      	cbnz	r2, 8009f20 <__swsetup_r+0xa4>
 8009f0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f12:	d1c5      	bne.n	8009ea0 <__swsetup_r+0x24>
 8009f14:	bd38      	pop	{r3, r4, r5, pc}
 8009f16:	0799      	lsls	r1, r3, #30
 8009f18:	bf58      	it	pl
 8009f1a:	6962      	ldrpl	r2, [r4, #20]
 8009f1c:	60a2      	str	r2, [r4, #8]
 8009f1e:	e7f4      	b.n	8009f0a <__swsetup_r+0x8e>
 8009f20:	2000      	movs	r0, #0
 8009f22:	e7f7      	b.n	8009f14 <__swsetup_r+0x98>
 8009f24:	20000058 	.word	0x20000058

08009f28 <_raise_r>:
 8009f28:	291f      	cmp	r1, #31
 8009f2a:	b538      	push	{r3, r4, r5, lr}
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	d904      	bls.n	8009f3c <_raise_r+0x14>
 8009f32:	2316      	movs	r3, #22
 8009f34:	6003      	str	r3, [r0, #0]
 8009f36:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f3e:	b112      	cbz	r2, 8009f46 <_raise_r+0x1e>
 8009f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f44:	b94b      	cbnz	r3, 8009f5a <_raise_r+0x32>
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 f830 	bl	8009fac <_getpid_r>
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4601      	mov	r1, r0
 8009f50:	4628      	mov	r0, r5
 8009f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f56:	f000 b817 	b.w	8009f88 <_kill_r>
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d00a      	beq.n	8009f74 <_raise_r+0x4c>
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	d103      	bne.n	8009f6a <_raise_r+0x42>
 8009f62:	2316      	movs	r3, #22
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	2001      	movs	r0, #1
 8009f68:	e7e7      	b.n	8009f3a <_raise_r+0x12>
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f72:	4798      	blx	r3
 8009f74:	2000      	movs	r0, #0
 8009f76:	e7e0      	b.n	8009f3a <_raise_r+0x12>

08009f78 <raise>:
 8009f78:	4b02      	ldr	r3, [pc, #8]	@ (8009f84 <raise+0xc>)
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	f7ff bfd3 	b.w	8009f28 <_raise_r>
 8009f82:	bf00      	nop
 8009f84:	20000058 	.word	0x20000058

08009f88 <_kill_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4d06      	ldr	r5, [pc, #24]	@ (8009fa8 <_kill_r+0x20>)
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f7f8 fd88 	bl	8002aaa <_kill>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d102      	bne.n	8009fa4 <_kill_r+0x1c>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b103      	cbz	r3, 8009fa4 <_kill_r+0x1c>
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	bf00      	nop
 8009fa8:	200009a4 	.word	0x200009a4

08009fac <_getpid_r>:
 8009fac:	f7f8 bd76 	b.w	8002a9c <_getpid>

08009fb0 <__swhatbuf_r>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	4615      	mov	r5, r2
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	461e      	mov	r6, r3
 8009fbe:	b096      	sub	sp, #88	@ 0x58
 8009fc0:	da0c      	bge.n	8009fdc <__swhatbuf_r+0x2c>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fca:	bf14      	ite	ne
 8009fcc:	2340      	movne	r3, #64	@ 0x40
 8009fce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	6031      	str	r1, [r6, #0]
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	b016      	add	sp, #88	@ 0x58
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	466a      	mov	r2, sp
 8009fde:	f000 f849 	bl	800a074 <_fstat_r>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	dbed      	blt.n	8009fc2 <__swhatbuf_r+0x12>
 8009fe6:	9901      	ldr	r1, [sp, #4]
 8009fe8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ff0:	4259      	negs	r1, r3
 8009ff2:	4159      	adcs	r1, r3
 8009ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ff8:	e7eb      	b.n	8009fd2 <__swhatbuf_r+0x22>

08009ffa <__smakebuf_r>:
 8009ffa:	898b      	ldrh	r3, [r1, #12]
 8009ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffe:	079d      	lsls	r5, r3, #30
 800a000:	4606      	mov	r6, r0
 800a002:	460c      	mov	r4, r1
 800a004:	d507      	bpl.n	800a016 <__smakebuf_r+0x1c>
 800a006:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	6123      	str	r3, [r4, #16]
 800a00e:	2301      	movs	r3, #1
 800a010:	6163      	str	r3, [r4, #20]
 800a012:	b003      	add	sp, #12
 800a014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a016:	466a      	mov	r2, sp
 800a018:	ab01      	add	r3, sp, #4
 800a01a:	f7ff ffc9 	bl	8009fb0 <__swhatbuf_r>
 800a01e:	9f00      	ldr	r7, [sp, #0]
 800a020:	4605      	mov	r5, r0
 800a022:	4639      	mov	r1, r7
 800a024:	4630      	mov	r0, r6
 800a026:	f7fe fecd 	bl	8008dc4 <_malloc_r>
 800a02a:	b948      	cbnz	r0, 800a040 <__smakebuf_r+0x46>
 800a02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a030:	059a      	lsls	r2, r3, #22
 800a032:	d4ee      	bmi.n	800a012 <__smakebuf_r+0x18>
 800a034:	f023 0303 	bic.w	r3, r3, #3
 800a038:	f043 0302 	orr.w	r3, r3, #2
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	e7e2      	b.n	800a006 <__smakebuf_r+0xc>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	6020      	str	r0, [r4, #0]
 800a050:	b15b      	cbz	r3, 800a06a <__smakebuf_r+0x70>
 800a052:	4630      	mov	r0, r6
 800a054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a058:	f000 f81e 	bl	800a098 <_isatty_r>
 800a05c:	b128      	cbz	r0, 800a06a <__smakebuf_r+0x70>
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	f023 0303 	bic.w	r3, r3, #3
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	431d      	orrs	r5, r3
 800a06e:	81a5      	strh	r5, [r4, #12]
 800a070:	e7cf      	b.n	800a012 <__smakebuf_r+0x18>
	...

0800a074 <_fstat_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	2300      	movs	r3, #0
 800a078:	4d06      	ldr	r5, [pc, #24]	@ (800a094 <_fstat_r+0x20>)
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	f7f8 fd55 	bl	8002b30 <_fstat>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d102      	bne.n	800a090 <_fstat_r+0x1c>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	b103      	cbz	r3, 800a090 <_fstat_r+0x1c>
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	200009a4 	.word	0x200009a4

0800a098 <_isatty_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	2300      	movs	r3, #0
 800a09c:	4d05      	ldr	r5, [pc, #20]	@ (800a0b4 <_isatty_r+0x1c>)
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	f7f8 fd53 	bl	8002b4e <_isatty>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_isatty_r+0x1a>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_isatty_r+0x1a>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	200009a4 	.word	0x200009a4

0800a0b8 <_init>:
 800a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ba:	bf00      	nop
 800a0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0be:	bc08      	pop	{r3}
 800a0c0:	469e      	mov	lr, r3
 800a0c2:	4770      	bx	lr

0800a0c4 <_fini>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	bf00      	nop
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr
