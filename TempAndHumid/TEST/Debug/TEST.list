
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  08008f80  08008f80  00009f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af4  08009af4  0000b20c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009af4  08009af4  0000aaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009afc  08009afc  0000b20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009afc  08009afc  0000aafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b00  08009b00  0000ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08009b04  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  2000020c  08009d10  0000b20c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08009d10  0000b94c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f4a  00000000  00000000  0000b235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002642  00000000  00000000  0001c17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df2  00000000  00000000  0001f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c6f  00000000  00000000  0002076a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ed  00000000  00000000  0003a3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941a9  00000000  00000000  0004e9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  000e2bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000e88e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f68 	.word	0x08008f68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	08008f68 	.word	0x08008f68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <_write>:
/* USER CODE BEGIN 0 */

uint8_t Ledstatus;
//----------------------------------------------------------------------
// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d002      	beq.n	8000fa8 <_write+0x18>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d111      	bne.n	8000fcc <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	4809      	ldr	r0, [pc, #36]	@ (8000fd8 <_write+0x48>)
 8000fb4:	f004 ffac 	bl	8005f10 <HAL_UART_Transmit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <_write+0x36>
      return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e004      	b.n	8000fd0 <_write+0x40>
    else
      return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e001      	b.n	8000fd0 <_write+0x40>
  }
  return -1;
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000384 	.word	0x20000384

08000fdc <prinLedStatus>:
uint16_t pins[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin,
                     LED5_Pin, LED6_Pin, LED7_Pin, LED8_Pin};
//----------------------------------------------------------------------
uint8_t Ledstatus;
void prinLedStatus()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  for (int i = 0; i < 8; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	e025      	b.n	8001034 <prinLedStatus+0x58>
  {
	if (Ledstatus & (1 << i))
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <prinLedStatus+0x68>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	fa42 f303 	asr.w	r3, r2, r3
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <prinLedStatus+0x3a>
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000ffc:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <prinLedStatus+0x6c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001004:	4a11      	ldr	r2, [pc, #68]	@ (800104c <prinLedStatus+0x70>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	f002 fa5f 	bl	80034d2 <HAL_GPIO_WritePin>
 8001014:	e00b      	b.n	800102e <prinLedStatus+0x52>
	}else
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8001016:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <prinLedStatus+0x6c>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800101e:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <prinLedStatus+0x70>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	f002 fa52 	bl	80034d2 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b07      	cmp	r3, #7
 8001038:	ddd6      	ble.n	8000fe8 <prinLedStatus+0xc>
	}
  }

}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200003cc 	.word	0x200003cc
 8001048:	20000008 	.word	0x20000008
 800104c:	20000028 	.word	0x20000028

08001050 <HandleButtons>:
//-----------------------------------------------------------------------------
void HandleButtons(uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
    if (Ledstatus == 0)
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HandleButtons+0x64>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HandleButtons+0x18>
    {
        Ledstatus = 1;
 8001062:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HandleButtons+0x64>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == BTN1_Pin)
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d10d      	bne.n	800108a <HandleButtons+0x3a>
    {
        Ledstatus <<= 1;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HandleButtons+0x64>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HandleButtons+0x64>)
 8001078:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 1;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HandleButtons+0x64>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <HandleButtons+0x5a>
 8001082:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <HandleButtons+0x64>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
    else if (GPIO_Pin == BTN2_Pin)
    {
        Ledstatus >>= 1;
        if (Ledstatus == 0) Ledstatus = 0x80;
    }
}
 8001088:	e00f      	b.n	80010aa <HandleButtons+0x5a>
    else if (GPIO_Pin == BTN2_Pin)
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d10c      	bne.n	80010aa <HandleButtons+0x5a>
        Ledstatus >>= 1;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HandleButtons+0x64>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	085b      	lsrs	r3, r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HandleButtons+0x64>)
 800109a:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 0x80;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HandleButtons+0x64>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <HandleButtons+0x5a>
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HandleButtons+0x64>)
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	701a      	strb	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	200003cc 	.word	0x200003cc

080010b8 <HAL_GPIO_EXTI_Callback>:


//--------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t PGIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	HandleButtons(PGIO_Pin);
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffc3 	bl	8001050 <HandleButtons>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <handlSlideSwitch>:
//--------------------------------------------------------------------------

void handlSlideSwitch()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 80010da:	2101      	movs	r1, #1
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <handlSlideSwitch+0x38>)
 80010de:	f002 f9e1 	bl	80034a4 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <handlSlideSwitch+0x24>
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2110      	movs	r1, #16
 80010f0:	4806      	ldr	r0, [pc, #24]	@ (800110c <handlSlideSwitch+0x38>)
 80010f2:	f002 f9ee 	bl	80034d2 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
	}
}
 80010f6:	e004      	b.n	8001102 <handlSlideSwitch+0x2e>
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2110      	movs	r1, #16
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <handlSlideSwitch+0x38>)
 80010fe:	f002 f9e8 	bl	80034d2 <HAL_GPIO_WritePin>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40011000 	.word	0x40011000

08001110 <Buzzer_SetDuty>:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, g); // Зелёный
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, b); // Синий
}
//---------------------------------------------------------------------------

void Buzzer_SetDuty(uint16_t duty) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
    if (duty > htim2.Init.Period) duty = htim2.Init.Period;
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <Buzzer_SetDuty+0x2c>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d902      	bls.n	800112a <Buzzer_SetDuty+0x1a>
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <Buzzer_SetDuty+0x2c>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <Buzzer_SetDuty+0x2c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	88fa      	ldrh	r2, [r7, #6]
 8001130:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	200002ac 	.word	0x200002ac

08001140 <handlSlideToBuzzer>:


//--------------------------------------------------------------------------
void handlSlideToBuzzer()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 8001146:	2101      	movs	r1, #1
 8001148:	480e      	ldr	r0, [pc, #56]	@ (8001184 <handlSlideToBuzzer+0x44>)
 800114a:	f002 f9ab 	bl	80034a4 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10c      	bne.n	8001172 <handlSlideToBuzzer+0x32>
	{
		 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001158:	2100      	movs	r1, #0
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <handlSlideToBuzzer+0x48>)
 800115c:	f004 f918 	bl	8005390 <HAL_TIM_PWM_Start>
		 Buzzer_SetDuty( (htim2.Init.Period + 1) / 2 );
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <handlSlideToBuzzer+0x48>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffd0 	bl	8001110 <Buzzer_SetDuty>
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	}
}
 8001170:	e003      	b.n	800117a <handlSlideToBuzzer+0x3a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <handlSlideToBuzzer+0x48>)
 8001176:	f004 f9ad 	bl	80054d4 <HAL_TIM_PWM_Stop>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40011000 	.word	0x40011000
 8001188:	200002ac 	.word	0x200002ac

0800118c <UpdateEncoder>:
const uint8_t led_sequence[8] = {1, 3, 7, 15, 31, 63, 127, 255};
uint16_t adc_value = 0;
//-------------------------------------------------------------------------

void UpdateEncoder()
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	    uint16_t curr_cnt = TIM3->CNT;
 8001192:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <UpdateEncoder+0xbc>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	80bb      	strh	r3, [r7, #4]
	    int16_t diff = curr_cnt - last_cnt;
 8001198:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <UpdateEncoder+0xc0>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	88ba      	ldrh	r2, [r7, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	80fb      	strh	r3, [r7, #6]

	    // Обработка переполнения с ARR = 30
	    if(diff > 15) {
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	dd04      	ble.n	80011b6 <UpdateEncoder+0x2a>
	        diff -= 30;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	3b1e      	subs	r3, #30
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	e008      	b.n	80011c8 <UpdateEncoder+0x3c>
	    }
	    else if(diff < -15) {
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	f113 0f0f 	cmn.w	r3, #15
 80011be:	da03      	bge.n	80011c8 <UpdateEncoder+0x3c>
	        diff += 30;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	331e      	adds	r3, #30
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
	    }

	    encoder_value += diff;
 80011c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <UpdateEncoder+0xc4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <UpdateEncoder+0xc4>)
 80011d4:	6013      	str	r3, [r2, #0]
	    last_cnt = curr_cnt;
 80011d6:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <UpdateEncoder+0xc0>)
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	8013      	strh	r3, [r2, #0]

	    // Изменяем индекс только при значительном изменении положения
	    static int8_t accumulated_diff = 0;
	    accumulated_diff += diff;
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <UpdateEncoder+0xc8>)
 80011e2:	f993 3000 	ldrsb.w	r3, [r3]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <UpdateEncoder+0xc8>)
 80011f0:	701a      	strb	r2, [r3, #0]

	    if(accumulated_diff >= 4) { // Порог срабатывания +
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <UpdateEncoder+0xc8>)
 80011f4:	f993 3000 	ldrsb.w	r3, [r3]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	dd0d      	ble.n	8001218 <UpdateEncoder+0x8c>
	        if(active_leds < 7) active_leds++;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <UpdateEncoder+0xcc>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b06      	cmp	r3, #6
 8001202:	d805      	bhi.n	8001210 <UpdateEncoder+0x84>
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <UpdateEncoder+0xcc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <UpdateEncoder+0xcc>)
 800120e:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 8001210:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <UpdateEncoder+0xc8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
	        if(active_leds > 0) active_leds--;
	        accumulated_diff = 0;
	    }

}
 8001216:	e012      	b.n	800123e <UpdateEncoder+0xb2>
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <UpdateEncoder+0xc8>)
 800121a:	f993 3000 	ldrsb.w	r3, [r3]
 800121e:	f113 0f03 	cmn.w	r3, #3
 8001222:	da0c      	bge.n	800123e <UpdateEncoder+0xb2>
	        if(active_leds > 0) active_leds--;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <UpdateEncoder+0xcc>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <UpdateEncoder+0xac>
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <UpdateEncoder+0xcc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <UpdateEncoder+0xcc>)
 8001236:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <UpdateEncoder+0xc8>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40000400 	.word	0x40000400
 800124c:	200003ec 	.word	0x200003ec
 8001250:	200003d0 	.word	0x200003d0
 8001254:	200003ee 	.word	0x200003ee
 8001258:	200003d4 	.word	0x200003d4

0800125c <HandlAdctoLed>:


//-------------------------------------------------------------------------

int HandlAdctoLed(float value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	int index = (int)(value / 0.5f); // шаг 0.5 В
 8001264:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fdcf 	bl	8000e0c <__aeabi_fdiv>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe67 	bl	8000f44 <__aeabi_f2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	60fb      	str	r3, [r7, #12]
	if(index > 7) index = 7;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b07      	cmp	r3, #7
 800127e:	dd01      	ble.n	8001284 <HandlAdctoLed+0x28>
 8001280:	2307      	movs	r3, #7
 8001282:	60fb      	str	r3, [r7, #12]
	return led_sequence[index];
 8001284:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <HandlAdctoLed+0x38>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08009738 	.word	0x08009738

08001298 <AHT10_Init>:
float AHT10_Temperature;
float AHT10_Humidity;


void AHT10_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
    uint8_t init_cmd[3] = {AHT10_INIT_CMD, 0x08, 0x00}; // 0x08 — калибровка
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <AHT10_Init+0x38>)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	4611      	mov	r1, r2
 80012a6:	8019      	strh	r1, [r3, #0]
 80012a8:	3302      	adds	r3, #2
 80012aa:	0c12      	lsrs	r2, r2, #16
 80012ac:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADDR, init_cmd, 3, 100);
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	2364      	movs	r3, #100	@ 0x64
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2303      	movs	r3, #3
 80012b6:	2170      	movs	r1, #112	@ 0x70
 80012b8:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <AHT10_Init+0x3c>)
 80012ba:	f002 fa7f 	bl	80037bc <HAL_I2C_Master_Transmit>
    HAL_Delay(500);
 80012be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c2:	f001 fa0d 	bl	80026e0 <HAL_Delay>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	08008f80 	.word	0x08008f80
 80012d4:	20000258 	.word	0x20000258

080012d8 <AHT10_ReadData>:


void AHT10_ReadData(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8
    uint8_t measure_cmd[3] = {AHT10_MEASURE_CMD, AHT10_DATA0, AHT10_DATA1};
 80012de:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <AHT10_ReadData+0xd0>)
 80012e0:	463b      	mov	r3, r7
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	4611      	mov	r1, r2
 80012e6:	8019      	strh	r1, [r3, #0]
 80012e8:	3302      	adds	r3, #2
 80012ea:	0c12      	lsrs	r2, r2, #16
 80012ec:	701a      	strb	r2, [r3, #0]


    HAL_I2C_Master_Transmit(&hi2c2, AHT10_ADDR, measure_cmd, 3, 100);
 80012ee:	463a      	mov	r2, r7
 80012f0:	2364      	movs	r3, #100	@ 0x64
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2303      	movs	r3, #3
 80012f6:	2170      	movs	r1, #112	@ 0x70
 80012f8:	482c      	ldr	r0, [pc, #176]	@ (80013ac <AHT10_ReadData+0xd4>)
 80012fa:	f002 fa5f 	bl	80037bc <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 80012fe:	2064      	movs	r0, #100	@ 0x64
 8001300:	f001 f9ee 	bl	80026e0 <HAL_Delay>


    HAL_I2C_Master_Receive(&hi2c2, AHT10_ADDR, AHT10_RX_Data, 6, 100);
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2306      	movs	r3, #6
 800130a:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <AHT10_ReadData+0xd8>)
 800130c:	2170      	movs	r1, #112	@ 0x70
 800130e:	4827      	ldr	r0, [pc, #156]	@ (80013ac <AHT10_ReadData+0xd4>)
 8001310:	f002 fb52 	bl	80039b8 <HAL_I2C_Master_Receive>


    uint32_t hum_raw = ((uint32_t)(AHT10_RX_Data[1]) << 12) |
 8001314:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	031a      	lsls	r2, r3, #12
                       ((uint32_t)(AHT10_RX_Data[2]) << 4)  |
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <AHT10_ReadData+0xd8>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	011b      	lsls	r3, r3, #4
    uint32_t hum_raw = ((uint32_t)(AHT10_RX_Data[1]) << 12) |
 8001320:	4313      	orrs	r3, r2
                       ((AHT10_RX_Data[3] & 0xF0) >> 4);
 8001322:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001324:	78d2      	ldrb	r2, [r2, #3]
 8001326:	0912      	lsrs	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
    uint32_t hum_raw = ((uint32_t)(AHT10_RX_Data[1]) << 12) |
 800132a:	4313      	orrs	r3, r2
 800132c:	607b      	str	r3, [r7, #4]

    AHT10_Humidity = ((float)hum_raw / 1048576.0f) * 100.0f;
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fc60 	bl	8000bf4 <__aeabi_ui2f>
 8001334:	4603      	mov	r3, r0
 8001336:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd66 	bl	8000e0c <__aeabi_fdiv>
 8001340:	4603      	mov	r3, r0
 8001342:	491c      	ldr	r1, [pc, #112]	@ (80013b4 <AHT10_ReadData+0xdc>)
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fcad 	bl	8000ca4 <__aeabi_fmul>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <AHT10_ReadData+0xe0>)
 8001350:	601a      	str	r2, [r3, #0]


    AHT10_ADC_Raw = ((uint32_t)(AHT10_RX_Data[3] & 0x0F) << 16) |
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                    ((uint32_t)(AHT10_RX_Data[4]) << 8) |
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <AHT10_ReadData+0xd8>)
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	021b      	lsls	r3, r3, #8
    AHT10_ADC_Raw = ((uint32_t)(AHT10_RX_Data[3] & 0x0F) << 16) |
 8001362:	4313      	orrs	r3, r2
                    (AHT10_RX_Data[5]);
 8001364:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <AHT10_ReadData+0xd8>)
 8001366:	7952      	ldrb	r2, [r2, #5]
                    ((uint32_t)(AHT10_RX_Data[4]) << 8) |
 8001368:	4313      	orrs	r3, r2
    AHT10_ADC_Raw = ((uint32_t)(AHT10_RX_Data[3] & 0x0F) << 16) |
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <AHT10_ReadData+0xe4>)
 800136c:	6013      	str	r3, [r2, #0]

    AHT10_Temperature = ((float)AHT10_ADC_Raw / 1048576.0f) * 200.0f - 50.0f;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <AHT10_ReadData+0xe4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fc3e 	bl	8000bf4 <__aeabi_ui2f>
 8001378:	4603      	mov	r3, r0
 800137a:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd44 	bl	8000e0c <__aeabi_fdiv>
 8001384:	4603      	mov	r3, r0
 8001386:	490e      	ldr	r1, [pc, #56]	@ (80013c0 <AHT10_ReadData+0xe8>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc8b 	bl	8000ca4 <__aeabi_fmul>
 800138e:	4603      	mov	r3, r0
 8001390:	490c      	ldr	r1, [pc, #48]	@ (80013c4 <AHT10_ReadData+0xec>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fb7c 	bl	8000a90 <__aeabi_fsub>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <AHT10_ReadData+0xf0>)
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	08008f84 	.word	0x08008f84
 80013ac:	20000258 	.word	0x20000258
 80013b0:	200003d8 	.word	0x200003d8
 80013b4:	42c80000 	.word	0x42c80000
 80013b8:	200003e8 	.word	0x200003e8
 80013bc:	200003e0 	.word	0x200003e0
 80013c0:	43480000 	.word	0x43480000
 80013c4:	42480000 	.word	0x42480000
 80013c8:	200003e4 	.word	0x200003e4

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	@ 0x40
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f001 f923 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f8d1 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 fad7 	bl	800198c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013de:	f000 faab 	bl	8001938 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013e2:	f000 f98f 	bl	8001704 <MX_TIM2_Init>
  MX_TIM4_Init();
 80013e6:	f000 fa39 	bl	800185c <MX_TIM4_Init>
  MX_TIM3_Init();
 80013ea:	f000 f9e3 	bl	80017b4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80013ee:	f000 f91d 	bl	800162c <MX_ADC1_Init>
  MX_I2C2_Init();
 80013f2:	f000 f959 	bl	80016a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80013f6:	213c      	movs	r1, #60	@ 0x3c
 80013f8:	4851      	ldr	r0, [pc, #324]	@ (8001540 <main+0x174>)
 80013fa:	f004 f971 	bl	80056e0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80013fe:	2100      	movs	r1, #0
 8001400:	4850      	ldr	r0, [pc, #320]	@ (8001544 <main+0x178>)
 8001402:	f003 ffc5 	bl	8005390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001406:	2104      	movs	r1, #4
 8001408:	484e      	ldr	r0, [pc, #312]	@ (8001544 <main+0x178>)
 800140a:	f003 ffc1 	bl	8005390 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800140e:	2108      	movs	r1, #8
 8001410:	484c      	ldr	r0, [pc, #304]	@ (8001544 <main+0x178>)
 8001412:	f003 ffbd 	bl	8005390 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8001416:	484c      	ldr	r0, [pc, #304]	@ (8001548 <main+0x17c>)
 8001418:	f001 fa5e 	bl	80028d8 <HAL_ADC_Start>

  SSD1306_Init();
 800141c:	f000 fb54 	bl	8001ac8 <SSD1306_Init>

  SSD1306_GotoXY(0,0);
 8001420:	2100      	movs	r1, #0
 8001422:	2000      	movs	r0, #0
 8001424:	f000 fcb8 	bl	8001d98 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_7x10, 1);
 8001428:	2201      	movs	r2, #1
 800142a:	4948      	ldr	r1, [pc, #288]	@ (800154c <main+0x180>)
 800142c:	4848      	ldr	r0, [pc, #288]	@ (8001550 <main+0x184>)
 800142e:	f000 fd47 	bl	8001ec0 <SSD1306_Puts>
  SSD1306_GotoXY(0,10);
 8001432:	210a      	movs	r1, #10
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fcaf 	bl	8001d98 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD", &Font_7x10, 1);
 800143a:	2201      	movs	r2, #1
 800143c:	4943      	ldr	r1, [pc, #268]	@ (800154c <main+0x180>)
 800143e:	4845      	ldr	r0, [pc, #276]	@ (8001554 <main+0x188>)
 8001440:	f000 fd3e 	bl	8001ec0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001444:	f000 fc04 	bl	8001c50 <SSD1306_UpdateScreen>


  AHT10_Init();
 8001448:	f7ff ff26 	bl	8001298 <AHT10_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Ledstatus = 0;
 800144c:	4b42      	ldr	r3, [pc, #264]	@ (8001558 <main+0x18c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  UpdateEncoder();
 8001452:	f7ff fe9b 	bl	800118c <UpdateEncoder>

	  // Управляем светодиодами в зависимости от положения энкодера
	  //Ledstatus = active_leds;
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001456:	f04f 31ff 	mov.w	r1, #4294967295
 800145a:	483b      	ldr	r0, [pc, #236]	@ (8001548 <main+0x17c>)
 800145c:	f001 faea 	bl	8002a34 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8001460:	4839      	ldr	r0, [pc, #228]	@ (8001548 <main+0x17c>)
 8001462:	f001 fbed 	bl	8002c40 <HAL_ADC_GetValue>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <main+0x190>)
 800146c:	801a      	strh	r2, [r3, #0]

	  // Переводим значение в напряжение
	  float voltage = (adc_value * 3.3f) / 4095.0f;
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <main+0x190>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fbc2 	bl	8000bfc <__aeabi_i2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4939      	ldr	r1, [pc, #228]	@ (8001560 <main+0x194>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc11 	bl	8000ca4 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	4937      	ldr	r1, [pc, #220]	@ (8001564 <main+0x198>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fcc0 	bl	8000e0c <__aeabi_fdiv>
 800148c:	4603      	mov	r3, r0
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  Ledstatus = HandlAdctoLed(voltage);
 8001490:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001492:	f7ff fee3 	bl	800125c <HandlAdctoLed>
 8001496:	4603      	mov	r3, r0
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <main+0x18c>)
 800149c:	701a      	strb	r2, [r3, #0]
	  prinLedStatus();
 800149e:	f7ff fd9d 	bl	8000fdc <prinLedStatus>
	  handlSlideSwitch();
 80014a2:	f7ff fe17 	bl	80010d4 <handlSlideSwitch>
	  handlSlideToBuzzer();
 80014a6:	f7ff fe4b 	bl	8001140 <handlSlideToBuzzer>

	  // Формируем строку для вывода
	  char buf[20];
	  sprintf(buf, "VOLTAGE %.2f", voltage);
 80014aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80014ac:	f7fe ffbc 	bl	8000428 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80014b8:	492b      	ldr	r1, [pc, #172]	@ (8001568 <main+0x19c>)
 80014ba:	f005 fc19 	bl	8006cf0 <siprintf>

	  SSD1306_GotoXY(0, 20);
 80014be:	2114      	movs	r1, #20
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 fc69 	bl	8001d98 <SSD1306_GotoXY>
	  SSD1306_Puts(buf, &Font_7x10, 1);
 80014c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ca:	2201      	movs	r2, #1
 80014cc:	491f      	ldr	r1, [pc, #124]	@ (800154c <main+0x180>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fcf6 	bl	8001ec0 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80014d4:	f000 fbbc 	bl	8001c50 <SSD1306_UpdateScreen>


	  AHT10_ReadData();
 80014d8:	f7ff fefe 	bl	80012d8 <AHT10_ReadData>

	  char buf2[20];
	  sprintf(buf2, "Temperature %.2f", AHT10_Temperature);
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <main+0x1a0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffa1 	bl	8000428 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	f107 0014 	add.w	r0, r7, #20
 80014ee:	4920      	ldr	r1, [pc, #128]	@ (8001570 <main+0x1a4>)
 80014f0:	f005 fbfe 	bl	8006cf0 <siprintf>

	  SSD1306_GotoXY(0, 30);
 80014f4:	211e      	movs	r1, #30
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 fc4e 	bl	8001d98 <SSD1306_GotoXY>
	  SSD1306_Puts(buf2, &Font_7x10, 1);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2201      	movs	r2, #1
 8001502:	4912      	ldr	r1, [pc, #72]	@ (800154c <main+0x180>)
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fcdb 	bl	8001ec0 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800150a:	f000 fba1 	bl	8001c50 <SSD1306_UpdateScreen>

	  char buf3[20];
	  sprintf(buf3, "Humidity %.2f", AHT10_Humidity);
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <main+0x1a8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff88 	bl	8000428 <__aeabi_f2d>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4638      	mov	r0, r7
 800151e:	4916      	ldr	r1, [pc, #88]	@ (8001578 <main+0x1ac>)
 8001520:	f005 fbe6 	bl	8006cf0 <siprintf>

	  SSD1306_GotoXY(0, 40);
 8001524:	2128      	movs	r1, #40	@ 0x28
 8001526:	2000      	movs	r0, #0
 8001528:	f000 fc36 	bl	8001d98 <SSD1306_GotoXY>
	  SSD1306_Puts(buf3, &Font_7x10, 1);
 800152c:	463b      	mov	r3, r7
 800152e:	2201      	movs	r2, #1
 8001530:	4906      	ldr	r1, [pc, #24]	@ (800154c <main+0x180>)
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fcc4 	bl	8001ec0 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001538:	f000 fb8a 	bl	8001c50 <SSD1306_UpdateScreen>
  {
 800153c:	bf00      	nop
 800153e:	e788      	b.n	8001452 <main+0x86>
 8001540:	200002f4 	.word	0x200002f4
 8001544:	2000033c 	.word	0x2000033c
 8001548:	20000228 	.word	0x20000228
 800154c:	20000000 	.word	0x20000000
 8001550:	08008f88 	.word	0x08008f88
 8001554:	08008f90 	.word	0x08008f90
 8001558:	200003cc 	.word	0x200003cc
 800155c:	200003d6 	.word	0x200003d6
 8001560:	40533333 	.word	0x40533333
 8001564:	457ff000 	.word	0x457ff000
 8001568:	08008f98 	.word	0x08008f98
 800156c:	200003e4 	.word	0x200003e4
 8001570:	08008fa8 	.word	0x08008fa8
 8001574:	200003e8 	.word	0x200003e8
 8001578:	08008fbc 	.word	0x08008fbc

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001586:	2228      	movs	r2, #40	@ 0x28
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fc15 	bl	8006dba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015bc:	2300      	movs	r3, #0
 80015be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015c0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80015c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 f914 	bl	80047f8 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80015d6:	f000 fa71 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fb80 	bl	8004cfc <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001602:	f000 fa5b 	bl	8001abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800160a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800160e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fd00 	bl	8005018 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800161e:	f000 fa4d 	bl	8001abc <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3750      	adds	r7, #80	@ 0x50
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800163e:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <MX_ADC1_Init+0x78>)
 8001640:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800164a:	2201      	movs	r2, #1
 800164c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001656:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800165a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_ADC1_Init+0x74>)
 8001664:	2201      	movs	r2, #1
 8001666:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001668:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800166a:	f001 f85d 	bl	8002728 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 fa22 	bl	8001abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001678:	2308      	movs	r3, #8
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2301      	movs	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_ADC1_Init+0x74>)
 800168a:	f001 fae5 	bl	8002c58 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001694:	f000 fa12 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000228 	.word	0x20000228
 80016a4:	40012400 	.word	0x40012400

080016a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016ae:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <MX_I2C2_Init+0x54>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016b4:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <MX_I2C2_Init+0x58>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_I2C2_Init+0x50>)
 80016e6:	f001 ff25 	bl	8003534 <HAL_I2C_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016f0:	f000 f9e4 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000258 	.word	0x20000258
 80016fc:	40005800 	.word	0x40005800
 8001700:	00061a80 	.word	0x00061a80

08001704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <MX_TIM2_Init+0xac>)
 8001728:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800172c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <MX_TIM2_Init+0xac>)
 8001730:	223f      	movs	r2, #63	@ 0x3f
 8001732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <MX_TIM2_Init+0xac>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800173a:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <MX_TIM2_Init+0xac>)
 800173c:	22f9      	movs	r2, #249	@ 0xf9
 800173e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_TIM2_Init+0xac>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_TIM2_Init+0xac>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800174c:	4818      	ldr	r0, [pc, #96]	@ (80017b0 <MX_TIM2_Init+0xac>)
 800174e:	f003 fdcf 	bl	80052f0 <HAL_TIM_PWM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001758:	f000 f9b0 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4619      	mov	r1, r3
 800176a:	4811      	ldr	r0, [pc, #68]	@ (80017b0 <MX_TIM2_Init+0xac>)
 800176c:	f004 fb22 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001776:	f000 f9a1 	bl	8001abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177a:	2360      	movs	r3, #96	@ 0x60
 800177c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_TIM2_Init+0xac>)
 8001792:	f004 f833 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800179c:	f000 f98e 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <MX_TIM2_Init+0xac>)
 80017a2:	f000 fd7b 	bl	800229c <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	@ 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200002ac 	.word	0x200002ac

080017b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	@ 0x30
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2224      	movs	r2, #36	@ 0x24
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 faf9 	bl	8006dba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <MX_TIM3_Init+0xa0>)
 80017d2:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <MX_TIM3_Init+0xa4>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <MX_TIM3_Init+0xa0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <MX_TIM3_Init+0xa0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <MX_TIM3_Init+0xa0>)
 80017e4:	221e      	movs	r2, #30
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <MX_TIM3_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <MX_TIM3_Init+0xa0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800180c:	2301      	movs	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	@ (8001854 <MX_TIM3_Init+0xa0>)
 8001820:	f003 febc 	bl	800559c <HAL_TIM_Encoder_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800182a:	f000 f947 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	@ (8001854 <MX_TIM3_Init+0xa0>)
 800183c:	f004 faba 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001846:	f000 f939 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	@ 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002f4 	.word	0x200002f4
 8001858:	40000400 	.word	0x40000400

0800185c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800187e:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <MX_TIM4_Init+0xd4>)
 8001880:	4a2c      	ldr	r2, [pc, #176]	@ (8001934 <MX_TIM4_Init+0xd8>)
 8001882:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8001884:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <MX_TIM4_Init+0xd4>)
 8001886:	223f      	movs	r2, #63	@ 0x3f
 8001888:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <MX_TIM4_Init+0xd4>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001890:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <MX_TIM4_Init+0xd4>)
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <MX_TIM4_Init+0xd4>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <MX_TIM4_Init+0xd4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018a2:	4823      	ldr	r0, [pc, #140]	@ (8001930 <MX_TIM4_Init+0xd4>)
 80018a4:	f003 fd24 	bl	80052f0 <HAL_TIM_PWM_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80018ae:	f000 f905 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	4619      	mov	r1, r3
 80018c0:	481b      	ldr	r0, [pc, #108]	@ (8001930 <MX_TIM4_Init+0xd4>)
 80018c2:	f004 fa77 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80018cc:	f000 f8f6 	bl	8001abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d0:	2360      	movs	r3, #96	@ 0x60
 80018d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4812      	ldr	r0, [pc, #72]	@ (8001930 <MX_TIM4_Init+0xd4>)
 80018e8:	f003 ff88 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018f2:	f000 f8e3 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2204      	movs	r2, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <MX_TIM4_Init+0xd4>)
 80018fe:	f003 ff7d 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001908:	f000 f8d8 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2208      	movs	r2, #8
 8001910:	4619      	mov	r1, r3
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <MX_TIM4_Init+0xd4>)
 8001914:	f003 ff72 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800191e:	f000 f8cd 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001922:	4803      	ldr	r0, [pc, #12]	@ (8001930 <MX_TIM4_Init+0xd4>)
 8001924:	f000 fcba 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	@ 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000033c 	.word	0x2000033c
 8001934:	40000800 	.word	0x40000800

08001938 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <MX_USART1_UART_Init+0x50>)
 8001940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_USART1_UART_Init+0x4c>)
 8001970:	f004 fa7e 	bl	8005e70 <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800197a:	f000 f89f 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000384 	.word	0x20000384
 8001988:	40013800 	.word	0x40013800

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a0:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a41      	ldr	r2, [pc, #260]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b3f      	ldr	r3, [pc, #252]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a3b      	ldr	r2, [pc, #236]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a35      	ldr	r2, [pc, #212]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019d6:	f043 0308 	orr.w	r3, r3, #8
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <MX_GPIO_Init+0x120>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80019ee:	4830      	ldr	r0, [pc, #192]	@ (8001ab0 <MX_GPIO_Init+0x124>)
 80019f0:	f001 fd6f 	bl	80034d2 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2110      	movs	r1, #16
 80019f8:	482e      	ldr	r0, [pc, #184]	@ (8001ab4 <MX_GPIO_Init+0x128>)
 80019fa:	f001 fd6a 	bl	80034d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SlideSwitch_Pin */
  GPIO_InitStruct.Pin = SlideSwitch_Pin;
 80019fe:	2301      	movs	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SlideSwitch_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4828      	ldr	r0, [pc, #160]	@ (8001ab4 <MX_GPIO_Init+0x128>)
 8001a12:	f001 fbc3 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001a16:	2306      	movs	r3, #6
 8001a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1a:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <MX_GPIO_Init+0x12c>)
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	4822      	ldr	r0, [pc, #136]	@ (8001ab4 <MX_GPIO_Init+0x128>)
 8001a2a:	f001 fbb7 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001a2e:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8001a32:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	481a      	ldr	r0, [pc, #104]	@ (8001ab0 <MX_GPIO_Init+0x124>)
 8001a48:	f001 fba8 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDR_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDR_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	4619      	mov	r1, r3
 8001a62:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <MX_GPIO_Init+0x128>)
 8001a64:	f001 fb9a 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <MX_GPIO_Init+0x12c>)
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <MX_GPIO_Init+0x128>)
 8001a7e:	f001 fb8d 	bl	800319c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2007      	movs	r0, #7
 8001a88:	f001 fb51 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a8c:	2007      	movs	r0, #7
 8001a8e:	f001 fb6a 	bl	8003166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2008      	movs	r0, #8
 8001a98:	f001 fb49 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a9c:	2008      	movs	r0, #8
 8001a9e:	f001 fb62 	bl	8003166 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	10110000 	.word	0x10110000

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <Error_Handler+0x8>

08001ac8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ace:	f000 fa1d 	bl	8001f0c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ad2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2178      	movs	r1, #120	@ 0x78
 8001ada:	485b      	ldr	r0, [pc, #364]	@ (8001c48 <SSD1306_Init+0x180>)
 8001adc:	f002 f9d8 	bl	8003e90 <HAL_I2C_IsDeviceReady>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e0a9      	b.n	8001c3e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001aea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001aee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001af0:	e002      	b.n	8001af8 <SSD1306_Init+0x30>
		p--;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001afe:	22ae      	movs	r2, #174	@ 0xae
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	@ 0x78
 8001b04:	f000 fa7c 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001b08:	2220      	movs	r2, #32
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	@ 0x78
 8001b0e:	f000 fa77 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b12:	2210      	movs	r2, #16
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	@ 0x78
 8001b18:	f000 fa72 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b1c:	22b0      	movs	r2, #176	@ 0xb0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	@ 0x78
 8001b22:	f000 fa6d 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001b26:	22c8      	movs	r2, #200	@ 0xc8
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2078      	movs	r0, #120	@ 0x78
 8001b2c:	f000 fa68 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	2078      	movs	r0, #120	@ 0x78
 8001b36:	f000 fa63 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2078      	movs	r0, #120	@ 0x78
 8001b40:	f000 fa5e 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	2078      	movs	r0, #120	@ 0x78
 8001b4a:	f000 fa59 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b4e:	2281      	movs	r2, #129	@ 0x81
 8001b50:	2100      	movs	r1, #0
 8001b52:	2078      	movs	r0, #120	@ 0x78
 8001b54:	f000 fa54 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b58:	22ff      	movs	r2, #255	@ 0xff
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2078      	movs	r0, #120	@ 0x78
 8001b5e:	f000 fa4f 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b62:	22a1      	movs	r2, #161	@ 0xa1
 8001b64:	2100      	movs	r1, #0
 8001b66:	2078      	movs	r0, #120	@ 0x78
 8001b68:	f000 fa4a 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b6c:	22a6      	movs	r2, #166	@ 0xa6
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2078      	movs	r0, #120	@ 0x78
 8001b72:	f000 fa45 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b76:	22a8      	movs	r2, #168	@ 0xa8
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2078      	movs	r0, #120	@ 0x78
 8001b7c:	f000 fa40 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b80:	223f      	movs	r2, #63	@ 0x3f
 8001b82:	2100      	movs	r1, #0
 8001b84:	2078      	movs	r0, #120	@ 0x78
 8001b86:	f000 fa3b 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b8a:	22a4      	movs	r2, #164	@ 0xa4
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2078      	movs	r0, #120	@ 0x78
 8001b90:	f000 fa36 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b94:	22d3      	movs	r2, #211	@ 0xd3
 8001b96:	2100      	movs	r1, #0
 8001b98:	2078      	movs	r0, #120	@ 0x78
 8001b9a:	f000 fa31 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2078      	movs	r0, #120	@ 0x78
 8001ba4:	f000 fa2c 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ba8:	22d5      	movs	r2, #213	@ 0xd5
 8001baa:	2100      	movs	r1, #0
 8001bac:	2078      	movs	r0, #120	@ 0x78
 8001bae:	f000 fa27 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001bb2:	22f0      	movs	r2, #240	@ 0xf0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2078      	movs	r0, #120	@ 0x78
 8001bb8:	f000 fa22 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001bbc:	22d9      	movs	r2, #217	@ 0xd9
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2078      	movs	r0, #120	@ 0x78
 8001bc2:	f000 fa1d 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001bc6:	2222      	movs	r2, #34	@ 0x22
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2078      	movs	r0, #120	@ 0x78
 8001bcc:	f000 fa18 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001bd0:	22da      	movs	r2, #218	@ 0xda
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2078      	movs	r0, #120	@ 0x78
 8001bd6:	f000 fa13 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001bda:	2212      	movs	r2, #18
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2078      	movs	r0, #120	@ 0x78
 8001be0:	f000 fa0e 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001be4:	22db      	movs	r2, #219	@ 0xdb
 8001be6:	2100      	movs	r1, #0
 8001be8:	2078      	movs	r0, #120	@ 0x78
 8001bea:	f000 fa09 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001bee:	2220      	movs	r2, #32
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2078      	movs	r0, #120	@ 0x78
 8001bf4:	f000 fa04 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001bf8:	228d      	movs	r2, #141	@ 0x8d
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2078      	movs	r0, #120	@ 0x78
 8001bfe:	f000 f9ff 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c02:	2214      	movs	r2, #20
 8001c04:	2100      	movs	r1, #0
 8001c06:	2078      	movs	r0, #120	@ 0x78
 8001c08:	f000 f9fa 	bl	8002000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001c0c:	22af      	movs	r2, #175	@ 0xaf
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2078      	movs	r0, #120	@ 0x78
 8001c12:	f000 f9f5 	bl	8002000 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001c16:	222e      	movs	r2, #46	@ 0x2e
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2078      	movs	r0, #120	@ 0x78
 8001c1c:	f000 f9f0 	bl	8002000 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f843 	bl	8001cac <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001c26:	f000 f813 	bl	8001c50 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <SSD1306_Init+0x184>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SSD1306_Init+0x184>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <SSD1306_Init+0x184>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000258 	.word	0x20000258
 8001c4c:	200007f0 	.word	0x200007f0

08001c50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
 8001c5a:	e01d      	b.n	8001c98 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	3b50      	subs	r3, #80	@ 0x50
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	2078      	movs	r0, #120	@ 0x78
 8001c68:	f000 f9ca 	bl	8002000 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2078      	movs	r0, #120	@ 0x78
 8001c72:	f000 f9c5 	bl	8002000 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c76:	2210      	movs	r2, #16
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2078      	movs	r0, #120	@ 0x78
 8001c7c:	f000 f9c0 	bl	8002000 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	01db      	lsls	r3, r3, #7
 8001c84:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <SSD1306_UpdateScreen+0x58>)
 8001c86:	441a      	add	r2, r3
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	2140      	movs	r1, #64	@ 0x40
 8001c8c:	2078      	movs	r0, #120	@ 0x78
 8001c8e:	f000 f951 	bl	8001f34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	3301      	adds	r3, #1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9de      	bls.n	8001c5c <SSD1306_UpdateScreen+0xc>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200003f0 	.word	0x200003f0

08001cac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <SSD1306_Fill+0x14>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <SSD1306_Fill+0x16>
 8001cc0:	23ff      	movs	r3, #255	@ 0xff
 8001cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <SSD1306_Fill+0x2c>)
 8001cca:	f005 f876 	bl	8006dba <memset>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003f0 	.word	0x200003f0

08001cdc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	70fb      	strb	r3, [r7, #3]
	if (
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cf2:	d848      	bhi.n	8001d86 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001cf4:	88bb      	ldrh	r3, [r7, #4]
 8001cf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cf8:	d845      	bhi.n	8001d86 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001cfa:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <SSD1306_DrawPixel+0xb4>)
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d11a      	bne.n	8001d4c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	08db      	lsrs	r3, r3, #3
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	01db      	lsls	r3, r3, #7
 8001d22:	4413      	add	r3, r2
 8001d24:	4a1b      	ldr	r2, [pc, #108]	@ (8001d94 <SSD1306_DrawPixel+0xb8>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b259      	sxtb	r1, r3
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	01db      	lsls	r3, r3, #7
 8001d42:	4413      	add	r3, r2
 8001d44:	b2c9      	uxtb	r1, r1
 8001d46:	4a13      	ldr	r2, [pc, #76]	@ (8001d94 <SSD1306_DrawPixel+0xb8>)
 8001d48:	54d1      	strb	r1, [r2, r3]
 8001d4a:	e01d      	b.n	8001d88 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	b298      	uxth	r0, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	01db      	lsls	r3, r3, #7
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d94 <SSD1306_DrawPixel+0xb8>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	b25a      	sxtb	r2, r3
 8001d60:	88bb      	ldrh	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4013      	ands	r3, r2
 8001d74:	b259      	sxtb	r1, r3
 8001d76:	88fa      	ldrh	r2, [r7, #6]
 8001d78:	4603      	mov	r3, r0
 8001d7a:	01db      	lsls	r3, r3, #7
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b2c9      	uxtb	r1, r1
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <SSD1306_DrawPixel+0xb8>)
 8001d82:	54d1      	strb	r1, [r2, r3]
 8001d84:	e000      	b.n	8001d88 <SSD1306_DrawPixel+0xac>
		return;
 8001d86:	bf00      	nop
	}
}
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	200007f0 	.word	0x200007f0
 8001d94:	200003f0 	.word	0x200003f0

08001d98 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460a      	mov	r2, r1
 8001da2:	80fb      	strh	r3, [r7, #6]
 8001da4:	4613      	mov	r3, r2
 8001da6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001da8:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <SSD1306_GotoXY+0x28>)
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001dae:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <SSD1306_GotoXY+0x28>)
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	8053      	strh	r3, [r2, #2]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200007f0 	.word	0x200007f0

08001dc4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dd4:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
	if (
 8001de0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001de2:	dc07      	bgt.n	8001df4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001de4:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001de6:	885b      	ldrh	r3, [r3, #2]
 8001de8:	461a      	mov	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001df0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001df2:	dd01      	ble.n	8001df8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e05d      	b.n	8001eb4 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e04b      	b.n	8001e96 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	3b20      	subs	r3, #32
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	7849      	ldrb	r1, [r1, #1]
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	440b      	add	r3, r1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e030      	b.n	8001e84 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e32:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b298      	uxth	r0, r3
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001e40:	885a      	ldrh	r2, [r3, #2]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	79ba      	ldrb	r2, [r7, #6]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7ff ff45 	bl	8001cdc <SSD1306_DrawPixel>
 8001e52:	e014      	b.n	8001e7e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001e56:	881a      	ldrh	r2, [r3, #0]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b298      	uxth	r0, r3
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001e62:	885a      	ldrh	r2, [r3, #2]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f7ff ff2f 	bl	8001cdc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	3301      	adds	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d3c8      	bcc.n	8001e22 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d3ad      	bcc.n	8001dfe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <SSD1306_Putc+0xf8>)
 8001eb0:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200007f0 	.word	0x200007f0

08001ec0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ece:	e012      	b.n	8001ef6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff73 	bl	8001dc4 <SSD1306_Putc>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d002      	beq.n	8001ef0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	e008      	b.n	8001f02 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1e8      	bne.n	8001ed0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	781b      	ldrb	r3, [r3, #0]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}


void ssd1306_I2C_Init() {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <ssd1306_I2C_Init+0x24>)
 8001f14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f16:	e002      	b.n	8001f1e <ssd1306_I2C_Init+0x12>
		p--;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	0003d090 	.word	0x0003d090

08001f34 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b0c7      	sub	sp, #284	@ 0x11c
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001f42:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001f46:	600a      	str	r2, [r1, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f4e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f52:	4622      	mov	r2, r4
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f5a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001f5e:	4602      	mov	r2, r0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001f7a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001f88:	e015      	b.n	8001fb6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001f8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001f8e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001f92:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	441a      	add	r2, r3
 8001f9a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	7811      	ldrb	r1, [r2, #0]
 8001fa2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fa6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001faa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001fac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001fb6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fc0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d8df      	bhi.n	8001f8a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001fca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f107 020c 	add.w	r2, r7, #12
 8001fe8:	200a      	movs	r0, #10
 8001fea:	9000      	str	r0, [sp, #0]
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <ssd1306_I2C_WriteMulti+0xc8>)
 8001fee:	f001 fbe5 	bl	80037bc <HAL_I2C_Master_Transmit>
}
 8001ff2:	bf00      	nop
 8001ff4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	20000258 	.word	0x20000258

08002000 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	460b      	mov	r3, r1
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	4613      	mov	r3, r2
 8002010:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002016:	797b      	ldrb	r3, [r7, #5]
 8002018:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	b299      	uxth	r1, r3
 800201e:	f107 020c 	add.w	r2, r7, #12
 8002022:	230a      	movs	r3, #10
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2302      	movs	r3, #2
 8002028:	4803      	ldr	r0, [pc, #12]	@ (8002038 <ssd1306_I2C_Write+0x38>)
 800202a:	f001 fbc7 	bl	80037bc <HAL_I2C_Master_Transmit>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000258 	.word	0x20000258

0800203c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_MspInit+0x5c>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_MspInit+0x5c>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6193      	str	r3, [r2, #24]
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_MspInit+0x5c>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_MspInit+0x5c>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a0e      	ldr	r2, [pc, #56]	@ (8002098 <HAL_MspInit+0x5c>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <HAL_MspInit+0x5c>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_MspInit+0x60>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_MspInit+0x60>)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000

080020a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0310 	add.w	r3, r7, #16
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a14      	ldr	r2, [pc, #80]	@ (800210c <HAL_ADC_MspInit+0x6c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d121      	bne.n	8002104 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020c0:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <HAL_ADC_MspInit+0x70>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <HAL_ADC_MspInit+0x70>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <HAL_ADC_MspInit+0x70>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_ADC_MspInit+0x70>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <HAL_ADC_MspInit+0x70>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_ADC_MspInit+0x70>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	4619      	mov	r1, r3
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <HAL_ADC_MspInit+0x74>)
 8002100:	f001 f84c 	bl	800319c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40012400 	.word	0x40012400
 8002110:	40021000 	.word	0x40021000
 8002114:	40010c00 	.word	0x40010c00

08002118 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a16      	ldr	r2, [pc, #88]	@ (800218c <HAL_I2C_MspInit+0x74>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d124      	bne.n	8002182 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_I2C_MspInit+0x78>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <HAL_I2C_MspInit+0x78>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_I2C_MspInit+0x78>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002150:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002154:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002156:	2312      	movs	r3, #18
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4619      	mov	r1, r3
 8002164:	480b      	ldr	r0, [pc, #44]	@ (8002194 <HAL_I2C_MspInit+0x7c>)
 8002166:	f001 f819 	bl	800319c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_I2C_MspInit+0x78>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a08      	ldr	r2, [pc, #32]	@ (8002190 <HAL_I2C_MspInit+0x78>)
 8002170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_I2C_MspInit+0x78>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40005800 	.word	0x40005800
 8002190:	40021000 	.word	0x40021000
 8002194:	40010c00 	.word	0x40010c00

08002198 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a8:	d10c      	bne.n	80021c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <HAL_TIM_PWM_MspInit+0x58>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_TIM_PWM_MspInit+0x58>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_TIM_PWM_MspInit+0x58>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021c2:	e010      	b.n	80021e6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10b      	bne.n	80021e6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_TIM_PWM_MspInit+0x58>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_TIM_PWM_MspInit+0x58>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	61d3      	str	r3, [r2, #28]
 80021da:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_TIM_PWM_MspInit+0x58>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40000800 	.word	0x40000800

080021f8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_TIM_Encoder_MspInit+0x94>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d135      	bne.n	8002284 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x98>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x98>)
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	61d3      	str	r3, [r2, #28]
 8002224:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x98>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x98>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x98>)
 8002236:	f043 0308 	orr.w	r3, r3, #8
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_TIM_Encoder_MspInit+0x98>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 8002248:	2330      	movs	r3, #48	@ 0x30
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	480e      	ldr	r0, [pc, #56]	@ (8002294 <HAL_TIM_Encoder_MspInit+0x9c>)
 800225c:	f000 ff9e 	bl	800319c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
 800227e:	4a06      	ldr	r2, [pc, #24]	@ (8002298 <HAL_TIM_Encoder_MspInit+0xa0>)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	@ 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40000400 	.word	0x40000400
 8002290:	40021000 	.word	0x40021000
 8002294:	40010c00 	.word	0x40010c00
 8002298:	40010000 	.word	0x40010000

0800229c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ba:	d12b      	bne.n	8002314 <HAL_TIM_MspPostInit+0x78>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b26      	ldr	r3, [pc, #152]	@ (8002358 <HAL_TIM_MspPostInit+0xbc>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a25      	ldr	r2, [pc, #148]	@ (8002358 <HAL_TIM_MspPostInit+0xbc>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_TIM_MspPostInit+0xbc>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2302      	movs	r3, #2
 80022e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	481c      	ldr	r0, [pc, #112]	@ (800235c <HAL_TIM_MspPostInit+0xc0>)
 80022ea:	f000 ff57 	bl	800319c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <HAL_TIM_MspPostInit+0xc4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <HAL_TIM_MspPostInit+0xc4>)
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002312:	e01d      	b.n	8002350 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM4)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <HAL_TIM_MspPostInit+0xc8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d118      	bne.n	8002350 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_TIM_MspPostInit+0xbc>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_TIM_MspPostInit+0xbc>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6193      	str	r3, [r2, #24]
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_TIM_MspPostInit+0xbc>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002336:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2302      	movs	r3, #2
 8002342:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4807      	ldr	r0, [pc, #28]	@ (8002368 <HAL_TIM_MspPostInit+0xcc>)
 800234c:	f000 ff26 	bl	800319c <HAL_GPIO_Init>
}
 8002350:	bf00      	nop
 8002352:	3728      	adds	r7, #40	@ 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800
 8002360:	40010000 	.word	0x40010000
 8002364:	40000800 	.word	0x40000800
 8002368:	40010c00 	.word	0x40010c00

0800236c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1c      	ldr	r2, [pc, #112]	@ (80023f8 <HAL_UART_MspInit+0x8c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d131      	bne.n	80023f0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_UART_MspInit+0x90>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a1a      	ldr	r2, [pc, #104]	@ (80023fc <HAL_UART_MspInit+0x90>)
 8002392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <HAL_UART_MspInit+0x90>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_UART_MspInit+0x90>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <HAL_UART_MspInit+0x90>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_UART_MspInit+0x90>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	4619      	mov	r1, r3
 80023d0:	480b      	ldr	r0, [pc, #44]	@ (8002400 <HAL_UART_MspInit+0x94>)
 80023d2:	f000 fee3 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	4619      	mov	r1, r3
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <HAL_UART_MspInit+0x94>)
 80023ec:	f000 fed6 	bl	800319c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010800 	.word	0x40010800

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <NMI_Handler+0x4>

0800240c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <MemManage_Handler+0x4>

0800241c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <UsageFault_Handler+0x4>

0800242c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002454:	f000 f928 	bl	80026a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8002460:	2002      	movs	r0, #2
 8002462:	f001 f84f 	bl	8003504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}

0800246a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 800246e:	2004      	movs	r0, #4
 8002470:	f001 f848 	bl	8003504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <_kill>:

int _kill(int pid, int sig)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002490:	f004 fce6 	bl	8006e60 <__errno>
 8002494:	4603      	mov	r3, r0
 8002496:	2216      	movs	r2, #22
 8002498:	601a      	str	r2, [r3, #0]
  return -1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_exit>:

void _exit (int status)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ae:	f04f 31ff 	mov.w	r1, #4294967295
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffe7 	bl	8002486 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <_exit+0x12>

080024bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e00a      	b.n	80024e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ce:	f3af 8000 	nop.w
 80024d2:	4601      	mov	r1, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbf0      	blt.n	80024ce <_read+0x12>
  }

  return len;
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800251c:	605a      	str	r2, [r3, #4]
  return 0;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <_isatty>:

int _isatty(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
	...

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f004 fc6a 	bl	8006e60 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20005000 	.word	0x20005000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	200007f8 	.word	0x200007f8
 80025c0:	20000950 	.word	0x20000950

080025c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d0:	f7ff fff8 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480b      	ldr	r0, [pc, #44]	@ (8002604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025d6:	490c      	ldr	r1, [pc, #48]	@ (8002608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025d8:	4a0c      	ldr	r2, [pc, #48]	@ (800260c <LoopFillZerobss+0x16>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025ec:	4c09      	ldr	r4, [pc, #36]	@ (8002614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fa:	f004 fc37 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025fe:	f7fe fee5 	bl	80013cc <main>
  bx lr
 8002602:	4770      	bx	lr
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800260c:	08009b04 	.word	0x08009b04
  ldr r2, =_sbss
 8002610:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002614:	2000094c 	.word	0x2000094c

08002618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC1_2_IRQHandler>
	...

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002620:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_Init+0x28>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <HAL_Init+0x28>)
 8002626:	f043 0310 	orr.w	r3, r3, #16
 800262a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262c:	2003      	movs	r0, #3
 800262e:	f000 fd73 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002632:	200f      	movs	r0, #15
 8002634:	f000 f808 	bl	8002648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002638:	f7ff fd00 	bl	800203c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000

08002648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_InitTick+0x54>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_InitTick+0x58>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd8b 	bl	8003182 <HAL_SYSTICK_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00e      	b.n	8002694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d80a      	bhi.n	8002692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f000 fd53 	bl	800312e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002688:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <HAL_InitTick+0x5c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000038 	.word	0x20000038
 80026a0:	20000040 	.word	0x20000040
 80026a4:	2000003c 	.word	0x2000003c

080026a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_IncTick+0x1c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_IncTick+0x20>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	4a03      	ldr	r2, [pc, #12]	@ (80026c8 <HAL_IncTick+0x20>)
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000040 	.word	0x20000040
 80026c8:	200007fc 	.word	0x200007fc

080026cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b02      	ldr	r3, [pc, #8]	@ (80026dc <HAL_GetTick+0x10>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	200007fc 	.word	0x200007fc

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff fff0 	bl	80026cc <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffe0 	bl	80026cc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000040 	.word	0x20000040

08002728 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0be      	b.n	80028c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fc9a 	bl	80020a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fbc5 	bl	8002efc <ADC_ConversionStop_Disable>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8099 	bne.w	80028b6 <HAL_ADC_Init+0x18e>
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8095 	bne.w	80028b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002794:	f023 0302 	bic.w	r3, r3, #2
 8002798:	f043 0202 	orr.w	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7b1b      	ldrb	r3, [r3, #12]
 80027ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c0:	d003      	beq.n	80027ca <HAL_ADC_Init+0xa2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_ADC_Init+0xa8>
 80027ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_Init+0xaa>
 80027d0:	2300      	movs	r3, #0
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7d1b      	ldrb	r3, [r3, #20]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d119      	bne.n	8002814 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7b1b      	ldrb	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	035a      	lsls	r2, r3, #13
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e00b      	b.n	8002814 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <HAL_ADC_Init+0x1a8>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002844:	d003      	beq.n	800284e <HAL_ADC_Init+0x126>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d104      	bne.n	8002858 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	3b01      	subs	r3, #1
 8002854:	051b      	lsls	r3, r3, #20
 8002856:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	430a      	orrs	r2, r1
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <HAL_ADC_Init+0x1ac>)
 8002874:	4013      	ands	r3, r2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d10b      	bne.n	8002894 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002892:	e018      	b.n	80028c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	f023 0312 	bic.w	r3, r3, #18
 800289c:	f043 0210 	orr.w	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028b4:	e007      	b.n	80028c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	ffe1f7fd 	.word	0xffe1f7fd
 80028d4:	ff1f0efe 	.word	0xff1f0efe

080028d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Start+0x1a>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e098      	b.n	8002a24 <HAL_ADC_Start+0x14c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 faa4 	bl	8002e48 <ADC_Enable>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8087 	bne.w	8002a1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a41      	ldr	r2, [pc, #260]	@ (8002a2c <HAL_ADC_Start+0x154>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d105      	bne.n	8002936 <HAL_ADC_Start+0x5e>
 800292a:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <HAL_ADC_Start+0x158>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d026      	beq.n	800299e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002958:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002960:	e01d      	b.n	800299e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2f      	ldr	r2, [pc, #188]	@ (8002a30 <HAL_ADC_Start+0x158>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_ADC_Start+0xaa>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <HAL_ADC_Start+0x154>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <HAL_ADC_Start+0xc6>
 8002982:	4b2b      	ldr	r3, [pc, #172]	@ (8002a30 <HAL_ADC_Start+0x158>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002996:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	f023 0206 	bic.w	r2, r3, #6
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029b6:	e002      	b.n	80029be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0202 	mvn.w	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029de:	d113      	bne.n	8002a08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029e4:	4a11      	ldr	r2, [pc, #68]	@ (8002a2c <HAL_ADC_Start+0x154>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_ADC_Start+0x158>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e003      	b.n	8002a22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012800 	.word	0x40012800
 8002a30:	40012400 	.word	0x40012400

08002a34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a4a:	f7ff fe3f 	bl	80026cc <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0d3      	b.n	8002c1e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d131      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d12a      	bne.n	8002ae8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a92:	e021      	b.n	8002ad8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d01d      	beq.n	8002ad8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x7e>
 8002aa2:	f7ff fe13 	bl	80026cc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d212      	bcs.n	8002ad8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	f043 0204 	orr.w	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0a2      	b.n	8002c1e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0d6      	beq.n	8002a94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ae6:	e070      	b.n	8002bca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c28 <HAL_ADC_PollForConversion+0x1f4>)
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	2002      	movs	r0, #2
 8002aee:	f002 fb49 	bl	8005184 <HAL_RCCEx_GetPeriphCLKFreq>
 8002af2:	4603      	mov	r3, r0
 8002af4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <HAL_ADC_PollForConversion+0x1f8>)
 8002b00:	400b      	ands	r3, r1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x104>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68d9      	ldr	r1, [r3, #12]
 8002b0c:	4b48      	ldr	r3, [pc, #288]	@ (8002c30 <HAL_ADC_PollForConversion+0x1fc>)
 8002b0e:	400b      	ands	r3, r1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d111      	bne.n	8002b38 <HAL_ADC_PollForConversion+0x104>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6919      	ldr	r1, [r3, #16]
 8002b1a:	4b46      	ldr	r3, [pc, #280]	@ (8002c34 <HAL_ADC_PollForConversion+0x200>)
 8002b1c:	400b      	ands	r3, r1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_ADC_PollForConversion+0x100>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68d9      	ldr	r1, [r3, #12]
 8002b28:	4b43      	ldr	r3, [pc, #268]	@ (8002c38 <HAL_ADC_PollForConversion+0x204>)
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_PollForConversion+0x100>
 8002b30:	2314      	movs	r3, #20
 8002b32:	e020      	b.n	8002b76 <HAL_ADC_PollForConversion+0x142>
 8002b34:	2329      	movs	r3, #41	@ 0x29
 8002b36:	e01e      	b.n	8002b76 <HAL_ADC_PollForConversion+0x142>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6919      	ldr	r1, [r3, #16]
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c34 <HAL_ADC_PollForConversion+0x200>)
 8002b40:	400b      	ands	r3, r1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_ADC_PollForConversion+0x120>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68d9      	ldr	r1, [r3, #12]
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c38 <HAL_ADC_PollForConversion+0x204>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <HAL_ADC_PollForConversion+0x13c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6919      	ldr	r1, [r3, #16]
 8002b5a:	4b38      	ldr	r3, [pc, #224]	@ (8002c3c <HAL_ADC_PollForConversion+0x208>)
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HAL_ADC_PollForConversion+0x140>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68d9      	ldr	r1, [r3, #12]
 8002b68:	4b34      	ldr	r3, [pc, #208]	@ (8002c3c <HAL_ADC_PollForConversion+0x208>)
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_PollForConversion+0x140>
 8002b70:	2354      	movs	r3, #84	@ 0x54
 8002b72:	e000      	b.n	8002b76 <HAL_ADC_PollForConversion+0x142>
 8002b74:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b7c:	e021      	b.n	8002bc2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d01a      	beq.n	8002bbc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_ADC_PollForConversion+0x168>
 8002b8c:	f7ff fd9e 	bl	80026cc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d20f      	bcs.n	8002bbc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d90b      	bls.n	8002bbc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e030      	b.n	8002c1e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d8d9      	bhi.n	8002b7e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0212 	mvn.w	r2, #18
 8002bd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002bea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002bee:	d115      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000038 	.word	0x20000038
 8002c2c:	24924924 	.word	0x24924924
 8002c30:	00924924 	.word	0x00924924
 8002c34:	12492492 	.word	0x12492492
 8002c38:	00492492 	.word	0x00492492
 8002c3c:	00249249 	.word	0x00249249

08002c40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x20>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0dc      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x1da>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d81c      	bhi.n	8002cc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	3b05      	subs	r3, #5
 8002c9a:	221f      	movs	r2, #31
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4019      	ands	r1, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b05      	subs	r3, #5
 8002cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cc0:	e03c      	b.n	8002d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d81c      	bhi.n	8002d04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	3b23      	subs	r3, #35	@ 0x23
 8002cdc:	221f      	movs	r2, #31
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4019      	ands	r1, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b23      	subs	r3, #35	@ 0x23
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d02:	e01b      	b.n	8002d3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b41      	subs	r3, #65	@ 0x41
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	4019      	ands	r1, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b41      	subs	r3, #65	@ 0x41
 8002d30:	fa00 f203 	lsl.w	r2, r0, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d91c      	bls.n	8002d7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68d9      	ldr	r1, [r3, #12]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	3b1e      	subs	r3, #30
 8002d56:	2207      	movs	r2, #7
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	4019      	ands	r1, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6898      	ldr	r0, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b1e      	subs	r3, #30
 8002d70:	fa00 f203 	lsl.w	r2, r0, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	e019      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	2207      	movs	r2, #7
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	4019      	ands	r1, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6898      	ldr	r0, [r3, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	fa00 f203 	lsl.w	r2, r0, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d003      	beq.n	8002dc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dbe:	2b11      	cmp	r3, #17
 8002dc0:	d132      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <HAL_ADC_ConfigChannel+0x1e4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d125      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d126      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002de8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d11a      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df2:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <HAL_ADC_ConfigChannel+0x1e8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <HAL_ADC_ConfigChannel+0x1ec>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	0c9a      	lsrs	r2, r3, #18
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e08:	e002      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f9      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x1b2>
 8002e16:	e007      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012400 	.word	0x40012400
 8002e40:	20000038 	.word	0x20000038
 8002e44:	431bde83 	.word	0x431bde83

08002e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d040      	beq.n	8002ee8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef4 <ADC_Enable+0xac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef8 <ADC_Enable+0xb0>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	0c9b      	lsrs	r3, r3, #18
 8002e82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e84:	e002      	b.n	8002e8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f9      	bne.n	8002e86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e92:	f7ff fc1b 	bl	80026cc <HAL_GetTick>
 8002e96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e98:	e01f      	b.n	8002eda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e9a:	f7ff fc17 	bl	80026cc <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d918      	bls.n	8002eda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d011      	beq.n	8002eda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d1d8      	bne.n	8002e9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000038 	.word	0x20000038
 8002ef8:	431bde83 	.word	0x431bde83

08002efc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d12e      	bne.n	8002f74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f26:	f7ff fbd1 	bl	80026cc <HAL_GetTick>
 8002f2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f2c:	e01b      	b.n	8002f66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f2e:	f7ff fbcd 	bl	80026cc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d914      	bls.n	8002f66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10d      	bne.n	8002f66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e007      	b.n	8002f76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d0dc      	beq.n	8002f2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4906      	ldr	r1, [pc, #24]	@ (8003018 <__NVIC_EnableIRQ+0x34>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	@ (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	@ (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	@ 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff90 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff2d 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff42 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff90 	bl	8003070 <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5f 	bl	800301c <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff35 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ffa2 	bl	80030d4 <SysTick_Config>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b08b      	sub	sp, #44	@ 0x2c
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031aa:	2300      	movs	r3, #0
 80031ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ae:	e169      	b.n	8003484 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031b0:	2201      	movs	r2, #1
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f040 8158 	bne.w	800347e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a9a      	ldr	r2, [pc, #616]	@ (800343c <HAL_GPIO_Init+0x2a0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d05e      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031d8:	4a98      	ldr	r2, [pc, #608]	@ (800343c <HAL_GPIO_Init+0x2a0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d875      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031de:	4a98      	ldr	r2, [pc, #608]	@ (8003440 <HAL_GPIO_Init+0x2a4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d058      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031e4:	4a96      	ldr	r2, [pc, #600]	@ (8003440 <HAL_GPIO_Init+0x2a4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d86f      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031ea:	4a96      	ldr	r2, [pc, #600]	@ (8003444 <HAL_GPIO_Init+0x2a8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d052      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031f0:	4a94      	ldr	r2, [pc, #592]	@ (8003444 <HAL_GPIO_Init+0x2a8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d869      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031f6:	4a94      	ldr	r2, [pc, #592]	@ (8003448 <HAL_GPIO_Init+0x2ac>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04c      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031fc:	4a92      	ldr	r2, [pc, #584]	@ (8003448 <HAL_GPIO_Init+0x2ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d863      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 8003202:	4a92      	ldr	r2, [pc, #584]	@ (800344c <HAL_GPIO_Init+0x2b0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d046      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 8003208:	4a90      	ldr	r2, [pc, #576]	@ (800344c <HAL_GPIO_Init+0x2b0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d85d      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 800320e:	2b12      	cmp	r3, #18
 8003210:	d82a      	bhi.n	8003268 <HAL_GPIO_Init+0xcc>
 8003212:	2b12      	cmp	r3, #18
 8003214:	d859      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 8003216:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <HAL_GPIO_Init+0x80>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003297 	.word	0x08003297
 8003220:	08003271 	.word	0x08003271
 8003224:	08003283 	.word	0x08003283
 8003228:	080032c5 	.word	0x080032c5
 800322c:	080032cb 	.word	0x080032cb
 8003230:	080032cb 	.word	0x080032cb
 8003234:	080032cb 	.word	0x080032cb
 8003238:	080032cb 	.word	0x080032cb
 800323c:	080032cb 	.word	0x080032cb
 8003240:	080032cb 	.word	0x080032cb
 8003244:	080032cb 	.word	0x080032cb
 8003248:	080032cb 	.word	0x080032cb
 800324c:	080032cb 	.word	0x080032cb
 8003250:	080032cb 	.word	0x080032cb
 8003254:	080032cb 	.word	0x080032cb
 8003258:	080032cb 	.word	0x080032cb
 800325c:	080032cb 	.word	0x080032cb
 8003260:	08003279 	.word	0x08003279
 8003264:	0800328d 	.word	0x0800328d
 8003268:	4a79      	ldr	r2, [pc, #484]	@ (8003450 <HAL_GPIO_Init+0x2b4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800326e:	e02c      	b.n	80032ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	623b      	str	r3, [r7, #32]
          break;
 8003276:	e029      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	623b      	str	r3, [r7, #32]
          break;
 8003280:	e024      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	3308      	adds	r3, #8
 8003288:	623b      	str	r3, [r7, #32]
          break;
 800328a:	e01f      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	330c      	adds	r3, #12
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e01a      	b.n	80032cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800329e:	2304      	movs	r3, #4
 80032a0:	623b      	str	r3, [r7, #32]
          break;
 80032a2:	e013      	b.n	80032cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	611a      	str	r2, [r3, #16]
          break;
 80032b6:	e009      	b.n	80032cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b8:	2308      	movs	r3, #8
 80032ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	615a      	str	r2, [r3, #20]
          break;
 80032c2:	e003      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
          break;
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x130>
          break;
 80032ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2bff      	cmp	r3, #255	@ 0xff
 80032d0:	d801      	bhi.n	80032d6 <HAL_GPIO_Init+0x13a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_Init+0x13e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2bff      	cmp	r3, #255	@ 0xff
 80032e0:	d802      	bhi.n	80032e8 <HAL_GPIO_Init+0x14c>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	e002      	b.n	80032ee <HAL_GPIO_Init+0x152>
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	3b08      	subs	r3, #8
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	210f      	movs	r1, #15
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	431a      	orrs	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80b1 	beq.w	800347e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800331c:	4b4d      	ldr	r3, [pc, #308]	@ (8003454 <HAL_GPIO_Init+0x2b8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a4c      	ldr	r2, [pc, #304]	@ (8003454 <HAL_GPIO_Init+0x2b8>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b4a      	ldr	r3, [pc, #296]	@ (8003454 <HAL_GPIO_Init+0x2b8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003334:	4a48      	ldr	r2, [pc, #288]	@ (8003458 <HAL_GPIO_Init+0x2bc>)
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a40      	ldr	r2, [pc, #256]	@ (800345c <HAL_GPIO_Init+0x2c0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_GPIO_Init+0x1ec>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3f      	ldr	r2, [pc, #252]	@ (8003460 <HAL_GPIO_Init+0x2c4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00d      	beq.n	8003384 <HAL_GPIO_Init+0x1e8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3e      	ldr	r2, [pc, #248]	@ (8003464 <HAL_GPIO_Init+0x2c8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <HAL_GPIO_Init+0x1e4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3d      	ldr	r2, [pc, #244]	@ (8003468 <HAL_GPIO_Init+0x2cc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_GPIO_Init+0x1e0>
 8003378:	2303      	movs	r3, #3
 800337a:	e006      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 800337c:	2304      	movs	r3, #4
 800337e:	e004      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 8003380:	2302      	movs	r3, #2
 8003382:	e002      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 8003388:	2300      	movs	r3, #0
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	f002 0203 	and.w	r2, r2, #3
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	4093      	lsls	r3, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800339a:	492f      	ldr	r1, [pc, #188]	@ (8003458 <HAL_GPIO_Init+0x2bc>)
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033b4:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	492c      	ldr	r1, [pc, #176]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033c2:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	4928      	ldr	r1, [pc, #160]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033dc:	4b23      	ldr	r3, [pc, #140]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4922      	ldr	r1, [pc, #136]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
 80033e8:	e006      	b.n	80033f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	491e      	ldr	r1, [pc, #120]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d006      	beq.n	8003412 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4918      	ldr	r1, [pc, #96]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003412:	4b16      	ldr	r3, [pc, #88]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	43db      	mvns	r3, r3
 800341a:	4914      	ldr	r1, [pc, #80]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 800341c:	4013      	ands	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d021      	beq.n	8003470 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800342c:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	490e      	ldr	r1, [pc, #56]	@ (800346c <HAL_GPIO_Init+0x2d0>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e021      	b.n	800347e <HAL_GPIO_Init+0x2e2>
 800343a:	bf00      	nop
 800343c:	10320000 	.word	0x10320000
 8003440:	10310000 	.word	0x10310000
 8003444:	10220000 	.word	0x10220000
 8003448:	10210000 	.word	0x10210000
 800344c:	10120000 	.word	0x10120000
 8003450:	10110000 	.word	0x10110000
 8003454:	40021000 	.word	0x40021000
 8003458:	40010000 	.word	0x40010000
 800345c:	40010800 	.word	0x40010800
 8003460:	40010c00 	.word	0x40010c00
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <HAL_GPIO_Init+0x304>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	43db      	mvns	r3, r3
 8003478:	4909      	ldr	r1, [pc, #36]	@ (80034a0 <HAL_GPIO_Init+0x304>)
 800347a:	4013      	ands	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	3301      	adds	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f ae8e 	bne.w	80031b0 <HAL_GPIO_Init+0x14>
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	372c      	adds	r7, #44	@ 0x2c
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e001      	b.n	80034c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
 80034de:	4613      	mov	r3, r2
 80034e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e2:	787b      	ldrb	r3, [r7, #1]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e8:	887a      	ldrh	r2, [r7, #2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034ee:	e003      	b.n	80034f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	041a      	lsls	r2, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	611a      	str	r2, [r3, #16]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
	...

08003504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800350e:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800351a:	4a05      	ldr	r2, [pc, #20]	@ (8003530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fdc8 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40010400 	.word	0x40010400

08003534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e12b      	b.n	800379e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe fddc 	bl	8002118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	@ 0x24
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003598:	f001 fcf8 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4a81      	ldr	r2, [pc, #516]	@ (80037a8 <HAL_I2C_Init+0x274>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d807      	bhi.n	80035b8 <HAL_I2C_Init+0x84>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a80      	ldr	r2, [pc, #512]	@ (80037ac <HAL_I2C_Init+0x278>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bf94      	ite	ls
 80035b0:	2301      	movls	r3, #1
 80035b2:	2300      	movhi	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e006      	b.n	80035c6 <HAL_I2C_Init+0x92>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a7d      	ldr	r2, [pc, #500]	@ (80037b0 <HAL_I2C_Init+0x27c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	bf94      	ite	ls
 80035c0:	2301      	movls	r3, #1
 80035c2:	2300      	movhi	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0e7      	b.n	800379e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a78      	ldr	r2, [pc, #480]	@ (80037b4 <HAL_I2C_Init+0x280>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0c9b      	lsrs	r3, r3, #18
 80035d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a6a      	ldr	r2, [pc, #424]	@ (80037a8 <HAL_I2C_Init+0x274>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d802      	bhi.n	8003608 <HAL_I2C_Init+0xd4>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3301      	adds	r3, #1
 8003606:	e009      	b.n	800361c <HAL_I2C_Init+0xe8>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	4a69      	ldr	r2, [pc, #420]	@ (80037b8 <HAL_I2C_Init+0x284>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	3301      	adds	r3, #1
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	430b      	orrs	r3, r1
 8003622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800362e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	495c      	ldr	r1, [pc, #368]	@ (80037a8 <HAL_I2C_Init+0x274>)
 8003638:	428b      	cmp	r3, r1
 800363a:	d819      	bhi.n	8003670 <HAL_I2C_Init+0x13c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e59      	subs	r1, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fbb1 f3f3 	udiv	r3, r1, r3
 800364a:	1c59      	adds	r1, r3, #1
 800364c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003650:	400b      	ands	r3, r1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_I2C_Init+0x138>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1e59      	subs	r1, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fbb1 f3f3 	udiv	r3, r1, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366a:	e051      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 800366c:	2304      	movs	r3, #4
 800366e:	e04f      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_I2C_Init+0x168>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e58      	subs	r0, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e012      	b.n	80036c2 <HAL_I2C_Init+0x18e>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	0099      	lsls	r1, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x196>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10e      	bne.n	80036f0 <HAL_I2C_Init+0x1bc>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e58      	subs	r0, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	440b      	add	r3, r1
 80036e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ee:	e00f      	b.n	8003710 <HAL_I2C_Init+0x1dc>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	6809      	ldr	r1, [r1, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800373e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6911      	ldr	r1, [r2, #16]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68d2      	ldr	r2, [r2, #12]
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	430b      	orrs	r3, r1
 8003752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	000186a0 	.word	0x000186a0
 80037ac:	001e847f 	.word	0x001e847f
 80037b0:	003d08ff 	.word	0x003d08ff
 80037b4:	431bde83 	.word	0x431bde83
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	460b      	mov	r3, r1
 80037ca:	817b      	strh	r3, [r7, #10]
 80037cc:	4613      	mov	r3, r2
 80037ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7fe ff7c 	bl	80026cc <HAL_GetTick>
 80037d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	f040 80e0 	bne.w	80039a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2319      	movs	r3, #25
 80037ea:	2201      	movs	r2, #1
 80037ec:	4970      	ldr	r1, [pc, #448]	@ (80039b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fdcc 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0d3      	b.n	80039a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_I2C_Master_Transmit+0x50>
 8003808:	2302      	movs	r3, #2
 800380a:	e0cc      	b.n	80039a6 <HAL_I2C_Master_Transmit+0x1ea>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d007      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003840:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2221      	movs	r2, #33	@ 0x21
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2210      	movs	r2, #16
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a50      	ldr	r2, [pc, #320]	@ (80039b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003872:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003874:	8979      	ldrh	r1, [r7, #10]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fc36 	bl	80040ec <I2C_MasterRequestWrite>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e08d      	b.n	80039a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038a0:	e066      	b.n	8003970 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6a39      	ldr	r1, [r7, #32]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fe8a 	bl	80045c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d107      	bne.n	80038ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06b      	b.n	80039a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d11b      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x188>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d017      	beq.n	8003944 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	6a39      	ldr	r1, [r7, #32]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fe81 	bl	8004650 <I2C_WaitOnBTFFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	2b04      	cmp	r3, #4
 800395a:	d107      	bne.n	800396c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e01a      	b.n	80039a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	d194      	bne.n	80038a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	00100002 	.word	0x00100002
 80039b4:	ffff0000 	.word	0xffff0000

080039b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	@ 0x30
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	460b      	mov	r3, r1
 80039c6:	817b      	strh	r3, [r7, #10]
 80039c8:	4613      	mov	r3, r2
 80039ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7fe fe7c 	bl	80026cc <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 824b 	bne.w	8003e7a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2319      	movs	r3, #25
 80039ea:	2201      	movs	r2, #1
 80039ec:	497f      	ldr	r1, [pc, #508]	@ (8003bec <HAL_I2C_Master_Receive+0x234>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fccc 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	e23e      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2C_Master_Receive+0x54>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e237      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d007      	beq.n	8003a32 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2222      	movs	r2, #34	@ 0x22
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	893a      	ldrh	r2, [r7, #8]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a5f      	ldr	r2, [pc, #380]	@ (8003bf0 <HAL_I2C_Master_Receive+0x238>)
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a74:	8979      	ldrh	r1, [r7, #10]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fbb8 	bl	80041f0 <I2C_MasterRequestRead>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e1f8      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d113      	bne.n	8003aba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e1cc      	b.n	8003e54 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d11e      	bne.n	8003b00 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad2:	b672      	cpsid	i
}
 8003ad4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003afc:	b662      	cpsie	i
}
 8003afe:	e035      	b.n	8003b6c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d11e      	bne.n	8003b46 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b18:	b672      	cpsid	i
}
 8003b1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b42:	b662      	cpsie	i
}
 8003b44:	e012      	b.n	8003b6c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b6c:	e172      	b.n	8003e54 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	f200 811f 	bhi.w	8003db6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d123      	bne.n	8003bc8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fdab 	bl	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e173      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bc6:	e145      	b.n	8003e54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d152      	bne.n	8003c76 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <HAL_I2C_Master_Receive+0x23c>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fbd6 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e148      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
 8003bea:	bf00      	nop
 8003bec:	00100002 	.word	0x00100002
 8003bf0:	ffff0000 	.word	0xffff0000
 8003bf4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf8:	b672      	cpsid	i
}
 8003bfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c3e:	b662      	cpsie	i
}
 8003c40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c74:	e0ee      	b.n	8003e54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4981      	ldr	r1, [pc, #516]	@ (8003e84 <HAL_I2C_Master_Receive+0x4cc>)
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fb83 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0f5      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ca0:	b672      	cpsid	i
}
 8003ca2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e88 <HAL_I2C_Master_Receive+0x4d0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	08db      	lsrs	r3, r3, #3
 8003cdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003e8c <HAL_I2C_Master_Receive+0x4d4>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0a1a      	lsrs	r2, r3, #8
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00da      	lsls	r2, r3, #3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d118      	bne.n	8003d2e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d1e:	b662      	cpsie	i
}
 8003d20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0a6      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d1d9      	bne.n	8003cf0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7e:	b662      	cpsie	i
}
 8003d80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003db4:	e04e      	b.n	8003e54 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fc90 	bl	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e058      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d124      	bne.n	8003e54 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f ae88 	bne.w	8003b6e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3728      	adds	r7, #40	@ 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	00010004 	.word	0x00010004
 8003e88:	20000038 	.word	0x20000038
 8003e8c:	14f8b589 	.word	0x14f8b589

08003e90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	@ 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7fe fc14 	bl	80026cc <HAL_GetTick>
 8003ea4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 8111 	bne.w	80040da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4988      	ldr	r1, [pc, #544]	@ (80040e4 <HAL_I2C_IsDeviceReady+0x254>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa62 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e104      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_IsDeviceReady+0x50>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0fd      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2224      	movs	r2, #36	@ 0x24
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a70      	ldr	r2, [pc, #448]	@ (80040e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fa20 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f60:	d103      	bne.n	8003f6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f68:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0b6      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f7e:	f7fe fba5 	bl	80026cc <HAL_GetTick>
 8003f82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fb2:	e025      	b.n	8004000 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7fe fb8a 	bl	80026cc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <HAL_I2C_IsDeviceReady+0x13a>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22a0      	movs	r2, #160	@ 0xa0
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2ba0      	cmp	r3, #160	@ 0xa0
 800400a:	d005      	beq.n	8004018 <HAL_I2C_IsDeviceReady+0x188>
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0x188>
 8004012:	7dbb      	ldrb	r3, [r7, #22]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0cd      	beq.n	8003fb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d129      	bne.n	8004082 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	4921      	ldr	r1, [pc, #132]	@ (80040e4 <HAL_I2C_IsDeviceReady+0x254>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f994 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e036      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e02c      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800409a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2319      	movs	r3, #25
 80040a2:	2201      	movs	r2, #1
 80040a4:	490f      	ldr	r1, [pc, #60]	@ (80040e4 <HAL_I2C_IsDeviceReady+0x254>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f970 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e012      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	f4ff af32 	bcc.w	8003f2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	00100002 	.word	0x00100002
 80040e8:	ffff0000 	.word	0xffff0000

080040ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	460b      	mov	r3, r1
 80040fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d006      	beq.n	8004116 <I2C_MasterRequestWrite+0x2a>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d003      	beq.n	8004116 <I2C_MasterRequestWrite+0x2a>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004114:	d108      	bne.n	8004128 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e00b      	b.n	8004140 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	2b12      	cmp	r3, #18
 800412e:	d107      	bne.n	8004140 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f91d 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004166:	d103      	bne.n	8004170 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e035      	b.n	80041e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800417c:	d108      	bne.n	8004190 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800417e:	897b      	ldrh	r3, [r7, #10]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e01b      	b.n	80041c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	11db      	asrs	r3, r3, #7
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0306 	and.w	r3, r3, #6
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f063 030f 	orn	r3, r3, #15
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	490e      	ldr	r1, [pc, #56]	@ (80041e8 <I2C_MasterRequestWrite+0xfc>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f966 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e010      	b.n	80041e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041be:	897b      	ldrh	r3, [r7, #10]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4907      	ldr	r1, [pc, #28]	@ (80041ec <I2C_MasterRequestWrite+0x100>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f956 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	00010008 	.word	0x00010008
 80041ec:	00010002 	.word	0x00010002

080041f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	460b      	mov	r3, r1
 80041fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004214:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d006      	beq.n	800422a <I2C_MasterRequestRead+0x3a>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d003      	beq.n	800422a <I2C_MasterRequestRead+0x3a>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004228:	d108      	bne.n	800423c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e00b      	b.n	8004254 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	2b11      	cmp	r3, #17
 8004242:	d107      	bne.n	8004254 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f893 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427a:	d103      	bne.n	8004284 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e079      	b.n	800437c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004290:	d108      	bne.n	80042a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e05f      	b.n	8004364 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042a4:	897b      	ldrh	r3, [r7, #10]
 80042a6:	11db      	asrs	r3, r3, #7
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 0306 	and.w	r3, r3, #6
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f063 030f 	orn	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4930      	ldr	r1, [pc, #192]	@ (8004384 <I2C_MasterRequestRead+0x194>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8dc 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e054      	b.n	800437c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042d2:	897b      	ldrh	r3, [r7, #10]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4929      	ldr	r1, [pc, #164]	@ (8004388 <I2C_MasterRequestRead+0x198>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f8cc 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e044      	b.n	800437c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004316:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f831 	bl	800438c <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433e:	d103      	bne.n	8004348 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004346:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e017      	b.n	800437c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800434c:	897b      	ldrh	r3, [r7, #10]
 800434e:	11db      	asrs	r3, r3, #7
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0306 	and.w	r3, r3, #6
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f063 030e 	orn	r3, r3, #14
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4907      	ldr	r1, [pc, #28]	@ (8004388 <I2C_MasterRequestRead+0x198>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f888 	bl	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	00010008 	.word	0x00010008
 8004388:	00010002 	.word	0x00010002

0800438c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800439c:	e048      	b.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d044      	beq.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fe f991 	bl	80026cc <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d139      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10d      	bne.n	80043e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	e00c      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	43da      	mvns	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d116      	bne.n	8004430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e023      	b.n	8004478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10d      	bne.n	8004456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	e00c      	b.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d093      	beq.n	800439e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800448e:	e071      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d123      	bne.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f043 0204 	orr.w	r2, r3, #4
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e067      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d041      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fe f8ec 	bl	80026cc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d136      	bne.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e00b      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e021      	b.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10c      	bne.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	43da      	mvns	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e00b      	b.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	43da      	mvns	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af6d 	bne.w	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045cc:	e034      	b.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f8e3 	bl	800479a <I2C_IsAcknowledgeFailed>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e034      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d028      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fe f871 	bl	80026cc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b80      	cmp	r3, #128	@ 0x80
 8004608:	d016      	beq.n	8004638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d1c3      	bne.n	80045ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465c:	e034      	b.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f89b 	bl	800479a <I2C_IsAcknowledgeFailed>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d028      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe f829 	bl	80026cc <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11d      	bne.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d016      	beq.n	80046c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e007      	b.n	80046d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d1c3      	bne.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ec:	e049      	b.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d119      	bne.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e030      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004730:	f7fd ffcc 	bl	80026cc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d302      	bcc.n	8004746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d11d      	bne.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d016      	beq.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e007      	b.n	8004792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	d1ae      	bne.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b0:	d11b      	bne.n	80047ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
	...

080047f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e272      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8087 	beq.w	8004926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004818:	4b92      	ldr	r3, [pc, #584]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b04      	cmp	r3, #4
 8004822:	d00c      	beq.n	800483e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004824:	4b8f      	ldr	r3, [pc, #572]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 030c 	and.w	r3, r3, #12
 800482c:	2b08      	cmp	r3, #8
 800482e:	d112      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e>
 8004830:	4b8c      	ldr	r3, [pc, #560]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800483c:	d10b      	bne.n	8004856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483e:	4b89      	ldr	r3, [pc, #548]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d06c      	beq.n	8004924 <HAL_RCC_OscConfig+0x12c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d168      	bne.n	8004924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e24c      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x76>
 8004860:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7f      	ldr	r2, [pc, #508]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	e02e      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x98>
 8004876:	4b7b      	ldr	r3, [pc, #492]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7a      	ldr	r2, [pc, #488]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800487c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b78      	ldr	r3, [pc, #480]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a77      	ldr	r2, [pc, #476]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	e01d      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCC_OscConfig+0xbc>
 800489a:	4b72      	ldr	r3, [pc, #456]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a71      	ldr	r2, [pc, #452]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00b      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 80048b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b68      	ldr	r3, [pc, #416]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a67      	ldr	r2, [pc, #412]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd fefa 	bl	80026cc <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7fd fef6 	bl	80026cc <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	@ 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e200      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0xe4>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd fee6 	bl	80026cc <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fd fee2 	bl	80026cc <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	@ 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e1ec      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	4b53      	ldr	r3, [pc, #332]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x10c>
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d063      	beq.n	80049fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004932:	4b4c      	ldr	r3, [pc, #304]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800493e:	4b49      	ldr	r3, [pc, #292]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b08      	cmp	r3, #8
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x18c>
 800494a:	4b46      	ldr	r3, [pc, #280]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b43      	ldr	r3, [pc, #268]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x176>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1c0      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4939      	ldr	r1, [pc, #228]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <HAL_RCC_OscConfig+0x270>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fd fe9b 	bl	80026cc <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fd fe97 	bl	80026cc <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1a1      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4927      	ldr	r1, [pc, #156]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b26      	ldr	r3, [pc, #152]	@ (8004a68 <HAL_RCC_OscConfig+0x270>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fd fe7a 	bl	80026cc <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fd fe76 	bl	80026cc <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e180      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03a      	beq.n	8004a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d019      	beq.n	8004a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b17      	ldr	r3, [pc, #92]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a14:	f7fd fe5a 	bl	80026cc <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fd fe56 	bl	80026cc <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e160      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 face 	bl	8004fdc <RCC_Delay>
 8004a40:	e01c      	b.n	8004a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a42:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <HAL_RCC_OscConfig+0x274>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fd fe40 	bl	80026cc <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4e:	e00f      	b.n	8004a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fd fe3c 	bl	80026cc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d908      	bls.n	8004a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e146      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	42420000 	.word	0x42420000
 8004a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b92      	ldr	r3, [pc, #584]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e9      	bne.n	8004a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a6 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	4b88      	ldr	r3, [pc, #544]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	4a87      	ldr	r2, [pc, #540]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa4:	61d3      	str	r3, [r2, #28]
 8004aa6:	4b85      	ldr	r3, [pc, #532]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b82      	ldr	r3, [pc, #520]	@ (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d118      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a7e      	ldr	r2, [pc, #504]	@ (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ace:	f7fd fdfd 	bl	80026cc <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fd fdf9 	bl	80026cc <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	@ 0x64
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e103      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b75      	ldr	r3, [pc, #468]	@ (8004cc0 <HAL_RCC_OscConfig+0x4c8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x312>
 8004afc:	4b6f      	ldr	r3, [pc, #444]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a6e      	ldr	r2, [pc, #440]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6213      	str	r3, [r2, #32]
 8004b08:	e02d      	b.n	8004b66 <HAL_RCC_OscConfig+0x36e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x334>
 8004b12:	4b6a      	ldr	r3, [pc, #424]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a69      	ldr	r2, [pc, #420]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6213      	str	r3, [r2, #32]
 8004b1e:	4b67      	ldr	r3, [pc, #412]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4a66      	ldr	r2, [pc, #408]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	6213      	str	r3, [r2, #32]
 8004b2a:	e01c      	b.n	8004b66 <HAL_RCC_OscConfig+0x36e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d10c      	bne.n	8004b4e <HAL_RCC_OscConfig+0x356>
 8004b34:	4b61      	ldr	r3, [pc, #388]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4a60      	ldr	r2, [pc, #384]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6213      	str	r3, [r2, #32]
 8004b40:	4b5e      	ldr	r3, [pc, #376]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	4a5d      	ldr	r2, [pc, #372]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6213      	str	r3, [r2, #32]
 8004b4c:	e00b      	b.n	8004b66 <HAL_RCC_OscConfig+0x36e>
 8004b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	4a5a      	ldr	r2, [pc, #360]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6213      	str	r3, [r2, #32]
 8004b5a:	4b58      	ldr	r3, [pc, #352]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4a57      	ldr	r2, [pc, #348]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d015      	beq.n	8004b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fdad 	bl	80026cc <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fd fda9 	bl	80026cc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e0b1      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RCC_OscConfig+0x37e>
 8004b98:	e014      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fd97 	bl	80026cc <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd fd93 	bl	80026cc <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e09b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb8:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bca:	4b3c      	ldr	r3, [pc, #240]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4a3b      	ldr	r2, [pc, #236]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8087 	beq.w	8004cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be0:	4b36      	ldr	r3, [pc, #216]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d061      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d146      	bne.n	8004c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf4:	4b33      	ldr	r3, [pc, #204]	@ (8004cc4 <HAL_RCC_OscConfig+0x4cc>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fd67 	bl	80026cc <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fd fd63 	bl	80026cc <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e06d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c14:	4b29      	ldr	r3, [pc, #164]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c28:	d108      	bne.n	8004c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4921      	ldr	r1, [pc, #132]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a19      	ldr	r1, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	491b      	ldr	r1, [pc, #108]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c54:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <HAL_RCC_OscConfig+0x4cc>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fd37 	bl	80026cc <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fd fd33 	bl	80026cc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e03d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c74:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x46a>
 8004c80:	e035      	b.n	8004cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <HAL_RCC_OscConfig+0x4cc>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fd fd20 	bl	80026cc <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fd fd1c 	bl	80026cc <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e026      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ca2:	4b06      	ldr	r3, [pc, #24]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x498>
 8004cae:	e01e      	b.n	8004cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e019      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <HAL_RCC_OscConfig+0x500>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000

08004cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0d0      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b6a      	ldr	r3, [pc, #424]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d910      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b67      	ldr	r3, [pc, #412]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 0207 	bic.w	r2, r3, #7
 8004d26:	4965      	ldr	r1, [pc, #404]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b63      	ldr	r3, [pc, #396]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0b8      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d58:	4b59      	ldr	r3, [pc, #356]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a58      	ldr	r2, [pc, #352]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d70:	4b53      	ldr	r3, [pc, #332]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a52      	ldr	r2, [pc, #328]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7c:	4b50      	ldr	r3, [pc, #320]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	494d      	ldr	r1, [pc, #308]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d040      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d115      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e07f      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e073      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4936      	ldr	r1, [pc, #216]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7fd fc6e 	bl	80026cc <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7fd fc6a 	bl	80026cc <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e053      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d210      	bcs.n	8004e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0207 	bic.w	r2, r3, #7
 8004e32:	4922      	ldr	r1, [pc, #136]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b20      	ldr	r3, [pc, #128]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e032      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e58:	4b19      	ldr	r3, [pc, #100]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4916      	ldr	r1, [pc, #88]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e76:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	490e      	ldr	r1, [pc, #56]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e8a:	f000 f821 	bl	8004ed0 <HAL_RCC_GetSysClockFreq>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	490a      	ldr	r1, [pc, #40]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	5ccb      	ldrb	r3, [r1, r3]
 8004e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea2:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ea6:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <HAL_RCC_ClockConfig+0x1d0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fbcc 	bl	8002648 <HAL_InitTick>

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40022000 	.word	0x40022000
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	08009740 	.word	0x08009740
 8004ec8:	20000038 	.word	0x20000038
 8004ecc:	2000003c 	.word	0x2000003c

08004ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004eea:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d002      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x30>
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d003      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x36>
 8004efe:	e027      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f00:	4b19      	ldr	r3, [pc, #100]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f02:	613b      	str	r3, [r7, #16]
      break;
 8004f04:	e027      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	0c9b      	lsrs	r3, r3, #18
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a17      	ldr	r2, [pc, #92]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
 8004f12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f1e:	4b11      	ldr	r3, [pc, #68]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	0c5b      	lsrs	r3, r3, #17
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	4a11      	ldr	r2, [pc, #68]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f2a:	5cd3      	ldrb	r3, [r2, r3]
 8004f2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a0d      	ldr	r2, [pc, #52]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f32:	fb03 f202 	mul.w	r2, r3, r2
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	e004      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	613b      	str	r3, [r7, #16]
      break;
 8004f4e:	e002      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f52:	613b      	str	r3, [r7, #16]
      break;
 8004f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f56:	693b      	ldr	r3, [r7, #16]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	007a1200 	.word	0x007a1200
 8004f6c:	08009758 	.word	0x08009758
 8004f70:	08009768 	.word	0x08009768
 8004f74:	003d0900 	.word	0x003d0900

08004f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	20000038 	.word	0x20000038

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f90:	f7ff fff2 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4903      	ldr	r1, [pc, #12]	@ (8004fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	08009750 	.word	0x08009750

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb8:	f7ff ffde 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	0adb      	lsrs	r3, r3, #11
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	@ (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	08009750 	.word	0x08009750

08004fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <RCC_Delay+0x34>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <RCC_Delay+0x38>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0a5b      	lsrs	r3, r3, #9
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ff8:	bf00      	nop
  }
  while (Delay --);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	60fa      	str	r2, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f9      	bne.n	8004ff8 <RCC_Delay+0x1c>
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	20000038 	.word	0x20000038
 8005014:	10624dd3 	.word	0x10624dd3

08005018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d07d      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005038:	4b4f      	ldr	r3, [pc, #316]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005044:	4b4c      	ldr	r3, [pc, #304]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	4a4b      	ldr	r2, [pc, #300]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800504e:	61d3      	str	r3, [r2, #28]
 8005050:	4b49      	ldr	r3, [pc, #292]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505c:	2301      	movs	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	4b46      	ldr	r3, [pc, #280]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d118      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506c:	4b43      	ldr	r3, [pc, #268]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a42      	ldr	r2, [pc, #264]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005078:	f7fd fb28 	bl	80026cc <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507e:	e008      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005080:	f7fd fb24 	bl	80026cc <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e06d      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4b3a      	ldr	r3, [pc, #232]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800509e:	4b36      	ldr	r3, [pc, #216]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d02e      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d027      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050d2:	4a29      	ldr	r2, [pc, #164]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d014      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fd faf3 	bl	80026cc <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e8:	e00a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fd faef 	bl	80026cc <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e036      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ee      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510c:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4917      	ldr	r1, [pc, #92]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	4313      	orrs	r3, r2
 800511c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d105      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800513c:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	490b      	ldr	r1, [pc, #44]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800515a:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4904      	ldr	r1, [pc, #16]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000
 800517c:	40007000 	.word	0x40007000
 8005180:	42420440 	.word	0x42420440

08005184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	f200 808a 	bhi.w	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d045      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d075      	beq.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80051ba:	e082      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80051bc:	4b46      	ldr	r3, [pc, #280]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80051c2:	4b45      	ldr	r3, [pc, #276]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d07b      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	0c9b      	lsrs	r3, r3, #18
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	4a41      	ldr	r2, [pc, #260]	@ (80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80051d8:	5cd3      	ldrb	r3, [r2, r3]
 80051da:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d015      	beq.n	8005212 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051e6:	4b3c      	ldr	r3, [pc, #240]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	0c5b      	lsrs	r3, r3, #17
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	4a3b      	ldr	r2, [pc, #236]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80051f2:	5cd3      	ldrb	r3, [r2, r3]
 80051f4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005200:	4a38      	ldr	r2, [pc, #224]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	fbb2 f2f3 	udiv	r2, r2, r3
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e004      	b.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4a34      	ldr	r2, [pc, #208]	@ (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800521c:	4b2e      	ldr	r3, [pc, #184]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005228:	d102      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	61bb      	str	r3, [r7, #24]
      break;
 800522e:	e04a      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4a2d      	ldr	r2, [pc, #180]	@ (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
      break;
 800523e:	e042      	b.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005240:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005250:	d108      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800525c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e01f      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800526e:	d109      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005270:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800527c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	e00f      	b.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800528a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800528e:	d11c      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005290:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800529c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80052a0:	61bb      	str	r3, [r7, #24]
      break;
 80052a2:	e012      	b.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80052a4:	e011      	b.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052a6:	f7ff fe85 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0b9b      	lsrs	r3, r3, #14
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	61bb      	str	r3, [r7, #24]
      break;
 80052c0:	e004      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80052ca:	bf00      	nop
    }
  }
  return (frequency);
 80052cc:	69bb      	ldr	r3, [r7, #24]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000
 80052dc:	0800976c 	.word	0x0800976c
 80052e0:	0800977c 	.word	0x0800977c
 80052e4:	007a1200 	.word	0x007a1200
 80052e8:	003d0900 	.word	0x003d0900
 80052ec:	aaaaaaab 	.word	0xaaaaaaab

080052f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e041      	b.n	8005386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc ff3e 	bl	8002198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f000 fb26 	bl	8005980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <HAL_TIM_PWM_Start+0x24>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e022      	b.n	80053fa <HAL_TIM_PWM_Start+0x6a>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d109      	bne.n	80053ce <HAL_TIM_PWM_Start+0x3e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	bf14      	ite	ne
 80053c6:	2301      	movne	r3, #1
 80053c8:	2300      	moveq	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e015      	b.n	80053fa <HAL_TIM_PWM_Start+0x6a>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d109      	bne.n	80053e8 <HAL_TIM_PWM_Start+0x58>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e008      	b.n	80053fa <HAL_TIM_PWM_Start+0x6a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e05e      	b.n	80054c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0x82>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005410:	e013      	b.n	800543a <HAL_TIM_PWM_Start+0xaa>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b04      	cmp	r3, #4
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0x92>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005420:	e00b      	b.n	800543a <HAL_TIM_PWM_Start+0xaa>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xa2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005430:	e003      	b.n	800543a <HAL_TIM_PWM_Start+0xaa>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fc92 	bl	8005d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <HAL_TIM_PWM_Start+0x138>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d107      	bne.n	8005462 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005460:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <HAL_TIM_PWM_Start+0x138>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_TIM_PWM_Start+0xfa>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d009      	beq.n	800548a <HAL_TIM_PWM_Start+0xfa>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a14      	ldr	r2, [pc, #80]	@ (80054cc <HAL_TIM_PWM_Start+0x13c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_PWM_Start+0xfa>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a12      	ldr	r2, [pc, #72]	@ (80054d0 <HAL_TIM_PWM_Start+0x140>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d010      	beq.n	80054be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	e007      	b.n	80054be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800

080054d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fc40 	bl	8005d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <HAL_TIM_PWM_Stop+0xc4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d117      	bne.n	8005526 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <HAL_TIM_PWM_Stop+0x52>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <HAL_TIM_PWM_Stop+0x52>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1a      	ldr	r2, [r3, #32]
 800552c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10f      	bne.n	8005556 <HAL_TIM_PWM_Stop+0x82>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d107      	bne.n	8005556 <HAL_TIM_PWM_Stop+0x82>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <HAL_TIM_PWM_Stop+0x92>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005564:	e013      	b.n	800558e <HAL_TIM_PWM_Stop+0xba>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d104      	bne.n	8005576 <HAL_TIM_PWM_Stop+0xa2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005574:	e00b      	b.n	800558e <HAL_TIM_PWM_Stop+0xba>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Stop+0xb2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005584:	e003      	b.n	800558e <HAL_TIM_PWM_Stop+0xba>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40012c00 	.word	0x40012c00

0800559c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e093      	b.n	80056d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fc fe17 	bl	80021f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055e0:	f023 0307 	bic.w	r3, r3, #7
 80055e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f000 f9c5 	bl	8005980 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	4313      	orrs	r3, r2
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800563c:	f023 030c 	bic.w	r3, r3, #12
 8005640:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005648:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800564c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	4313      	orrs	r3, r2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	011a      	lsls	r2, r3, #4
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	031b      	lsls	r3, r3, #12
 800566c:	4313      	orrs	r3, r2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	4313      	orrs	r3, r2
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005700:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005708:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d110      	bne.n	8005732 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d102      	bne.n	800571c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005716:	7b7b      	ldrb	r3, [r7, #13]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e069      	b.n	80057f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005730:	e031      	b.n	8005796 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d110      	bne.n	800575a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d102      	bne.n	8005744 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800573e:	7b3b      	ldrb	r3, [r7, #12]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d001      	beq.n	8005748 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e055      	b.n	80057f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005758:	e01d      	b.n	8005796 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d108      	bne.n	8005772 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005760:	7bbb      	ldrb	r3, [r7, #14]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005766:	7b7b      	ldrb	r3, [r7, #13]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d102      	bne.n	8005772 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800576c:	7b3b      	ldrb	r3, [r7, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d001      	beq.n	8005776 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e03e      	b.n	80057f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_TIM_Encoder_Start+0xc4>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d008      	beq.n	80057b4 <HAL_TIM_Encoder_Start+0xd4>
 80057a2:	e00f      	b.n	80057c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fadd 	bl	8005d6c <TIM_CCxChannelCmd>
      break;
 80057b2:	e016      	b.n	80057e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2201      	movs	r2, #1
 80057ba:	2104      	movs	r1, #4
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fad5 	bl	8005d6c <TIM_CCxChannelCmd>
      break;
 80057c2:	e00e      	b.n	80057e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2201      	movs	r2, #1
 80057ca:	2100      	movs	r1, #0
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 facd 	bl	8005d6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2201      	movs	r2, #1
 80057d8:	2104      	movs	r1, #4
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fac6 	bl	8005d6c <TIM_CCxChannelCmd>
      break;
 80057e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0201 	orr.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005816:	2302      	movs	r3, #2
 8005818:	e0ae      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	f200 809f 	bhi.w	8005968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005865 	.word	0x08005865
 8005834:	08005969 	.word	0x08005969
 8005838:	08005969 	.word	0x08005969
 800583c:	08005969 	.word	0x08005969
 8005840:	080058a5 	.word	0x080058a5
 8005844:	08005969 	.word	0x08005969
 8005848:	08005969 	.word	0x08005969
 800584c:	08005969 	.word	0x08005969
 8005850:	080058e7 	.word	0x080058e7
 8005854:	08005969 	.word	0x08005969
 8005858:	08005969 	.word	0x08005969
 800585c:	08005969 	.word	0x08005969
 8005860:	08005927 	.word	0x08005927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f8f6 	bl	8005a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0208 	orr.w	r2, r2, #8
 800587e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0204 	bic.w	r2, r2, #4
 800588e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	619a      	str	r2, [r3, #24]
      break;
 80058a2:	e064      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f93c 	bl	8005b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]
      break;
 80058e4:	e043      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f985 	bl	8005bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0208 	orr.w	r2, r2, #8
 8005900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0204 	bic.w	r2, r2, #4
 8005910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69d9      	ldr	r1, [r3, #28]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	61da      	str	r2, [r3, #28]
      break;
 8005924:	e023      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f9cf 	bl	8005cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	021a      	lsls	r2, r3, #8
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	61da      	str	r2, [r3, #28]
      break;
 8005966:	e002      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2f      	ldr	r2, [pc, #188]	@ (8005a50 <TIM_Base_SetConfig+0xd0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_Base_SetConfig+0x30>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599e:	d007      	beq.n	80059b0 <TIM_Base_SetConfig+0x30>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <TIM_Base_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0x30>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005a58 <TIM_Base_SetConfig+0xd8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d108      	bne.n	80059c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <TIM_Base_SetConfig+0xd0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0x62>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0x62>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <TIM_Base_SetConfig+0xd4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0x62>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <TIM_Base_SetConfig+0xd8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a50 <TIM_Base_SetConfig+0xd0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d103      	bne.n	8005a28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f023 0201 	bic.w	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	611a      	str	r2, [r3, #16]
  }
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800

08005a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f023 0201 	bic.w	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 0302 	bic.w	r3, r3, #2
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b24 <TIM_OC1_SetConfig+0xc8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10c      	bne.n	8005ad2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0308 	bic.w	r3, r3, #8
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a13      	ldr	r2, [pc, #76]	@ (8005b24 <TIM_OC1_SetConfig+0xc8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d111      	bne.n	8005afe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	621a      	str	r2, [r3, #32]
}
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40012c00 	.word	0x40012c00

08005b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f023 0210 	bic.w	r2, r3, #16
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0320 	bic.w	r3, r3, #32
 8005b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf8 <TIM_OC2_SetConfig+0xd0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10d      	bne.n	8005ba4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a14      	ldr	r2, [pc, #80]	@ (8005bf8 <TIM_OC2_SetConfig+0xd0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d113      	bne.n	8005bd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	40012c00 	.word	0x40012c00

08005bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	@ (8005ccc <TIM_OC3_SetConfig+0xd0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d10d      	bne.n	8005c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a14      	ldr	r2, [pc, #80]	@ (8005ccc <TIM_OC3_SetConfig+0xd0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d113      	bne.n	8005ca6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40012c00 	.word	0x40012c00

08005cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005d68 <TIM_OC4_SetConfig+0x98>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d109      	bne.n	8005d44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	019b      	lsls	r3, r3, #6
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr
 8005d68:	40012c00 	.word	0x40012c00

08005d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e046      	b.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e18:	d009      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a12      	ldr	r2, [pc, #72]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a10      	ldr	r2, [pc, #64]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10c      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800

08005e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e042      	b.n	8005f08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fc fa68 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2224      	movs	r2, #36	@ 0x24
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f971 	bl	800619c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d175      	bne.n	800601c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UART_Transmit+0x2c>
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e06e      	b.n	800601e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2221      	movs	r2, #33	@ 0x21
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f4e:	f7fc fbbd 	bl	80026cc <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f68:	d108      	bne.n	8005f7c <HAL_UART_Transmit+0x6c>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e003      	b.n	8005f84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f84:	e02e      	b.n	8005fe4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	@ 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f848 	bl	8006026 <UART_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e03a      	b.n	800601e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10b      	bne.n	8005fc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e007      	b.n	8005fd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1cb      	bne.n	8005f86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2140      	movs	r1, #64	@ 0x40
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f814 	bl	8006026 <UART_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e006      	b.n	800601e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b086      	sub	sp, #24
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006036:	e03b      	b.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d037      	beq.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fc fb44 	bl	80026cc <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	6a3a      	ldr	r2, [r7, #32]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <UART_WaitOnFlagUntilTimeout+0x30>
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e03a      	b.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d023      	beq.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b80      	cmp	r3, #128	@ 0x80
 800606c:	d020      	beq.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d01d      	beq.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b08      	cmp	r3, #8
 8006080:	d116      	bne.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f81d 	bl	80060d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2208      	movs	r2, #8
 80060a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e00f      	b.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	429a      	cmp	r2, r3
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d0b4      	beq.n	8006038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b095      	sub	sp, #84	@ 0x54
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	330c      	adds	r3, #12
 80060fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006100:	643a      	str	r2, [r7, #64]	@ 0x40
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e5      	bne.n	80060e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	61fb      	str	r3, [r7, #28]
   return(result);
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006134:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800613a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e5      	bne.n	8006114 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	2b01      	cmp	r3, #1
 800614e:	d119      	bne.n	8006184 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f023 0310 	bic.w	r3, r3, #16
 8006166:	647b      	str	r3, [r7, #68]	@ 0x44
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006170:	61ba      	str	r2, [r7, #24]
 8006172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	613b      	str	r3, [r7, #16]
   return(result);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006192:	bf00      	nop
 8006194:	3754      	adds	r7, #84	@ 0x54
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80061d6:	f023 030c 	bic.w	r3, r3, #12
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	430b      	orrs	r3, r1
 80061e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2c      	ldr	r2, [pc, #176]	@ (80062b0 <UART_SetConfig+0x114>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d103      	bne.n	800620c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006204:	f7fe fed6 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	e002      	b.n	8006212 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800620c:	f7fe febe 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8006210:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009a      	lsls	r2, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <UART_SetConfig+0x118>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	0119      	lsls	r1, r3, #4
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009a      	lsls	r2, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	fbb2 f2f3 	udiv	r2, r2, r3
 8006248:	4b1a      	ldr	r3, [pc, #104]	@ (80062b4 <UART_SetConfig+0x118>)
 800624a:	fba3 0302 	umull	r0, r3, r3, r2
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2064      	movs	r0, #100	@ 0x64
 8006252:	fb00 f303 	mul.w	r3, r0, r3
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	3332      	adds	r3, #50	@ 0x32
 800625c:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <UART_SetConfig+0x118>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006268:	4419      	add	r1, r3
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009a      	lsls	r2, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006280:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <UART_SetConfig+0x118>)
 8006282:	fba3 0302 	umull	r0, r3, r3, r2
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2064      	movs	r0, #100	@ 0x64
 800628a:	fb00 f303 	mul.w	r3, r0, r3
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	3332      	adds	r3, #50	@ 0x32
 8006294:	4a07      	ldr	r2, [pc, #28]	@ (80062b4 <UART_SetConfig+0x118>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	440a      	add	r2, r1
 80062a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40013800 	.word	0x40013800
 80062b4:	51eb851f 	.word	0x51eb851f

080062b8 <__cvt>:
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062be:	461d      	mov	r5, r3
 80062c0:	bfbb      	ittet	lt
 80062c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80062c6:	461d      	movlt	r5, r3
 80062c8:	2300      	movge	r3, #0
 80062ca:	232d      	movlt	r3, #45	@ 0x2d
 80062cc:	b088      	sub	sp, #32
 80062ce:	4614      	mov	r4, r2
 80062d0:	bfb8      	it	lt
 80062d2:	4614      	movlt	r4, r2
 80062d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80062d8:	7013      	strb	r3, [r2, #0]
 80062da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80062e0:	f023 0820 	bic.w	r8, r3, #32
 80062e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062e8:	d005      	beq.n	80062f6 <__cvt+0x3e>
 80062ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062ee:	d100      	bne.n	80062f2 <__cvt+0x3a>
 80062f0:	3601      	adds	r6, #1
 80062f2:	2302      	movs	r3, #2
 80062f4:	e000      	b.n	80062f8 <__cvt+0x40>
 80062f6:	2303      	movs	r3, #3
 80062f8:	aa07      	add	r2, sp, #28
 80062fa:	9204      	str	r2, [sp, #16]
 80062fc:	aa06      	add	r2, sp, #24
 80062fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006302:	e9cd 3600 	strd	r3, r6, [sp]
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	f000 fe6d 	bl	8006fe8 <_dtoa_r>
 800630e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006312:	4607      	mov	r7, r0
 8006314:	d119      	bne.n	800634a <__cvt+0x92>
 8006316:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006318:	07db      	lsls	r3, r3, #31
 800631a:	d50e      	bpl.n	800633a <__cvt+0x82>
 800631c:	eb00 0906 	add.w	r9, r0, r6
 8006320:	2200      	movs	r2, #0
 8006322:	2300      	movs	r3, #0
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7fa fb3e 	bl	80009a8 <__aeabi_dcmpeq>
 800632c:	b108      	cbz	r0, 8006332 <__cvt+0x7a>
 800632e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006332:	2230      	movs	r2, #48	@ 0x30
 8006334:	9b07      	ldr	r3, [sp, #28]
 8006336:	454b      	cmp	r3, r9
 8006338:	d31e      	bcc.n	8006378 <__cvt+0xc0>
 800633a:	4638      	mov	r0, r7
 800633c:	9b07      	ldr	r3, [sp, #28]
 800633e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006340:	1bdb      	subs	r3, r3, r7
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	b008      	add	sp, #32
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800634e:	eb00 0906 	add.w	r9, r0, r6
 8006352:	d1e5      	bne.n	8006320 <__cvt+0x68>
 8006354:	7803      	ldrb	r3, [r0, #0]
 8006356:	2b30      	cmp	r3, #48	@ 0x30
 8006358:	d10a      	bne.n	8006370 <__cvt+0xb8>
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	f7fa fb21 	bl	80009a8 <__aeabi_dcmpeq>
 8006366:	b918      	cbnz	r0, 8006370 <__cvt+0xb8>
 8006368:	f1c6 0601 	rsb	r6, r6, #1
 800636c:	f8ca 6000 	str.w	r6, [sl]
 8006370:	f8da 3000 	ldr.w	r3, [sl]
 8006374:	4499      	add	r9, r3
 8006376:	e7d3      	b.n	8006320 <__cvt+0x68>
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	9107      	str	r1, [sp, #28]
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e7d9      	b.n	8006334 <__cvt+0x7c>

08006380 <__exponent>:
 8006380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006382:	2900      	cmp	r1, #0
 8006384:	bfb6      	itet	lt
 8006386:	232d      	movlt	r3, #45	@ 0x2d
 8006388:	232b      	movge	r3, #43	@ 0x2b
 800638a:	4249      	neglt	r1, r1
 800638c:	2909      	cmp	r1, #9
 800638e:	7002      	strb	r2, [r0, #0]
 8006390:	7043      	strb	r3, [r0, #1]
 8006392:	dd29      	ble.n	80063e8 <__exponent+0x68>
 8006394:	f10d 0307 	add.w	r3, sp, #7
 8006398:	461d      	mov	r5, r3
 800639a:	270a      	movs	r7, #10
 800639c:	fbb1 f6f7 	udiv	r6, r1, r7
 80063a0:	461a      	mov	r2, r3
 80063a2:	fb07 1416 	mls	r4, r7, r6, r1
 80063a6:	3430      	adds	r4, #48	@ 0x30
 80063a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063ac:	460c      	mov	r4, r1
 80063ae:	2c63      	cmp	r4, #99	@ 0x63
 80063b0:	4631      	mov	r1, r6
 80063b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063b6:	dcf1      	bgt.n	800639c <__exponent+0x1c>
 80063b8:	3130      	adds	r1, #48	@ 0x30
 80063ba:	1e94      	subs	r4, r2, #2
 80063bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063c0:	4623      	mov	r3, r4
 80063c2:	1c41      	adds	r1, r0, #1
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	d30a      	bcc.n	80063de <__exponent+0x5e>
 80063c8:	f10d 0309 	add.w	r3, sp, #9
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	42ac      	cmp	r4, r5
 80063d0:	bf88      	it	hi
 80063d2:	2300      	movhi	r3, #0
 80063d4:	3302      	adds	r3, #2
 80063d6:	4403      	add	r3, r0
 80063d8:	1a18      	subs	r0, r3, r0
 80063da:	b003      	add	sp, #12
 80063dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063e6:	e7ed      	b.n	80063c4 <__exponent+0x44>
 80063e8:	2330      	movs	r3, #48	@ 0x30
 80063ea:	3130      	adds	r1, #48	@ 0x30
 80063ec:	7083      	strb	r3, [r0, #2]
 80063ee:	70c1      	strb	r1, [r0, #3]
 80063f0:	1d03      	adds	r3, r0, #4
 80063f2:	e7f1      	b.n	80063d8 <__exponent+0x58>

080063f4 <_printf_float>:
 80063f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f8:	b091      	sub	sp, #68	@ 0x44
 80063fa:	460c      	mov	r4, r1
 80063fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006400:	4616      	mov	r6, r2
 8006402:	461f      	mov	r7, r3
 8006404:	4605      	mov	r5, r0
 8006406:	f000 fce1 	bl	8006dcc <_localeconv_r>
 800640a:	6803      	ldr	r3, [r0, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	9308      	str	r3, [sp, #32]
 8006410:	f7f9 fe9e 	bl	8000150 <strlen>
 8006414:	2300      	movs	r3, #0
 8006416:	930e      	str	r3, [sp, #56]	@ 0x38
 8006418:	f8d8 3000 	ldr.w	r3, [r8]
 800641c:	9009      	str	r0, [sp, #36]	@ 0x24
 800641e:	3307      	adds	r3, #7
 8006420:	f023 0307 	bic.w	r3, r3, #7
 8006424:	f103 0208 	add.w	r2, r3, #8
 8006428:	f894 a018 	ldrb.w	sl, [r4, #24]
 800642c:	f8d4 b000 	ldr.w	fp, [r4]
 8006430:	f8c8 2000 	str.w	r2, [r8]
 8006434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006438:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800643c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800643e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006442:	f04f 32ff 	mov.w	r2, #4294967295
 8006446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800644a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800644e:	4b9c      	ldr	r3, [pc, #624]	@ (80066c0 <_printf_float+0x2cc>)
 8006450:	f7fa fadc 	bl	8000a0c <__aeabi_dcmpun>
 8006454:	bb70      	cbnz	r0, 80064b4 <_printf_float+0xc0>
 8006456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	4b98      	ldr	r3, [pc, #608]	@ (80066c0 <_printf_float+0x2cc>)
 8006460:	f7fa fab6 	bl	80009d0 <__aeabi_dcmple>
 8006464:	bb30      	cbnz	r0, 80064b4 <_printf_float+0xc0>
 8006466:	2200      	movs	r2, #0
 8006468:	2300      	movs	r3, #0
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7fa faa5 	bl	80009bc <__aeabi_dcmplt>
 8006472:	b110      	cbz	r0, 800647a <_printf_float+0x86>
 8006474:	232d      	movs	r3, #45	@ 0x2d
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647a:	4a92      	ldr	r2, [pc, #584]	@ (80066c4 <_printf_float+0x2d0>)
 800647c:	4b92      	ldr	r3, [pc, #584]	@ (80066c8 <_printf_float+0x2d4>)
 800647e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006482:	bf8c      	ite	hi
 8006484:	4690      	movhi	r8, r2
 8006486:	4698      	movls	r8, r3
 8006488:	2303      	movs	r3, #3
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	f02b 0304 	bic.w	r3, fp, #4
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	4633      	mov	r3, r6
 8006498:	4621      	mov	r1, r4
 800649a:	4628      	mov	r0, r5
 800649c:	9700      	str	r7, [sp, #0]
 800649e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80064a0:	f000 f9d4 	bl	800684c <_printf_common>
 80064a4:	3001      	adds	r0, #1
 80064a6:	f040 8090 	bne.w	80065ca <_printf_float+0x1d6>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	b011      	add	sp, #68	@ 0x44
 80064b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	4649      	mov	r1, r9
 80064bc:	f7fa faa6 	bl	8000a0c <__aeabi_dcmpun>
 80064c0:	b148      	cbz	r0, 80064d6 <_printf_float+0xe2>
 80064c2:	464b      	mov	r3, r9
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfb8      	it	lt
 80064c8:	232d      	movlt	r3, #45	@ 0x2d
 80064ca:	4a80      	ldr	r2, [pc, #512]	@ (80066cc <_printf_float+0x2d8>)
 80064cc:	bfb8      	it	lt
 80064ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064d2:	4b7f      	ldr	r3, [pc, #508]	@ (80066d0 <_printf_float+0x2dc>)
 80064d4:	e7d3      	b.n	800647e <_printf_float+0x8a>
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	d13f      	bne.n	8006560 <_printf_float+0x16c>
 80064e0:	2306      	movs	r3, #6
 80064e2:	6063      	str	r3, [r4, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	9206      	str	r2, [sp, #24]
 80064ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80064f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80064f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80064fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006500:	6863      	ldr	r3, [r4, #4]
 8006502:	4642      	mov	r2, r8
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4628      	mov	r0, r5
 8006508:	464b      	mov	r3, r9
 800650a:	910a      	str	r1, [sp, #40]	@ 0x28
 800650c:	f7ff fed4 	bl	80062b8 <__cvt>
 8006510:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006512:	4680      	mov	r8, r0
 8006514:	2947      	cmp	r1, #71	@ 0x47
 8006516:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006518:	d128      	bne.n	800656c <_printf_float+0x178>
 800651a:	1cc8      	adds	r0, r1, #3
 800651c:	db02      	blt.n	8006524 <_printf_float+0x130>
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	4299      	cmp	r1, r3
 8006522:	dd40      	ble.n	80065a6 <_printf_float+0x1b2>
 8006524:	f1aa 0a02 	sub.w	sl, sl, #2
 8006528:	fa5f fa8a 	uxtb.w	sl, sl
 800652c:	4652      	mov	r2, sl
 800652e:	3901      	subs	r1, #1
 8006530:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006534:	910d      	str	r1, [sp, #52]	@ 0x34
 8006536:	f7ff ff23 	bl	8006380 <__exponent>
 800653a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800653c:	4681      	mov	r9, r0
 800653e:	1813      	adds	r3, r2, r0
 8006540:	2a01      	cmp	r2, #1
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	dc02      	bgt.n	800654c <_printf_float+0x158>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d2      	lsls	r2, r2, #31
 800654a:	d501      	bpl.n	8006550 <_printf_float+0x15c>
 800654c:	3301      	adds	r3, #1
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006554:	2b00      	cmp	r3, #0
 8006556:	d09e      	beq.n	8006496 <_printf_float+0xa2>
 8006558:	232d      	movs	r3, #45	@ 0x2d
 800655a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800655e:	e79a      	b.n	8006496 <_printf_float+0xa2>
 8006560:	2947      	cmp	r1, #71	@ 0x47
 8006562:	d1bf      	bne.n	80064e4 <_printf_float+0xf0>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1bd      	bne.n	80064e4 <_printf_float+0xf0>
 8006568:	2301      	movs	r3, #1
 800656a:	e7ba      	b.n	80064e2 <_printf_float+0xee>
 800656c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006570:	d9dc      	bls.n	800652c <_printf_float+0x138>
 8006572:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006576:	d118      	bne.n	80065aa <_printf_float+0x1b6>
 8006578:	2900      	cmp	r1, #0
 800657a:	6863      	ldr	r3, [r4, #4]
 800657c:	dd0b      	ble.n	8006596 <_printf_float+0x1a2>
 800657e:	6121      	str	r1, [r4, #16]
 8006580:	b913      	cbnz	r3, 8006588 <_printf_float+0x194>
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	07d0      	lsls	r0, r2, #31
 8006586:	d502      	bpl.n	800658e <_printf_float+0x19a>
 8006588:	3301      	adds	r3, #1
 800658a:	440b      	add	r3, r1
 800658c:	6123      	str	r3, [r4, #16]
 800658e:	f04f 0900 	mov.w	r9, #0
 8006592:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006594:	e7dc      	b.n	8006550 <_printf_float+0x15c>
 8006596:	b913      	cbnz	r3, 800659e <_printf_float+0x1aa>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	07d2      	lsls	r2, r2, #31
 800659c:	d501      	bpl.n	80065a2 <_printf_float+0x1ae>
 800659e:	3302      	adds	r3, #2
 80065a0:	e7f4      	b.n	800658c <_printf_float+0x198>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7f2      	b.n	800658c <_printf_float+0x198>
 80065a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ac:	4299      	cmp	r1, r3
 80065ae:	db05      	blt.n	80065bc <_printf_float+0x1c8>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	6121      	str	r1, [r4, #16]
 80065b4:	07d8      	lsls	r0, r3, #31
 80065b6:	d5ea      	bpl.n	800658e <_printf_float+0x19a>
 80065b8:	1c4b      	adds	r3, r1, #1
 80065ba:	e7e7      	b.n	800658c <_printf_float+0x198>
 80065bc:	2900      	cmp	r1, #0
 80065be:	bfcc      	ite	gt
 80065c0:	2201      	movgt	r2, #1
 80065c2:	f1c1 0202 	rsble	r2, r1, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	e7e0      	b.n	800658c <_printf_float+0x198>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	055a      	lsls	r2, r3, #21
 80065ce:	d407      	bmi.n	80065e0 <_printf_float+0x1ec>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	4642      	mov	r2, r8
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	d12b      	bne.n	8006636 <_printf_float+0x242>
 80065de:	e764      	b.n	80064aa <_printf_float+0xb6>
 80065e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065e4:	f240 80dc 	bls.w	80067a0 <_printf_float+0x3ac>
 80065e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065ec:	2200      	movs	r2, #0
 80065ee:	2300      	movs	r3, #0
 80065f0:	f7fa f9da 	bl	80009a8 <__aeabi_dcmpeq>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d033      	beq.n	8006660 <_printf_float+0x26c>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4631      	mov	r1, r6
 80065fc:	4628      	mov	r0, r5
 80065fe:	4a35      	ldr	r2, [pc, #212]	@ (80066d4 <_printf_float+0x2e0>)
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af51 	beq.w	80064aa <_printf_float+0xb6>
 8006608:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800660c:	4543      	cmp	r3, r8
 800660e:	db02      	blt.n	8006616 <_printf_float+0x222>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	07d8      	lsls	r0, r3, #31
 8006614:	d50f      	bpl.n	8006636 <_printf_float+0x242>
 8006616:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f af42 	beq.w	80064aa <_printf_float+0xb6>
 8006626:	f04f 0900 	mov.w	r9, #0
 800662a:	f108 38ff 	add.w	r8, r8, #4294967295
 800662e:	f104 0a1a 	add.w	sl, r4, #26
 8006632:	45c8      	cmp	r8, r9
 8006634:	dc09      	bgt.n	800664a <_printf_float+0x256>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	079b      	lsls	r3, r3, #30
 800663a:	f100 8102 	bmi.w	8006842 <_printf_float+0x44e>
 800663e:	68e0      	ldr	r0, [r4, #12]
 8006640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006642:	4298      	cmp	r0, r3
 8006644:	bfb8      	it	lt
 8006646:	4618      	movlt	r0, r3
 8006648:	e731      	b.n	80064ae <_printf_float+0xba>
 800664a:	2301      	movs	r3, #1
 800664c:	4652      	mov	r2, sl
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f af28 	beq.w	80064aa <_printf_float+0xb6>
 800665a:	f109 0901 	add.w	r9, r9, #1
 800665e:	e7e8      	b.n	8006632 <_printf_float+0x23e>
 8006660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	dc38      	bgt.n	80066d8 <_printf_float+0x2e4>
 8006666:	2301      	movs	r3, #1
 8006668:	4631      	mov	r1, r6
 800666a:	4628      	mov	r0, r5
 800666c:	4a19      	ldr	r2, [pc, #100]	@ (80066d4 <_printf_float+0x2e0>)
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f af1a 	beq.w	80064aa <_printf_float+0xb6>
 8006676:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800667a:	ea59 0303 	orrs.w	r3, r9, r3
 800667e:	d102      	bne.n	8006686 <_printf_float+0x292>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	07d9      	lsls	r1, r3, #31
 8006684:	d5d7      	bpl.n	8006636 <_printf_float+0x242>
 8006686:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	f43f af0a 	beq.w	80064aa <_printf_float+0xb6>
 8006696:	f04f 0a00 	mov.w	sl, #0
 800669a:	f104 0b1a 	add.w	fp, r4, #26
 800669e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066a0:	425b      	negs	r3, r3
 80066a2:	4553      	cmp	r3, sl
 80066a4:	dc01      	bgt.n	80066aa <_printf_float+0x2b6>
 80066a6:	464b      	mov	r3, r9
 80066a8:	e793      	b.n	80065d2 <_printf_float+0x1de>
 80066aa:	2301      	movs	r3, #1
 80066ac:	465a      	mov	r2, fp
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f aef8 	beq.w	80064aa <_printf_float+0xb6>
 80066ba:	f10a 0a01 	add.w	sl, sl, #1
 80066be:	e7ee      	b.n	800669e <_printf_float+0x2aa>
 80066c0:	7fefffff 	.word	0x7fefffff
 80066c4:	08009782 	.word	0x08009782
 80066c8:	0800977e 	.word	0x0800977e
 80066cc:	0800978a 	.word	0x0800978a
 80066d0:	08009786 	.word	0x08009786
 80066d4:	0800978e 	.word	0x0800978e
 80066d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066da:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80066de:	4553      	cmp	r3, sl
 80066e0:	bfa8      	it	ge
 80066e2:	4653      	movge	r3, sl
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	4699      	mov	r9, r3
 80066e8:	dc36      	bgt.n	8006758 <_printf_float+0x364>
 80066ea:	f04f 0b00 	mov.w	fp, #0
 80066ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066f2:	f104 021a 	add.w	r2, r4, #26
 80066f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80066fa:	eba3 0309 	sub.w	r3, r3, r9
 80066fe:	455b      	cmp	r3, fp
 8006700:	dc31      	bgt.n	8006766 <_printf_float+0x372>
 8006702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006704:	459a      	cmp	sl, r3
 8006706:	dc3a      	bgt.n	800677e <_printf_float+0x38a>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	07da      	lsls	r2, r3, #31
 800670c:	d437      	bmi.n	800677e <_printf_float+0x38a>
 800670e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006710:	ebaa 0903 	sub.w	r9, sl, r3
 8006714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006716:	ebaa 0303 	sub.w	r3, sl, r3
 800671a:	4599      	cmp	r9, r3
 800671c:	bfa8      	it	ge
 800671e:	4699      	movge	r9, r3
 8006720:	f1b9 0f00 	cmp.w	r9, #0
 8006724:	dc33      	bgt.n	800678e <_printf_float+0x39a>
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800672e:	f104 0b1a 	add.w	fp, r4, #26
 8006732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006734:	ebaa 0303 	sub.w	r3, sl, r3
 8006738:	eba3 0309 	sub.w	r3, r3, r9
 800673c:	4543      	cmp	r3, r8
 800673e:	f77f af7a 	ble.w	8006636 <_printf_float+0x242>
 8006742:	2301      	movs	r3, #1
 8006744:	465a      	mov	r2, fp
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f aeac 	beq.w	80064aa <_printf_float+0xb6>
 8006752:	f108 0801 	add.w	r8, r8, #1
 8006756:	e7ec      	b.n	8006732 <_printf_float+0x33e>
 8006758:	4642      	mov	r2, r8
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	d1c2      	bne.n	80066ea <_printf_float+0x2f6>
 8006764:	e6a1      	b.n	80064aa <_printf_float+0xb6>
 8006766:	2301      	movs	r3, #1
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	920a      	str	r2, [sp, #40]	@ 0x28
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	f43f ae9a 	beq.w	80064aa <_printf_float+0xb6>
 8006776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006778:	f10b 0b01 	add.w	fp, fp, #1
 800677c:	e7bb      	b.n	80066f6 <_printf_float+0x302>
 800677e:	4631      	mov	r1, r6
 8006780:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	d1c0      	bne.n	800670e <_printf_float+0x31a>
 800678c:	e68d      	b.n	80064aa <_printf_float+0xb6>
 800678e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006790:	464b      	mov	r3, r9
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	4442      	add	r2, r8
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	d1c3      	bne.n	8006726 <_printf_float+0x332>
 800679e:	e684      	b.n	80064aa <_printf_float+0xb6>
 80067a0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067a4:	f1ba 0f01 	cmp.w	sl, #1
 80067a8:	dc01      	bgt.n	80067ae <_printf_float+0x3ba>
 80067aa:	07db      	lsls	r3, r3, #31
 80067ac:	d536      	bpl.n	800681c <_printf_float+0x428>
 80067ae:	2301      	movs	r3, #1
 80067b0:	4642      	mov	r2, r8
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	f43f ae76 	beq.w	80064aa <_printf_float+0xb6>
 80067be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f ae6e 	beq.w	80064aa <_printf_float+0xb6>
 80067ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067da:	f7fa f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 80067de:	b9c0      	cbnz	r0, 8006812 <_printf_float+0x41e>
 80067e0:	4653      	mov	r3, sl
 80067e2:	f108 0201 	add.w	r2, r8, #1
 80067e6:	4631      	mov	r1, r6
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b8      	blx	r7
 80067ec:	3001      	adds	r0, #1
 80067ee:	d10c      	bne.n	800680a <_printf_float+0x416>
 80067f0:	e65b      	b.n	80064aa <_printf_float+0xb6>
 80067f2:	2301      	movs	r3, #1
 80067f4:	465a      	mov	r2, fp
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	f43f ae54 	beq.w	80064aa <_printf_float+0xb6>
 8006802:	f108 0801 	add.w	r8, r8, #1
 8006806:	45d0      	cmp	r8, sl
 8006808:	dbf3      	blt.n	80067f2 <_printf_float+0x3fe>
 800680a:	464b      	mov	r3, r9
 800680c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006810:	e6e0      	b.n	80065d4 <_printf_float+0x1e0>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	f104 0b1a 	add.w	fp, r4, #26
 800681a:	e7f4      	b.n	8006806 <_printf_float+0x412>
 800681c:	2301      	movs	r3, #1
 800681e:	4642      	mov	r2, r8
 8006820:	e7e1      	b.n	80067e6 <_printf_float+0x3f2>
 8006822:	2301      	movs	r3, #1
 8006824:	464a      	mov	r2, r9
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	f43f ae3c 	beq.w	80064aa <_printf_float+0xb6>
 8006832:	f108 0801 	add.w	r8, r8, #1
 8006836:	68e3      	ldr	r3, [r4, #12]
 8006838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800683a:	1a5b      	subs	r3, r3, r1
 800683c:	4543      	cmp	r3, r8
 800683e:	dcf0      	bgt.n	8006822 <_printf_float+0x42e>
 8006840:	e6fd      	b.n	800663e <_printf_float+0x24a>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	f104 0919 	add.w	r9, r4, #25
 800684a:	e7f4      	b.n	8006836 <_printf_float+0x442>

0800684c <_printf_common>:
 800684c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	4616      	mov	r6, r2
 8006852:	4698      	mov	r8, r3
 8006854:	688a      	ldr	r2, [r1, #8]
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	4607      	mov	r7, r0
 800685a:	4293      	cmp	r3, r2
 800685c:	bfb8      	it	lt
 800685e:	4613      	movlt	r3, r2
 8006860:	6033      	str	r3, [r6, #0]
 8006862:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006866:	460c      	mov	r4, r1
 8006868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800686c:	b10a      	cbz	r2, 8006872 <_printf_common+0x26>
 800686e:	3301      	adds	r3, #1
 8006870:	6033      	str	r3, [r6, #0]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	0699      	lsls	r1, r3, #26
 8006876:	bf42      	ittt	mi
 8006878:	6833      	ldrmi	r3, [r6, #0]
 800687a:	3302      	addmi	r3, #2
 800687c:	6033      	strmi	r3, [r6, #0]
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	f015 0506 	ands.w	r5, r5, #6
 8006884:	d106      	bne.n	8006894 <_printf_common+0x48>
 8006886:	f104 0a19 	add.w	sl, r4, #25
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	6832      	ldr	r2, [r6, #0]
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	42ab      	cmp	r3, r5
 8006892:	dc2b      	bgt.n	80068ec <_printf_common+0xa0>
 8006894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	3b00      	subs	r3, #0
 800689c:	bf18      	it	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	0692      	lsls	r2, r2, #26
 80068a2:	d430      	bmi.n	8006906 <_printf_common+0xba>
 80068a4:	4641      	mov	r1, r8
 80068a6:	4638      	mov	r0, r7
 80068a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068ac:	47c8      	blx	r9
 80068ae:	3001      	adds	r0, #1
 80068b0:	d023      	beq.n	80068fa <_printf_common+0xae>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	f003 0306 	and.w	r3, r3, #6
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	bf14      	ite	ne
 80068be:	2500      	movne	r5, #0
 80068c0:	6833      	ldreq	r3, [r6, #0]
 80068c2:	f04f 0600 	mov.w	r6, #0
 80068c6:	bf08      	it	eq
 80068c8:	68e5      	ldreq	r5, [r4, #12]
 80068ca:	f104 041a 	add.w	r4, r4, #26
 80068ce:	bf08      	it	eq
 80068d0:	1aed      	subeq	r5, r5, r3
 80068d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80068d6:	bf08      	it	eq
 80068d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068dc:	4293      	cmp	r3, r2
 80068de:	bfc4      	itt	gt
 80068e0:	1a9b      	subgt	r3, r3, r2
 80068e2:	18ed      	addgt	r5, r5, r3
 80068e4:	42b5      	cmp	r5, r6
 80068e6:	d11a      	bne.n	800691e <_printf_common+0xd2>
 80068e8:	2000      	movs	r0, #0
 80068ea:	e008      	b.n	80068fe <_printf_common+0xb2>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4652      	mov	r2, sl
 80068f0:	4641      	mov	r1, r8
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c8      	blx	r9
 80068f6:	3001      	adds	r0, #1
 80068f8:	d103      	bne.n	8006902 <_printf_common+0xb6>
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	3501      	adds	r5, #1
 8006904:	e7c1      	b.n	800688a <_printf_common+0x3e>
 8006906:	2030      	movs	r0, #48	@ 0x30
 8006908:	18e1      	adds	r1, r4, r3
 800690a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006914:	4422      	add	r2, r4
 8006916:	3302      	adds	r3, #2
 8006918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800691c:	e7c2      	b.n	80068a4 <_printf_common+0x58>
 800691e:	2301      	movs	r3, #1
 8006920:	4622      	mov	r2, r4
 8006922:	4641      	mov	r1, r8
 8006924:	4638      	mov	r0, r7
 8006926:	47c8      	blx	r9
 8006928:	3001      	adds	r0, #1
 800692a:	d0e6      	beq.n	80068fa <_printf_common+0xae>
 800692c:	3601      	adds	r6, #1
 800692e:	e7d9      	b.n	80068e4 <_printf_common+0x98>

08006930 <_printf_i>:
 8006930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	7e0f      	ldrb	r7, [r1, #24]
 8006936:	4691      	mov	r9, r2
 8006938:	2f78      	cmp	r7, #120	@ 0x78
 800693a:	4680      	mov	r8, r0
 800693c:	460c      	mov	r4, r1
 800693e:	469a      	mov	sl, r3
 8006940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006946:	d807      	bhi.n	8006958 <_printf_i+0x28>
 8006948:	2f62      	cmp	r7, #98	@ 0x62
 800694a:	d80a      	bhi.n	8006962 <_printf_i+0x32>
 800694c:	2f00      	cmp	r7, #0
 800694e:	f000 80d1 	beq.w	8006af4 <_printf_i+0x1c4>
 8006952:	2f58      	cmp	r7, #88	@ 0x58
 8006954:	f000 80b8 	beq.w	8006ac8 <_printf_i+0x198>
 8006958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800695c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006960:	e03a      	b.n	80069d8 <_printf_i+0xa8>
 8006962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006966:	2b15      	cmp	r3, #21
 8006968:	d8f6      	bhi.n	8006958 <_printf_i+0x28>
 800696a:	a101      	add	r1, pc, #4	@ (adr r1, 8006970 <_printf_i+0x40>)
 800696c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069dd 	.word	0x080069dd
 8006978:	08006959 	.word	0x08006959
 800697c:	08006959 	.word	0x08006959
 8006980:	08006959 	.word	0x08006959
 8006984:	08006959 	.word	0x08006959
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006959 	.word	0x08006959
 8006990:	08006959 	.word	0x08006959
 8006994:	08006959 	.word	0x08006959
 8006998:	08006959 	.word	0x08006959
 800699c:	08006adb 	.word	0x08006adb
 80069a0:	08006a07 	.word	0x08006a07
 80069a4:	08006a95 	.word	0x08006a95
 80069a8:	08006959 	.word	0x08006959
 80069ac:	08006959 	.word	0x08006959
 80069b0:	08006afd 	.word	0x08006afd
 80069b4:	08006959 	.word	0x08006959
 80069b8:	08006a07 	.word	0x08006a07
 80069bc:	08006959 	.word	0x08006959
 80069c0:	08006959 	.word	0x08006959
 80069c4:	08006a9d 	.word	0x08006a9d
 80069c8:	6833      	ldr	r3, [r6, #0]
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6032      	str	r2, [r6, #0]
 80069d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069d8:	2301      	movs	r3, #1
 80069da:	e09c      	b.n	8006b16 <_printf_i+0x1e6>
 80069dc:	6833      	ldr	r3, [r6, #0]
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	6031      	str	r1, [r6, #0]
 80069e4:	0606      	lsls	r6, r0, #24
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0xbc>
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	e003      	b.n	80069f4 <_printf_i+0xc4>
 80069ec:	0645      	lsls	r5, r0, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0xb8>
 80069f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	da03      	bge.n	8006a00 <_printf_i+0xd0>
 80069f8:	232d      	movs	r3, #45	@ 0x2d
 80069fa:	426d      	negs	r5, r5
 80069fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a00:	230a      	movs	r3, #10
 8006a02:	4858      	ldr	r0, [pc, #352]	@ (8006b64 <_printf_i+0x234>)
 8006a04:	e011      	b.n	8006a2a <_printf_i+0xfa>
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	0608      	lsls	r0, r1, #24
 8006a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a10:	d402      	bmi.n	8006a18 <_printf_i+0xe8>
 8006a12:	0649      	lsls	r1, r1, #25
 8006a14:	bf48      	it	mi
 8006a16:	b2ad      	uxthmi	r5, r5
 8006a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a1a:	6033      	str	r3, [r6, #0]
 8006a1c:	bf14      	ite	ne
 8006a1e:	230a      	movne	r3, #10
 8006a20:	2308      	moveq	r3, #8
 8006a22:	4850      	ldr	r0, [pc, #320]	@ (8006b64 <_printf_i+0x234>)
 8006a24:	2100      	movs	r1, #0
 8006a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a2a:	6866      	ldr	r6, [r4, #4]
 8006a2c:	2e00      	cmp	r6, #0
 8006a2e:	60a6      	str	r6, [r4, #8]
 8006a30:	db05      	blt.n	8006a3e <_printf_i+0x10e>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	432e      	orrs	r6, r5
 8006a36:	f021 0104 	bic.w	r1, r1, #4
 8006a3a:	6021      	str	r1, [r4, #0]
 8006a3c:	d04b      	beq.n	8006ad6 <_printf_i+0x1a6>
 8006a3e:	4616      	mov	r6, r2
 8006a40:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a44:	fb03 5711 	mls	r7, r3, r1, r5
 8006a48:	5dc7      	ldrb	r7, [r0, r7]
 8006a4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a4e:	462f      	mov	r7, r5
 8006a50:	42bb      	cmp	r3, r7
 8006a52:	460d      	mov	r5, r1
 8006a54:	d9f4      	bls.n	8006a40 <_printf_i+0x110>
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d10b      	bne.n	8006a72 <_printf_i+0x142>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	07df      	lsls	r7, r3, #31
 8006a5e:	d508      	bpl.n	8006a72 <_printf_i+0x142>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	6861      	ldr	r1, [r4, #4]
 8006a64:	4299      	cmp	r1, r3
 8006a66:	bfde      	ittt	le
 8006a68:	2330      	movle	r3, #48	@ 0x30
 8006a6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a72:	1b92      	subs	r2, r2, r6
 8006a74:	6122      	str	r2, [r4, #16]
 8006a76:	464b      	mov	r3, r9
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f8cd a000 	str.w	sl, [sp]
 8006a80:	aa03      	add	r2, sp, #12
 8006a82:	f7ff fee3 	bl	800684c <_printf_common>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d14a      	bne.n	8006b20 <_printf_i+0x1f0>
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	b004      	add	sp, #16
 8006a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f043 0320 	orr.w	r3, r3, #32
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	2778      	movs	r7, #120	@ 0x78
 8006a9e:	4832      	ldr	r0, [pc, #200]	@ (8006b68 <_printf_i+0x238>)
 8006aa0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	6831      	ldr	r1, [r6, #0]
 8006aa8:	061f      	lsls	r7, r3, #24
 8006aaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aae:	d402      	bmi.n	8006ab6 <_printf_i+0x186>
 8006ab0:	065f      	lsls	r7, r3, #25
 8006ab2:	bf48      	it	mi
 8006ab4:	b2ad      	uxthmi	r5, r5
 8006ab6:	6031      	str	r1, [r6, #0]
 8006ab8:	07d9      	lsls	r1, r3, #31
 8006aba:	bf44      	itt	mi
 8006abc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ac0:	6023      	strmi	r3, [r4, #0]
 8006ac2:	b11d      	cbz	r5, 8006acc <_printf_i+0x19c>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	e7ad      	b.n	8006a24 <_printf_i+0xf4>
 8006ac8:	4826      	ldr	r0, [pc, #152]	@ (8006b64 <_printf_i+0x234>)
 8006aca:	e7e9      	b.n	8006aa0 <_printf_i+0x170>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f023 0320 	bic.w	r3, r3, #32
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	e7f6      	b.n	8006ac4 <_printf_i+0x194>
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	e7bd      	b.n	8006a56 <_printf_i+0x126>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	6825      	ldr	r5, [r4, #0]
 8006ade:	1d18      	adds	r0, r3, #4
 8006ae0:	6961      	ldr	r1, [r4, #20]
 8006ae2:	6030      	str	r0, [r6, #0]
 8006ae4:	062e      	lsls	r6, r5, #24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	d501      	bpl.n	8006aee <_printf_i+0x1be>
 8006aea:	6019      	str	r1, [r3, #0]
 8006aec:	e002      	b.n	8006af4 <_printf_i+0x1c4>
 8006aee:	0668      	lsls	r0, r5, #25
 8006af0:	d5fb      	bpl.n	8006aea <_printf_i+0x1ba>
 8006af2:	8019      	strh	r1, [r3, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	4616      	mov	r6, r2
 8006af8:	6123      	str	r3, [r4, #16]
 8006afa:	e7bc      	b.n	8006a76 <_printf_i+0x146>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	2100      	movs	r1, #0
 8006b00:	1d1a      	adds	r2, r3, #4
 8006b02:	6032      	str	r2, [r6, #0]
 8006b04:	681e      	ldr	r6, [r3, #0]
 8006b06:	6862      	ldr	r2, [r4, #4]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f9d6 	bl	8006eba <memchr>
 8006b0e:	b108      	cbz	r0, 8006b14 <_printf_i+0x1e4>
 8006b10:	1b80      	subs	r0, r0, r6
 8006b12:	6060      	str	r0, [r4, #4]
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b1e:	e7aa      	b.n	8006a76 <_printf_i+0x146>
 8006b20:	4632      	mov	r2, r6
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	47d0      	blx	sl
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d0ad      	beq.n	8006a8a <_printf_i+0x15a>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	079b      	lsls	r3, r3, #30
 8006b32:	d413      	bmi.n	8006b5c <_printf_i+0x22c>
 8006b34:	68e0      	ldr	r0, [r4, #12]
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	4298      	cmp	r0, r3
 8006b3a:	bfb8      	it	lt
 8006b3c:	4618      	movlt	r0, r3
 8006b3e:	e7a6      	b.n	8006a8e <_printf_i+0x15e>
 8006b40:	2301      	movs	r3, #1
 8006b42:	4632      	mov	r2, r6
 8006b44:	4649      	mov	r1, r9
 8006b46:	4640      	mov	r0, r8
 8006b48:	47d0      	blx	sl
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d09d      	beq.n	8006a8a <_printf_i+0x15a>
 8006b4e:	3501      	adds	r5, #1
 8006b50:	68e3      	ldr	r3, [r4, #12]
 8006b52:	9903      	ldr	r1, [sp, #12]
 8006b54:	1a5b      	subs	r3, r3, r1
 8006b56:	42ab      	cmp	r3, r5
 8006b58:	dcf2      	bgt.n	8006b40 <_printf_i+0x210>
 8006b5a:	e7eb      	b.n	8006b34 <_printf_i+0x204>
 8006b5c:	2500      	movs	r5, #0
 8006b5e:	f104 0619 	add.w	r6, r4, #25
 8006b62:	e7f5      	b.n	8006b50 <_printf_i+0x220>
 8006b64:	08009790 	.word	0x08009790
 8006b68:	080097a1 	.word	0x080097a1

08006b6c <std>:
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	e9c0 3300 	strd	r3, r3, [r0]
 8006b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b7a:	6083      	str	r3, [r0, #8]
 8006b7c:	8181      	strh	r1, [r0, #12]
 8006b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b80:	81c2      	strh	r2, [r0, #14]
 8006b82:	6183      	str	r3, [r0, #24]
 8006b84:	4619      	mov	r1, r3
 8006b86:	2208      	movs	r2, #8
 8006b88:	305c      	adds	r0, #92	@ 0x5c
 8006b8a:	f000 f916 	bl	8006dba <memset>
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <std+0x58>)
 8006b90:	6224      	str	r4, [r4, #32]
 8006b92:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b94:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <std+0x5c>)
 8006b96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b98:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <std+0x60>)
 8006b9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd0 <std+0x64>)
 8006b9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <std+0x68>)
 8006ba2:	429c      	cmp	r4, r3
 8006ba4:	d006      	beq.n	8006bb4 <std+0x48>
 8006ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006baa:	4294      	cmp	r4, r2
 8006bac:	d002      	beq.n	8006bb4 <std+0x48>
 8006bae:	33d0      	adds	r3, #208	@ 0xd0
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d105      	bne.n	8006bc0 <std+0x54>
 8006bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bbc:	f000 b97a 	b.w	8006eb4 <__retarget_lock_init_recursive>
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	bf00      	nop
 8006bc4:	08006d35 	.word	0x08006d35
 8006bc8:	08006d57 	.word	0x08006d57
 8006bcc:	08006d8f 	.word	0x08006d8f
 8006bd0:	08006db3 	.word	0x08006db3
 8006bd4:	20000800 	.word	0x20000800

08006bd8 <stdio_exit_handler>:
 8006bd8:	4a02      	ldr	r2, [pc, #8]	@ (8006be4 <stdio_exit_handler+0xc>)
 8006bda:	4903      	ldr	r1, [pc, #12]	@ (8006be8 <stdio_exit_handler+0x10>)
 8006bdc:	4803      	ldr	r0, [pc, #12]	@ (8006bec <stdio_exit_handler+0x14>)
 8006bde:	f000 b869 	b.w	8006cb4 <_fwalk_sglue>
 8006be2:	bf00      	nop
 8006be4:	20000044 	.word	0x20000044
 8006be8:	08008831 	.word	0x08008831
 8006bec:	20000054 	.word	0x20000054

08006bf0 <cleanup_stdio>:
 8006bf0:	6841      	ldr	r1, [r0, #4]
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <cleanup_stdio+0x34>)
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	d001      	beq.n	8006c00 <cleanup_stdio+0x10>
 8006bfc:	f001 fe18 	bl	8008830 <_fflush_r>
 8006c00:	68a1      	ldr	r1, [r4, #8]
 8006c02:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <cleanup_stdio+0x38>)
 8006c04:	4299      	cmp	r1, r3
 8006c06:	d002      	beq.n	8006c0e <cleanup_stdio+0x1e>
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 fe11 	bl	8008830 <_fflush_r>
 8006c0e:	68e1      	ldr	r1, [r4, #12]
 8006c10:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <cleanup_stdio+0x3c>)
 8006c12:	4299      	cmp	r1, r3
 8006c14:	d004      	beq.n	8006c20 <cleanup_stdio+0x30>
 8006c16:	4620      	mov	r0, r4
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f001 be08 	b.w	8008830 <_fflush_r>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	bf00      	nop
 8006c24:	20000800 	.word	0x20000800
 8006c28:	20000868 	.word	0x20000868
 8006c2c:	200008d0 	.word	0x200008d0

08006c30 <global_stdio_init.part.0>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	4b0b      	ldr	r3, [pc, #44]	@ (8006c60 <global_stdio_init.part.0+0x30>)
 8006c34:	4c0b      	ldr	r4, [pc, #44]	@ (8006c64 <global_stdio_init.part.0+0x34>)
 8006c36:	4a0c      	ldr	r2, [pc, #48]	@ (8006c68 <global_stdio_init.part.0+0x38>)
 8006c38:	4620      	mov	r0, r4
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	2104      	movs	r1, #4
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f7ff ff94 	bl	8006b6c <std>
 8006c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c48:	2201      	movs	r2, #1
 8006c4a:	2109      	movs	r1, #9
 8006c4c:	f7ff ff8e 	bl	8006b6c <std>
 8006c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c54:	2202      	movs	r2, #2
 8006c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5a:	2112      	movs	r1, #18
 8006c5c:	f7ff bf86 	b.w	8006b6c <std>
 8006c60:	20000938 	.word	0x20000938
 8006c64:	20000800 	.word	0x20000800
 8006c68:	08006bd9 	.word	0x08006bd9

08006c6c <__sfp_lock_acquire>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	@ (8006c74 <__sfp_lock_acquire+0x8>)
 8006c6e:	f000 b922 	b.w	8006eb6 <__retarget_lock_acquire_recursive>
 8006c72:	bf00      	nop
 8006c74:	20000941 	.word	0x20000941

08006c78 <__sfp_lock_release>:
 8006c78:	4801      	ldr	r0, [pc, #4]	@ (8006c80 <__sfp_lock_release+0x8>)
 8006c7a:	f000 b91d 	b.w	8006eb8 <__retarget_lock_release_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20000941 	.word	0x20000941

08006c84 <__sinit>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	4604      	mov	r4, r0
 8006c88:	f7ff fff0 	bl	8006c6c <__sfp_lock_acquire>
 8006c8c:	6a23      	ldr	r3, [r4, #32]
 8006c8e:	b11b      	cbz	r3, 8006c98 <__sinit+0x14>
 8006c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c94:	f7ff bff0 	b.w	8006c78 <__sfp_lock_release>
 8006c98:	4b04      	ldr	r3, [pc, #16]	@ (8006cac <__sinit+0x28>)
 8006c9a:	6223      	str	r3, [r4, #32]
 8006c9c:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <__sinit+0x2c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f5      	bne.n	8006c90 <__sinit+0xc>
 8006ca4:	f7ff ffc4 	bl	8006c30 <global_stdio_init.part.0>
 8006ca8:	e7f2      	b.n	8006c90 <__sinit+0xc>
 8006caa:	bf00      	nop
 8006cac:	08006bf1 	.word	0x08006bf1
 8006cb0:	20000938 	.word	0x20000938

08006cb4 <_fwalk_sglue>:
 8006cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb8:	4607      	mov	r7, r0
 8006cba:	4688      	mov	r8, r1
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8006cc8:	d505      	bpl.n	8006cd6 <_fwalk_sglue+0x22>
 8006cca:	6824      	ldr	r4, [r4, #0]
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	d1f7      	bne.n	8006cc0 <_fwalk_sglue+0xc>
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d907      	bls.n	8006cec <_fwalk_sglue+0x38>
 8006cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	d003      	beq.n	8006cec <_fwalk_sglue+0x38>
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	47c0      	blx	r8
 8006cea:	4306      	orrs	r6, r0
 8006cec:	3568      	adds	r5, #104	@ 0x68
 8006cee:	e7e9      	b.n	8006cc4 <_fwalk_sglue+0x10>

08006cf0 <siprintf>:
 8006cf0:	b40e      	push	{r1, r2, r3}
 8006cf2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	2400      	movs	r4, #0
 8006cfa:	b09d      	sub	sp, #116	@ 0x74
 8006cfc:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006cfe:	9002      	str	r0, [sp, #8]
 8006d00:	9006      	str	r0, [sp, #24]
 8006d02:	9107      	str	r1, [sp, #28]
 8006d04:	9104      	str	r1, [sp, #16]
 8006d06:	4809      	ldr	r0, [pc, #36]	@ (8006d2c <siprintf+0x3c>)
 8006d08:	4909      	ldr	r1, [pc, #36]	@ (8006d30 <siprintf+0x40>)
 8006d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0e:	9105      	str	r1, [sp, #20]
 8006d10:	6800      	ldr	r0, [r0, #0]
 8006d12:	a902      	add	r1, sp, #8
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d18:	f001 fc0e 	bl	8008538 <_svfiprintf_r>
 8006d1c:	9b02      	ldr	r3, [sp, #8]
 8006d1e:	701c      	strb	r4, [r3, #0]
 8006d20:	b01d      	add	sp, #116	@ 0x74
 8006d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d26:	b003      	add	sp, #12
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000050 	.word	0x20000050
 8006d30:	ffff0208 	.word	0xffff0208

08006d34 <__sread>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3c:	f000 f86c 	bl	8006e18 <_read_r>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	bfab      	itete	ge
 8006d44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d46:	89a3      	ldrhlt	r3, [r4, #12]
 8006d48:	181b      	addge	r3, r3, r0
 8006d4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d4e:	bfac      	ite	ge
 8006d50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d52:	81a3      	strhlt	r3, [r4, #12]
 8006d54:	bd10      	pop	{r4, pc}

08006d56 <__swrite>:
 8006d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	898b      	ldrh	r3, [r1, #12]
 8006d5e:	4605      	mov	r5, r0
 8006d60:	05db      	lsls	r3, r3, #23
 8006d62:	460c      	mov	r4, r1
 8006d64:	4616      	mov	r6, r2
 8006d66:	d505      	bpl.n	8006d74 <__swrite+0x1e>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d70:	f000 f840 	bl	8006df4 <_lseek_r>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	4632      	mov	r2, r6
 8006d78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	4628      	mov	r0, r5
 8006d80:	463b      	mov	r3, r7
 8006d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8a:	f000 b857 	b.w	8006e3c <_write_r>

08006d8e <__sseek>:
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	460c      	mov	r4, r1
 8006d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d96:	f000 f82d 	bl	8006df4 <_lseek_r>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	bf15      	itete	ne
 8006da0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006da2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006da6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006daa:	81a3      	strheq	r3, [r4, #12]
 8006dac:	bf18      	it	ne
 8006dae:	81a3      	strhne	r3, [r4, #12]
 8006db0:	bd10      	pop	{r4, pc}

08006db2 <__sclose>:
 8006db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db6:	f000 b80d 	b.w	8006dd4 <_close_r>

08006dba <memset>:
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d100      	bne.n	8006dc4 <memset+0xa>
 8006dc2:	4770      	bx	lr
 8006dc4:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc8:	e7f9      	b.n	8006dbe <memset+0x4>
	...

08006dcc <_localeconv_r>:
 8006dcc:	4800      	ldr	r0, [pc, #0]	@ (8006dd0 <_localeconv_r+0x4>)
 8006dce:	4770      	bx	lr
 8006dd0:	20000190 	.word	0x20000190

08006dd4 <_close_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4d05      	ldr	r5, [pc, #20]	@ (8006df0 <_close_r+0x1c>)
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7fb fb89 	bl	80024f6 <_close>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_close_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_close_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	2000093c 	.word	0x2000093c

08006df4 <_lseek_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4d05      	ldr	r5, [pc, #20]	@ (8006e14 <_lseek_r+0x20>)
 8006e00:	602a      	str	r2, [r5, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f7fb fb9b 	bl	800253e <_lseek>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_lseek_r+0x1e>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_lseek_r+0x1e>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	2000093c 	.word	0x2000093c

08006e18 <_read_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	2200      	movs	r2, #0
 8006e22:	4d05      	ldr	r5, [pc, #20]	@ (8006e38 <_read_r+0x20>)
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7fb fb48 	bl	80024bc <_read>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_read_r+0x1e>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_read_r+0x1e>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	2000093c 	.word	0x2000093c

08006e3c <_write_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	2200      	movs	r2, #0
 8006e46:	4d05      	ldr	r5, [pc, #20]	@ (8006e5c <_write_r+0x20>)
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7fa f8a0 	bl	8000f90 <_write>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_write_r+0x1e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_write_r+0x1e>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	2000093c 	.word	0x2000093c

08006e60 <__errno>:
 8006e60:	4b01      	ldr	r3, [pc, #4]	@ (8006e68 <__errno+0x8>)
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000050 	.word	0x20000050

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	2600      	movs	r6, #0
 8006e70:	4d0c      	ldr	r5, [pc, #48]	@ (8006ea4 <__libc_init_array+0x38>)
 8006e72:	4c0d      	ldr	r4, [pc, #52]	@ (8006ea8 <__libc_init_array+0x3c>)
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	f002 f874 	bl	8008f68 <_init>
 8006e80:	2600      	movs	r6, #0
 8006e82:	4d0a      	ldr	r5, [pc, #40]	@ (8006eac <__libc_init_array+0x40>)
 8006e84:	4c0a      	ldr	r4, [pc, #40]	@ (8006eb0 <__libc_init_array+0x44>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08009afc 	.word	0x08009afc
 8006ea8:	08009afc 	.word	0x08009afc
 8006eac:	08009afc 	.word	0x08009afc
 8006eb0:	08009b00 	.word	0x08009b00

08006eb4 <__retarget_lock_init_recursive>:
 8006eb4:	4770      	bx	lr

08006eb6 <__retarget_lock_acquire_recursive>:
 8006eb6:	4770      	bx	lr

08006eb8 <__retarget_lock_release_recursive>:
 8006eb8:	4770      	bx	lr

08006eba <memchr>:
 8006eba:	4603      	mov	r3, r0
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	b2c9      	uxtb	r1, r1
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	d101      	bne.n	8006ecc <memchr+0x12>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e003      	b.n	8006ed4 <memchr+0x1a>
 8006ecc:	7804      	ldrb	r4, [r0, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	428c      	cmp	r4, r1
 8006ed2:	d1f6      	bne.n	8006ec2 <memchr+0x8>
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <quorem>:
 8006ed6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	6903      	ldr	r3, [r0, #16]
 8006edc:	690c      	ldr	r4, [r1, #16]
 8006ede:	4607      	mov	r7, r0
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	db7e      	blt.n	8006fe2 <quorem+0x10c>
 8006ee4:	3c01      	subs	r4, #1
 8006ee6:	00a3      	lsls	r3, r4, #2
 8006ee8:	f100 0514 	add.w	r5, r0, #20
 8006eec:	f101 0814 	add.w	r8, r1, #20
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f00:	3301      	adds	r3, #1
 8006f02:	429a      	cmp	r2, r3
 8006f04:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f0c:	d32e      	bcc.n	8006f6c <quorem+0x96>
 8006f0e:	f04f 0a00 	mov.w	sl, #0
 8006f12:	46c4      	mov	ip, r8
 8006f14:	46ae      	mov	lr, r5
 8006f16:	46d3      	mov	fp, sl
 8006f18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f1c:	b298      	uxth	r0, r3
 8006f1e:	fb06 a000 	mla	r0, r6, r0, sl
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	0c02      	lsrs	r2, r0, #16
 8006f26:	fb06 2303 	mla	r3, r6, r3, r2
 8006f2a:	f8de 2000 	ldr.w	r2, [lr]
 8006f2e:	b280      	uxth	r0, r0
 8006f30:	b292      	uxth	r2, r2
 8006f32:	1a12      	subs	r2, r2, r0
 8006f34:	445a      	add	r2, fp
 8006f36:	f8de 0000 	ldr.w	r0, [lr]
 8006f3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f48:	b292      	uxth	r2, r2
 8006f4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f4e:	45e1      	cmp	r9, ip
 8006f50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f54:	f84e 2b04 	str.w	r2, [lr], #4
 8006f58:	d2de      	bcs.n	8006f18 <quorem+0x42>
 8006f5a:	9b00      	ldr	r3, [sp, #0]
 8006f5c:	58eb      	ldr	r3, [r5, r3]
 8006f5e:	b92b      	cbnz	r3, 8006f6c <quorem+0x96>
 8006f60:	9b01      	ldr	r3, [sp, #4]
 8006f62:	3b04      	subs	r3, #4
 8006f64:	429d      	cmp	r5, r3
 8006f66:	461a      	mov	r2, r3
 8006f68:	d32f      	bcc.n	8006fca <quorem+0xf4>
 8006f6a:	613c      	str	r4, [r7, #16]
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f001 f97f 	bl	8008270 <__mcmp>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	db25      	blt.n	8006fc2 <quorem+0xec>
 8006f76:	4629      	mov	r1, r5
 8006f78:	2000      	movs	r0, #0
 8006f7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f7e:	f8d1 c000 	ldr.w	ip, [r1]
 8006f82:	fa1f fe82 	uxth.w	lr, r2
 8006f86:	fa1f f38c 	uxth.w	r3, ip
 8006f8a:	eba3 030e 	sub.w	r3, r3, lr
 8006f8e:	4403      	add	r3, r0
 8006f90:	0c12      	lsrs	r2, r2, #16
 8006f92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fa0:	45c1      	cmp	r9, r8
 8006fa2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fa6:	f841 3b04 	str.w	r3, [r1], #4
 8006faa:	d2e6      	bcs.n	8006f7a <quorem+0xa4>
 8006fac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb4:	b922      	cbnz	r2, 8006fc0 <quorem+0xea>
 8006fb6:	3b04      	subs	r3, #4
 8006fb8:	429d      	cmp	r5, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	d30b      	bcc.n	8006fd6 <quorem+0x100>
 8006fbe:	613c      	str	r4, [r7, #16]
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	b003      	add	sp, #12
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	3b04      	subs	r3, #4
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	d1cb      	bne.n	8006f6a <quorem+0x94>
 8006fd2:	3c01      	subs	r4, #1
 8006fd4:	e7c6      	b.n	8006f64 <quorem+0x8e>
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	d1ef      	bne.n	8006fbe <quorem+0xe8>
 8006fde:	3c01      	subs	r4, #1
 8006fe0:	e7ea      	b.n	8006fb8 <quorem+0xe2>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e7ee      	b.n	8006fc4 <quorem+0xee>
	...

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4614      	mov	r4, r2
 8006fee:	461d      	mov	r5, r3
 8006ff0:	69c7      	ldr	r7, [r0, #28]
 8006ff2:	b097      	sub	sp, #92	@ 0x5c
 8006ff4:	4681      	mov	r9, r0
 8006ff6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006ffa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ffc:	b97f      	cbnz	r7, 800701e <_dtoa_r+0x36>
 8006ffe:	2010      	movs	r0, #16
 8007000:	f000 fe0e 	bl	8007c20 <malloc>
 8007004:	4602      	mov	r2, r0
 8007006:	f8c9 001c 	str.w	r0, [r9, #28]
 800700a:	b920      	cbnz	r0, 8007016 <_dtoa_r+0x2e>
 800700c:	21ef      	movs	r1, #239	@ 0xef
 800700e:	4bac      	ldr	r3, [pc, #688]	@ (80072c0 <_dtoa_r+0x2d8>)
 8007010:	48ac      	ldr	r0, [pc, #688]	@ (80072c4 <_dtoa_r+0x2dc>)
 8007012:	f001 fc6d 	bl	80088f0 <__assert_func>
 8007016:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800701a:	6007      	str	r7, [r0, #0]
 800701c:	60c7      	str	r7, [r0, #12]
 800701e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	b159      	cbz	r1, 800703e <_dtoa_r+0x56>
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	2301      	movs	r3, #1
 800702a:	4093      	lsls	r3, r2
 800702c:	604a      	str	r2, [r1, #4]
 800702e:	608b      	str	r3, [r1, #8]
 8007030:	4648      	mov	r0, r9
 8007032:	f000 feeb 	bl	8007e0c <_Bfree>
 8007036:	2200      	movs	r2, #0
 8007038:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	1e2b      	subs	r3, r5, #0
 8007040:	bfaf      	iteee	ge
 8007042:	2300      	movge	r3, #0
 8007044:	2201      	movlt	r2, #1
 8007046:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800704a:	9307      	strlt	r3, [sp, #28]
 800704c:	bfa8      	it	ge
 800704e:	6033      	strge	r3, [r6, #0]
 8007050:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007054:	4b9c      	ldr	r3, [pc, #624]	@ (80072c8 <_dtoa_r+0x2e0>)
 8007056:	bfb8      	it	lt
 8007058:	6032      	strlt	r2, [r6, #0]
 800705a:	ea33 0308 	bics.w	r3, r3, r8
 800705e:	d112      	bne.n	8007086 <_dtoa_r+0x9e>
 8007060:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007064:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800706c:	4323      	orrs	r3, r4
 800706e:	f000 855e 	beq.w	8007b2e <_dtoa_r+0xb46>
 8007072:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007074:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80072cc <_dtoa_r+0x2e4>
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8560 	beq.w	8007b3e <_dtoa_r+0xb56>
 800707e:	f10a 0303 	add.w	r3, sl, #3
 8007082:	f000 bd5a 	b.w	8007b3a <_dtoa_r+0xb52>
 8007086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800708a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800708e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007092:	2200      	movs	r2, #0
 8007094:	2300      	movs	r3, #0
 8007096:	f7f9 fc87 	bl	80009a8 <__aeabi_dcmpeq>
 800709a:	4607      	mov	r7, r0
 800709c:	b158      	cbz	r0, 80070b6 <_dtoa_r+0xce>
 800709e:	2301      	movs	r3, #1
 80070a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070a6:	b113      	cbz	r3, 80070ae <_dtoa_r+0xc6>
 80070a8:	4b89      	ldr	r3, [pc, #548]	@ (80072d0 <_dtoa_r+0x2e8>)
 80070aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80072d4 <_dtoa_r+0x2ec>
 80070b2:	f000 bd44 	b.w	8007b3e <_dtoa_r+0xb56>
 80070b6:	ab14      	add	r3, sp, #80	@ 0x50
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	ab15      	add	r3, sp, #84	@ 0x54
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4648      	mov	r0, r9
 80070c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070c4:	f001 f984 	bl	80083d0 <__d2b>
 80070c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80070cc:	9003      	str	r0, [sp, #12]
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	d078      	beq.n	80071c4 <_dtoa_r+0x1dc>
 80070d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80070ea:	4619      	mov	r1, r3
 80070ec:	2200      	movs	r2, #0
 80070ee:	4b7a      	ldr	r3, [pc, #488]	@ (80072d8 <_dtoa_r+0x2f0>)
 80070f0:	f7f9 f83a 	bl	8000168 <__aeabi_dsub>
 80070f4:	a36c      	add	r3, pc, #432	@ (adr r3, 80072a8 <_dtoa_r+0x2c0>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	f7f9 f9ed 	bl	80004d8 <__aeabi_dmul>
 80070fe:	a36c      	add	r3, pc, #432	@ (adr r3, 80072b0 <_dtoa_r+0x2c8>)
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f7f9 f832 	bl	800016c <__adddf3>
 8007108:	4604      	mov	r4, r0
 800710a:	4630      	mov	r0, r6
 800710c:	460d      	mov	r5, r1
 800710e:	f7f9 f979 	bl	8000404 <__aeabi_i2d>
 8007112:	a369      	add	r3, pc, #420	@ (adr r3, 80072b8 <_dtoa_r+0x2d0>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f9de 	bl	80004d8 <__aeabi_dmul>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4620      	mov	r0, r4
 8007122:	4629      	mov	r1, r5
 8007124:	f7f9 f822 	bl	800016c <__adddf3>
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	f7f9 fc84 	bl	8000a38 <__aeabi_d2iz>
 8007130:	2200      	movs	r2, #0
 8007132:	4607      	mov	r7, r0
 8007134:	2300      	movs	r3, #0
 8007136:	4620      	mov	r0, r4
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fc3f 	bl	80009bc <__aeabi_dcmplt>
 800713e:	b140      	cbz	r0, 8007152 <_dtoa_r+0x16a>
 8007140:	4638      	mov	r0, r7
 8007142:	f7f9 f95f 	bl	8000404 <__aeabi_i2d>
 8007146:	4622      	mov	r2, r4
 8007148:	462b      	mov	r3, r5
 800714a:	f7f9 fc2d 	bl	80009a8 <__aeabi_dcmpeq>
 800714e:	b900      	cbnz	r0, 8007152 <_dtoa_r+0x16a>
 8007150:	3f01      	subs	r7, #1
 8007152:	2f16      	cmp	r7, #22
 8007154:	d854      	bhi.n	8007200 <_dtoa_r+0x218>
 8007156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800715a:	4b60      	ldr	r3, [pc, #384]	@ (80072dc <_dtoa_r+0x2f4>)
 800715c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 fc2a 	bl	80009bc <__aeabi_dcmplt>
 8007168:	2800      	cmp	r0, #0
 800716a:	d04b      	beq.n	8007204 <_dtoa_r+0x21c>
 800716c:	2300      	movs	r3, #0
 800716e:	3f01      	subs	r7, #1
 8007170:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007172:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007174:	1b9b      	subs	r3, r3, r6
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	bf49      	itett	mi
 800717a:	f1c3 0301 	rsbmi	r3, r3, #1
 800717e:	2300      	movpl	r3, #0
 8007180:	9304      	strmi	r3, [sp, #16]
 8007182:	2300      	movmi	r3, #0
 8007184:	9209      	str	r2, [sp, #36]	@ 0x24
 8007186:	bf54      	ite	pl
 8007188:	9304      	strpl	r3, [sp, #16]
 800718a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800718c:	2f00      	cmp	r7, #0
 800718e:	db3b      	blt.n	8007208 <_dtoa_r+0x220>
 8007190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007192:	970e      	str	r7, [sp, #56]	@ 0x38
 8007194:	443b      	add	r3, r7
 8007196:	9309      	str	r3, [sp, #36]	@ 0x24
 8007198:	2300      	movs	r3, #0
 800719a:	930a      	str	r3, [sp, #40]	@ 0x28
 800719c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d865      	bhi.n	800726e <_dtoa_r+0x286>
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	bfc4      	itt	gt
 80071a6:	3b04      	subgt	r3, #4
 80071a8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80071aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071ac:	bfc8      	it	gt
 80071ae:	2400      	movgt	r4, #0
 80071b0:	f1a3 0302 	sub.w	r3, r3, #2
 80071b4:	bfd8      	it	le
 80071b6:	2401      	movle	r4, #1
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d864      	bhi.n	8007286 <_dtoa_r+0x29e>
 80071bc:	e8df f003 	tbb	[pc, r3]
 80071c0:	2c385553 	.word	0x2c385553
 80071c4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80071c8:	441e      	add	r6, r3
 80071ca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	bfc1      	itttt	gt
 80071d2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071d6:	fa08 f803 	lslgt.w	r8, r8, r3
 80071da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071e2:	bfd6      	itet	le
 80071e4:	f1c3 0320 	rsble	r3, r3, #32
 80071e8:	ea48 0003 	orrgt.w	r0, r8, r3
 80071ec:	fa04 f003 	lslle.w	r0, r4, r3
 80071f0:	f7f9 f8f8 	bl	80003e4 <__aeabi_ui2d>
 80071f4:	2201      	movs	r2, #1
 80071f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071fa:	3e01      	subs	r6, #1
 80071fc:	9212      	str	r2, [sp, #72]	@ 0x48
 80071fe:	e774      	b.n	80070ea <_dtoa_r+0x102>
 8007200:	2301      	movs	r3, #1
 8007202:	e7b5      	b.n	8007170 <_dtoa_r+0x188>
 8007204:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007206:	e7b4      	b.n	8007172 <_dtoa_r+0x18a>
 8007208:	9b04      	ldr	r3, [sp, #16]
 800720a:	1bdb      	subs	r3, r3, r7
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	427b      	negs	r3, r7
 8007210:	930a      	str	r3, [sp, #40]	@ 0x28
 8007212:	2300      	movs	r3, #0
 8007214:	930e      	str	r3, [sp, #56]	@ 0x38
 8007216:	e7c1      	b.n	800719c <_dtoa_r+0x1b4>
 8007218:	2301      	movs	r3, #1
 800721a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800721c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800721e:	eb07 0b03 	add.w	fp, r7, r3
 8007222:	f10b 0301 	add.w	r3, fp, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	9308      	str	r3, [sp, #32]
 800722a:	bfb8      	it	lt
 800722c:	2301      	movlt	r3, #1
 800722e:	e006      	b.n	800723e <_dtoa_r+0x256>
 8007230:	2301      	movs	r3, #1
 8007232:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007234:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd28      	ble.n	800728c <_dtoa_r+0x2a4>
 800723a:	469b      	mov	fp, r3
 800723c:	9308      	str	r3, [sp, #32]
 800723e:	2100      	movs	r1, #0
 8007240:	2204      	movs	r2, #4
 8007242:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007246:	f102 0514 	add.w	r5, r2, #20
 800724a:	429d      	cmp	r5, r3
 800724c:	d926      	bls.n	800729c <_dtoa_r+0x2b4>
 800724e:	6041      	str	r1, [r0, #4]
 8007250:	4648      	mov	r0, r9
 8007252:	f000 fd9b 	bl	8007d8c <_Balloc>
 8007256:	4682      	mov	sl, r0
 8007258:	2800      	cmp	r0, #0
 800725a:	d143      	bne.n	80072e4 <_dtoa_r+0x2fc>
 800725c:	4602      	mov	r2, r0
 800725e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007262:	4b1f      	ldr	r3, [pc, #124]	@ (80072e0 <_dtoa_r+0x2f8>)
 8007264:	e6d4      	b.n	8007010 <_dtoa_r+0x28>
 8007266:	2300      	movs	r3, #0
 8007268:	e7e3      	b.n	8007232 <_dtoa_r+0x24a>
 800726a:	2300      	movs	r3, #0
 800726c:	e7d5      	b.n	800721a <_dtoa_r+0x232>
 800726e:	2401      	movs	r4, #1
 8007270:	2300      	movs	r3, #0
 8007272:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007274:	9320      	str	r3, [sp, #128]	@ 0x80
 8007276:	f04f 3bff 	mov.w	fp, #4294967295
 800727a:	2200      	movs	r2, #0
 800727c:	2312      	movs	r3, #18
 800727e:	f8cd b020 	str.w	fp, [sp, #32]
 8007282:	9221      	str	r2, [sp, #132]	@ 0x84
 8007284:	e7db      	b.n	800723e <_dtoa_r+0x256>
 8007286:	2301      	movs	r3, #1
 8007288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800728a:	e7f4      	b.n	8007276 <_dtoa_r+0x28e>
 800728c:	f04f 0b01 	mov.w	fp, #1
 8007290:	465b      	mov	r3, fp
 8007292:	f8cd b020 	str.w	fp, [sp, #32]
 8007296:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800729a:	e7d0      	b.n	800723e <_dtoa_r+0x256>
 800729c:	3101      	adds	r1, #1
 800729e:	0052      	lsls	r2, r2, #1
 80072a0:	e7d1      	b.n	8007246 <_dtoa_r+0x25e>
 80072a2:	bf00      	nop
 80072a4:	f3af 8000 	nop.w
 80072a8:	636f4361 	.word	0x636f4361
 80072ac:	3fd287a7 	.word	0x3fd287a7
 80072b0:	8b60c8b3 	.word	0x8b60c8b3
 80072b4:	3fc68a28 	.word	0x3fc68a28
 80072b8:	509f79fb 	.word	0x509f79fb
 80072bc:	3fd34413 	.word	0x3fd34413
 80072c0:	080097bf 	.word	0x080097bf
 80072c4:	080097d6 	.word	0x080097d6
 80072c8:	7ff00000 	.word	0x7ff00000
 80072cc:	080097bb 	.word	0x080097bb
 80072d0:	0800978f 	.word	0x0800978f
 80072d4:	0800978e 	.word	0x0800978e
 80072d8:	3ff80000 	.word	0x3ff80000
 80072dc:	08009928 	.word	0x08009928
 80072e0:	0800982e 	.word	0x0800982e
 80072e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80072e8:	6018      	str	r0, [r3, #0]
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	2b0e      	cmp	r3, #14
 80072ee:	f200 80a1 	bhi.w	8007434 <_dtoa_r+0x44c>
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	f000 809e 	beq.w	8007434 <_dtoa_r+0x44c>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	dd33      	ble.n	8007364 <_dtoa_r+0x37c>
 80072fc:	4b9c      	ldr	r3, [pc, #624]	@ (8007570 <_dtoa_r+0x588>)
 80072fe:	f007 020f 	and.w	r2, r7, #15
 8007302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007306:	05f8      	lsls	r0, r7, #23
 8007308:	e9d3 3400 	ldrd	r3, r4, [r3]
 800730c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007310:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007314:	d516      	bpl.n	8007344 <_dtoa_r+0x35c>
 8007316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800731a:	4b96      	ldr	r3, [pc, #600]	@ (8007574 <_dtoa_r+0x58c>)
 800731c:	2603      	movs	r6, #3
 800731e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007322:	f7f9 fa03 	bl	800072c <__aeabi_ddiv>
 8007326:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800732a:	f004 040f 	and.w	r4, r4, #15
 800732e:	4d91      	ldr	r5, [pc, #580]	@ (8007574 <_dtoa_r+0x58c>)
 8007330:	b954      	cbnz	r4, 8007348 <_dtoa_r+0x360>
 8007332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733a:	f7f9 f9f7 	bl	800072c <__aeabi_ddiv>
 800733e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007342:	e028      	b.n	8007396 <_dtoa_r+0x3ae>
 8007344:	2602      	movs	r6, #2
 8007346:	e7f2      	b.n	800732e <_dtoa_r+0x346>
 8007348:	07e1      	lsls	r1, r4, #31
 800734a:	d508      	bpl.n	800735e <_dtoa_r+0x376>
 800734c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007350:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007354:	f7f9 f8c0 	bl	80004d8 <__aeabi_dmul>
 8007358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800735c:	3601      	adds	r6, #1
 800735e:	1064      	asrs	r4, r4, #1
 8007360:	3508      	adds	r5, #8
 8007362:	e7e5      	b.n	8007330 <_dtoa_r+0x348>
 8007364:	f000 80af 	beq.w	80074c6 <_dtoa_r+0x4de>
 8007368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800736c:	427c      	negs	r4, r7
 800736e:	4b80      	ldr	r3, [pc, #512]	@ (8007570 <_dtoa_r+0x588>)
 8007370:	f004 020f 	and.w	r2, r4, #15
 8007374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 f8ac 	bl	80004d8 <__aeabi_dmul>
 8007380:	2602      	movs	r6, #2
 8007382:	2300      	movs	r3, #0
 8007384:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007388:	4d7a      	ldr	r5, [pc, #488]	@ (8007574 <_dtoa_r+0x58c>)
 800738a:	1124      	asrs	r4, r4, #4
 800738c:	2c00      	cmp	r4, #0
 800738e:	f040 808f 	bne.w	80074b0 <_dtoa_r+0x4c8>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1d3      	bne.n	800733e <_dtoa_r+0x356>
 8007396:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800739a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8094 	beq.w	80074ca <_dtoa_r+0x4e2>
 80073a2:	2200      	movs	r2, #0
 80073a4:	4620      	mov	r0, r4
 80073a6:	4629      	mov	r1, r5
 80073a8:	4b73      	ldr	r3, [pc, #460]	@ (8007578 <_dtoa_r+0x590>)
 80073aa:	f7f9 fb07 	bl	80009bc <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f000 808b 	beq.w	80074ca <_dtoa_r+0x4e2>
 80073b4:	9b08      	ldr	r3, [sp, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 8087 	beq.w	80074ca <_dtoa_r+0x4e2>
 80073bc:	f1bb 0f00 	cmp.w	fp, #0
 80073c0:	dd34      	ble.n	800742c <_dtoa_r+0x444>
 80073c2:	4620      	mov	r0, r4
 80073c4:	2200      	movs	r2, #0
 80073c6:	4629      	mov	r1, r5
 80073c8:	4b6c      	ldr	r3, [pc, #432]	@ (800757c <_dtoa_r+0x594>)
 80073ca:	f7f9 f885 	bl	80004d8 <__aeabi_dmul>
 80073ce:	465c      	mov	r4, fp
 80073d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80073d8:	3601      	adds	r6, #1
 80073da:	4630      	mov	r0, r6
 80073dc:	f7f9 f812 	bl	8000404 <__aeabi_i2d>
 80073e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073e4:	f7f9 f878 	bl	80004d8 <__aeabi_dmul>
 80073e8:	2200      	movs	r2, #0
 80073ea:	4b65      	ldr	r3, [pc, #404]	@ (8007580 <_dtoa_r+0x598>)
 80073ec:	f7f8 febe 	bl	800016c <__adddf3>
 80073f0:	4605      	mov	r5, r0
 80073f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073f6:	2c00      	cmp	r4, #0
 80073f8:	d16a      	bne.n	80074d0 <_dtoa_r+0x4e8>
 80073fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073fe:	2200      	movs	r2, #0
 8007400:	4b60      	ldr	r3, [pc, #384]	@ (8007584 <_dtoa_r+0x59c>)
 8007402:	f7f8 feb1 	bl	8000168 <__aeabi_dsub>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800740e:	462a      	mov	r2, r5
 8007410:	4633      	mov	r3, r6
 8007412:	f7f9 faf1 	bl	80009f8 <__aeabi_dcmpgt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8298 	bne.w	800794c <_dtoa_r+0x964>
 800741c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007420:	462a      	mov	r2, r5
 8007422:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007426:	f7f9 fac9 	bl	80009bc <__aeabi_dcmplt>
 800742a:	bb38      	cbnz	r0, 800747c <_dtoa_r+0x494>
 800742c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007430:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007434:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007436:	2b00      	cmp	r3, #0
 8007438:	f2c0 8157 	blt.w	80076ea <_dtoa_r+0x702>
 800743c:	2f0e      	cmp	r7, #14
 800743e:	f300 8154 	bgt.w	80076ea <_dtoa_r+0x702>
 8007442:	4b4b      	ldr	r3, [pc, #300]	@ (8007570 <_dtoa_r+0x588>)
 8007444:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007448:	e9d3 3400 	ldrd	r3, r4, [r3]
 800744c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007450:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007452:	2b00      	cmp	r3, #0
 8007454:	f280 80e5 	bge.w	8007622 <_dtoa_r+0x63a>
 8007458:	9b08      	ldr	r3, [sp, #32]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f300 80e1 	bgt.w	8007622 <_dtoa_r+0x63a>
 8007460:	d10c      	bne.n	800747c <_dtoa_r+0x494>
 8007462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007466:	2200      	movs	r2, #0
 8007468:	4b46      	ldr	r3, [pc, #280]	@ (8007584 <_dtoa_r+0x59c>)
 800746a:	f7f9 f835 	bl	80004d8 <__aeabi_dmul>
 800746e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007472:	f7f9 fab7 	bl	80009e4 <__aeabi_dcmpge>
 8007476:	2800      	cmp	r0, #0
 8007478:	f000 8266 	beq.w	8007948 <_dtoa_r+0x960>
 800747c:	2400      	movs	r4, #0
 800747e:	4625      	mov	r5, r4
 8007480:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007482:	4656      	mov	r6, sl
 8007484:	ea6f 0803 	mvn.w	r8, r3
 8007488:	2700      	movs	r7, #0
 800748a:	4621      	mov	r1, r4
 800748c:	4648      	mov	r0, r9
 800748e:	f000 fcbd 	bl	8007e0c <_Bfree>
 8007492:	2d00      	cmp	r5, #0
 8007494:	f000 80bd 	beq.w	8007612 <_dtoa_r+0x62a>
 8007498:	b12f      	cbz	r7, 80074a6 <_dtoa_r+0x4be>
 800749a:	42af      	cmp	r7, r5
 800749c:	d003      	beq.n	80074a6 <_dtoa_r+0x4be>
 800749e:	4639      	mov	r1, r7
 80074a0:	4648      	mov	r0, r9
 80074a2:	f000 fcb3 	bl	8007e0c <_Bfree>
 80074a6:	4629      	mov	r1, r5
 80074a8:	4648      	mov	r0, r9
 80074aa:	f000 fcaf 	bl	8007e0c <_Bfree>
 80074ae:	e0b0      	b.n	8007612 <_dtoa_r+0x62a>
 80074b0:	07e2      	lsls	r2, r4, #31
 80074b2:	d505      	bpl.n	80074c0 <_dtoa_r+0x4d8>
 80074b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074b8:	f7f9 f80e 	bl	80004d8 <__aeabi_dmul>
 80074bc:	2301      	movs	r3, #1
 80074be:	3601      	adds	r6, #1
 80074c0:	1064      	asrs	r4, r4, #1
 80074c2:	3508      	adds	r5, #8
 80074c4:	e762      	b.n	800738c <_dtoa_r+0x3a4>
 80074c6:	2602      	movs	r6, #2
 80074c8:	e765      	b.n	8007396 <_dtoa_r+0x3ae>
 80074ca:	46b8      	mov	r8, r7
 80074cc:	9c08      	ldr	r4, [sp, #32]
 80074ce:	e784      	b.n	80073da <_dtoa_r+0x3f2>
 80074d0:	4b27      	ldr	r3, [pc, #156]	@ (8007570 <_dtoa_r+0x588>)
 80074d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074dc:	4454      	add	r4, sl
 80074de:	2900      	cmp	r1, #0
 80074e0:	d054      	beq.n	800758c <_dtoa_r+0x5a4>
 80074e2:	2000      	movs	r0, #0
 80074e4:	4928      	ldr	r1, [pc, #160]	@ (8007588 <_dtoa_r+0x5a0>)
 80074e6:	f7f9 f921 	bl	800072c <__aeabi_ddiv>
 80074ea:	4633      	mov	r3, r6
 80074ec:	462a      	mov	r2, r5
 80074ee:	f7f8 fe3b 	bl	8000168 <__aeabi_dsub>
 80074f2:	4656      	mov	r6, sl
 80074f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074fc:	f7f9 fa9c 	bl	8000a38 <__aeabi_d2iz>
 8007500:	4605      	mov	r5, r0
 8007502:	f7f8 ff7f 	bl	8000404 <__aeabi_i2d>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800750e:	f7f8 fe2b 	bl	8000168 <__aeabi_dsub>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	3530      	adds	r5, #48	@ 0x30
 8007518:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800751c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007520:	f806 5b01 	strb.w	r5, [r6], #1
 8007524:	f7f9 fa4a 	bl	80009bc <__aeabi_dcmplt>
 8007528:	2800      	cmp	r0, #0
 800752a:	d172      	bne.n	8007612 <_dtoa_r+0x62a>
 800752c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007530:	2000      	movs	r0, #0
 8007532:	4911      	ldr	r1, [pc, #68]	@ (8007578 <_dtoa_r+0x590>)
 8007534:	f7f8 fe18 	bl	8000168 <__aeabi_dsub>
 8007538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800753c:	f7f9 fa3e 	bl	80009bc <__aeabi_dcmplt>
 8007540:	2800      	cmp	r0, #0
 8007542:	f040 80b4 	bne.w	80076ae <_dtoa_r+0x6c6>
 8007546:	42a6      	cmp	r6, r4
 8007548:	f43f af70 	beq.w	800742c <_dtoa_r+0x444>
 800754c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007550:	2200      	movs	r2, #0
 8007552:	4b0a      	ldr	r3, [pc, #40]	@ (800757c <_dtoa_r+0x594>)
 8007554:	f7f8 ffc0 	bl	80004d8 <__aeabi_dmul>
 8007558:	2200      	movs	r2, #0
 800755a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800755e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007562:	4b06      	ldr	r3, [pc, #24]	@ (800757c <_dtoa_r+0x594>)
 8007564:	f7f8 ffb8 	bl	80004d8 <__aeabi_dmul>
 8007568:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800756c:	e7c4      	b.n	80074f8 <_dtoa_r+0x510>
 800756e:	bf00      	nop
 8007570:	08009928 	.word	0x08009928
 8007574:	08009900 	.word	0x08009900
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	40240000 	.word	0x40240000
 8007580:	401c0000 	.word	0x401c0000
 8007584:	40140000 	.word	0x40140000
 8007588:	3fe00000 	.word	0x3fe00000
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	f7f8 ffa2 	bl	80004d8 <__aeabi_dmul>
 8007594:	4656      	mov	r6, sl
 8007596:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800759a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800759c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a0:	f7f9 fa4a 	bl	8000a38 <__aeabi_d2iz>
 80075a4:	4605      	mov	r5, r0
 80075a6:	f7f8 ff2d 	bl	8000404 <__aeabi_i2d>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075b2:	f7f8 fdd9 	bl	8000168 <__aeabi_dsub>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	3530      	adds	r5, #48	@ 0x30
 80075bc:	f806 5b01 	strb.w	r5, [r6], #1
 80075c0:	42a6      	cmp	r6, r4
 80075c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	d124      	bne.n	8007616 <_dtoa_r+0x62e>
 80075cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075d0:	4bae      	ldr	r3, [pc, #696]	@ (800788c <_dtoa_r+0x8a4>)
 80075d2:	f7f8 fdcb 	bl	800016c <__adddf3>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075de:	f7f9 fa0b 	bl	80009f8 <__aeabi_dcmpgt>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d163      	bne.n	80076ae <_dtoa_r+0x6c6>
 80075e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075ea:	2000      	movs	r0, #0
 80075ec:	49a7      	ldr	r1, [pc, #668]	@ (800788c <_dtoa_r+0x8a4>)
 80075ee:	f7f8 fdbb 	bl	8000168 <__aeabi_dsub>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075fa:	f7f9 f9df 	bl	80009bc <__aeabi_dcmplt>
 80075fe:	2800      	cmp	r0, #0
 8007600:	f43f af14 	beq.w	800742c <_dtoa_r+0x444>
 8007604:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007606:	1e73      	subs	r3, r6, #1
 8007608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800760a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800760e:	2b30      	cmp	r3, #48	@ 0x30
 8007610:	d0f8      	beq.n	8007604 <_dtoa_r+0x61c>
 8007612:	4647      	mov	r7, r8
 8007614:	e03b      	b.n	800768e <_dtoa_r+0x6a6>
 8007616:	4b9e      	ldr	r3, [pc, #632]	@ (8007890 <_dtoa_r+0x8a8>)
 8007618:	f7f8 ff5e 	bl	80004d8 <__aeabi_dmul>
 800761c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007620:	e7bc      	b.n	800759c <_dtoa_r+0x5b4>
 8007622:	4656      	mov	r6, sl
 8007624:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f9 f87c 	bl	800072c <__aeabi_ddiv>
 8007634:	f7f9 fa00 	bl	8000a38 <__aeabi_d2iz>
 8007638:	4680      	mov	r8, r0
 800763a:	f7f8 fee3 	bl	8000404 <__aeabi_i2d>
 800763e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007642:	f7f8 ff49 	bl	80004d8 <__aeabi_dmul>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4620      	mov	r0, r4
 800764c:	4629      	mov	r1, r5
 800764e:	f7f8 fd8b 	bl	8000168 <__aeabi_dsub>
 8007652:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007656:	9d08      	ldr	r5, [sp, #32]
 8007658:	f806 4b01 	strb.w	r4, [r6], #1
 800765c:	eba6 040a 	sub.w	r4, r6, sl
 8007660:	42a5      	cmp	r5, r4
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	d133      	bne.n	80076d0 <_dtoa_r+0x6e8>
 8007668:	f7f8 fd80 	bl	800016c <__adddf3>
 800766c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007670:	4604      	mov	r4, r0
 8007672:	460d      	mov	r5, r1
 8007674:	f7f9 f9c0 	bl	80009f8 <__aeabi_dcmpgt>
 8007678:	b9c0      	cbnz	r0, 80076ac <_dtoa_r+0x6c4>
 800767a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f9 f991 	bl	80009a8 <__aeabi_dcmpeq>
 8007686:	b110      	cbz	r0, 800768e <_dtoa_r+0x6a6>
 8007688:	f018 0f01 	tst.w	r8, #1
 800768c:	d10e      	bne.n	80076ac <_dtoa_r+0x6c4>
 800768e:	4648      	mov	r0, r9
 8007690:	9903      	ldr	r1, [sp, #12]
 8007692:	f000 fbbb 	bl	8007e0c <_Bfree>
 8007696:	2300      	movs	r3, #0
 8007698:	7033      	strb	r3, [r6, #0]
 800769a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800769c:	3701      	adds	r7, #1
 800769e:	601f      	str	r7, [r3, #0]
 80076a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 824b 	beq.w	8007b3e <_dtoa_r+0xb56>
 80076a8:	601e      	str	r6, [r3, #0]
 80076aa:	e248      	b.n	8007b3e <_dtoa_r+0xb56>
 80076ac:	46b8      	mov	r8, r7
 80076ae:	4633      	mov	r3, r6
 80076b0:	461e      	mov	r6, r3
 80076b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076b6:	2a39      	cmp	r2, #57	@ 0x39
 80076b8:	d106      	bne.n	80076c8 <_dtoa_r+0x6e0>
 80076ba:	459a      	cmp	sl, r3
 80076bc:	d1f8      	bne.n	80076b0 <_dtoa_r+0x6c8>
 80076be:	2230      	movs	r2, #48	@ 0x30
 80076c0:	f108 0801 	add.w	r8, r8, #1
 80076c4:	f88a 2000 	strb.w	r2, [sl]
 80076c8:	781a      	ldrb	r2, [r3, #0]
 80076ca:	3201      	adds	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e7a0      	b.n	8007612 <_dtoa_r+0x62a>
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b6f      	ldr	r3, [pc, #444]	@ (8007890 <_dtoa_r+0x8a8>)
 80076d4:	f7f8 ff00 	bl	80004d8 <__aeabi_dmul>
 80076d8:	2200      	movs	r2, #0
 80076da:	2300      	movs	r3, #0
 80076dc:	4604      	mov	r4, r0
 80076de:	460d      	mov	r5, r1
 80076e0:	f7f9 f962 	bl	80009a8 <__aeabi_dcmpeq>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d09f      	beq.n	8007628 <_dtoa_r+0x640>
 80076e8:	e7d1      	b.n	800768e <_dtoa_r+0x6a6>
 80076ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	f000 80ea 	beq.w	80078c6 <_dtoa_r+0x8de>
 80076f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076f4:	2a01      	cmp	r2, #1
 80076f6:	f300 80cd 	bgt.w	8007894 <_dtoa_r+0x8ac>
 80076fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	f000 80c1 	beq.w	8007884 <_dtoa_r+0x89c>
 8007702:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007706:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007708:	9e04      	ldr	r6, [sp, #16]
 800770a:	9a04      	ldr	r2, [sp, #16]
 800770c:	2101      	movs	r1, #1
 800770e:	441a      	add	r2, r3
 8007710:	9204      	str	r2, [sp, #16]
 8007712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007714:	4648      	mov	r0, r9
 8007716:	441a      	add	r2, r3
 8007718:	9209      	str	r2, [sp, #36]	@ 0x24
 800771a:	f000 fc2b 	bl	8007f74 <__i2b>
 800771e:	4605      	mov	r5, r0
 8007720:	b166      	cbz	r6, 800773c <_dtoa_r+0x754>
 8007722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	dd09      	ble.n	800773c <_dtoa_r+0x754>
 8007728:	42b3      	cmp	r3, r6
 800772a:	bfa8      	it	ge
 800772c:	4633      	movge	r3, r6
 800772e:	9a04      	ldr	r2, [sp, #16]
 8007730:	1af6      	subs	r6, r6, r3
 8007732:	1ad2      	subs	r2, r2, r3
 8007734:	9204      	str	r2, [sp, #16]
 8007736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	9309      	str	r3, [sp, #36]	@ 0x24
 800773c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800773e:	b30b      	cbz	r3, 8007784 <_dtoa_r+0x79c>
 8007740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 80c6 	beq.w	80078d4 <_dtoa_r+0x8ec>
 8007748:	2c00      	cmp	r4, #0
 800774a:	f000 80c0 	beq.w	80078ce <_dtoa_r+0x8e6>
 800774e:	4629      	mov	r1, r5
 8007750:	4622      	mov	r2, r4
 8007752:	4648      	mov	r0, r9
 8007754:	f000 fcc6 	bl	80080e4 <__pow5mult>
 8007758:	9a03      	ldr	r2, [sp, #12]
 800775a:	4601      	mov	r1, r0
 800775c:	4605      	mov	r5, r0
 800775e:	4648      	mov	r0, r9
 8007760:	f000 fc1e 	bl	8007fa0 <__multiply>
 8007764:	9903      	ldr	r1, [sp, #12]
 8007766:	4680      	mov	r8, r0
 8007768:	4648      	mov	r0, r9
 800776a:	f000 fb4f 	bl	8007e0c <_Bfree>
 800776e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007770:	1b1b      	subs	r3, r3, r4
 8007772:	930a      	str	r3, [sp, #40]	@ 0x28
 8007774:	f000 80b1 	beq.w	80078da <_dtoa_r+0x8f2>
 8007778:	4641      	mov	r1, r8
 800777a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800777c:	4648      	mov	r0, r9
 800777e:	f000 fcb1 	bl	80080e4 <__pow5mult>
 8007782:	9003      	str	r0, [sp, #12]
 8007784:	2101      	movs	r1, #1
 8007786:	4648      	mov	r0, r9
 8007788:	f000 fbf4 	bl	8007f74 <__i2b>
 800778c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800778e:	4604      	mov	r4, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 81d8 	beq.w	8007b46 <_dtoa_r+0xb5e>
 8007796:	461a      	mov	r2, r3
 8007798:	4601      	mov	r1, r0
 800779a:	4648      	mov	r0, r9
 800779c:	f000 fca2 	bl	80080e4 <__pow5mult>
 80077a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077a2:	4604      	mov	r4, r0
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	f300 809f 	bgt.w	80078e8 <_dtoa_r+0x900>
 80077aa:	9b06      	ldr	r3, [sp, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8097 	bne.w	80078e0 <_dtoa_r+0x8f8>
 80077b2:	9b07      	ldr	r3, [sp, #28]
 80077b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f040 8093 	bne.w	80078e4 <_dtoa_r+0x8fc>
 80077be:	9b07      	ldr	r3, [sp, #28]
 80077c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077c4:	0d1b      	lsrs	r3, r3, #20
 80077c6:	051b      	lsls	r3, r3, #20
 80077c8:	b133      	cbz	r3, 80077d8 <_dtoa_r+0x7f0>
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	3301      	adds	r3, #1
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d2:	3301      	adds	r3, #1
 80077d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d6:	2301      	movs	r3, #1
 80077d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 81b8 	beq.w	8007b52 <_dtoa_r+0xb6a>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077e8:	6918      	ldr	r0, [r3, #16]
 80077ea:	f000 fb77 	bl	8007edc <__hi0bits>
 80077ee:	f1c0 0020 	rsb	r0, r0, #32
 80077f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f4:	4418      	add	r0, r3
 80077f6:	f010 001f 	ands.w	r0, r0, #31
 80077fa:	f000 8082 	beq.w	8007902 <_dtoa_r+0x91a>
 80077fe:	f1c0 0320 	rsb	r3, r0, #32
 8007802:	2b04      	cmp	r3, #4
 8007804:	dd73      	ble.n	80078ee <_dtoa_r+0x906>
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	f1c0 001c 	rsb	r0, r0, #28
 800780c:	4403      	add	r3, r0
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007812:	4406      	add	r6, r0
 8007814:	4403      	add	r3, r0
 8007816:	9309      	str	r3, [sp, #36]	@ 0x24
 8007818:	9b04      	ldr	r3, [sp, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd05      	ble.n	800782a <_dtoa_r+0x842>
 800781e:	461a      	mov	r2, r3
 8007820:	4648      	mov	r0, r9
 8007822:	9903      	ldr	r1, [sp, #12]
 8007824:	f000 fcb8 	bl	8008198 <__lshift>
 8007828:	9003      	str	r0, [sp, #12]
 800782a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd05      	ble.n	800783c <_dtoa_r+0x854>
 8007830:	4621      	mov	r1, r4
 8007832:	461a      	mov	r2, r3
 8007834:	4648      	mov	r0, r9
 8007836:	f000 fcaf 	bl	8008198 <__lshift>
 800783a:	4604      	mov	r4, r0
 800783c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d061      	beq.n	8007906 <_dtoa_r+0x91e>
 8007842:	4621      	mov	r1, r4
 8007844:	9803      	ldr	r0, [sp, #12]
 8007846:	f000 fd13 	bl	8008270 <__mcmp>
 800784a:	2800      	cmp	r0, #0
 800784c:	da5b      	bge.n	8007906 <_dtoa_r+0x91e>
 800784e:	2300      	movs	r3, #0
 8007850:	220a      	movs	r2, #10
 8007852:	4648      	mov	r0, r9
 8007854:	9903      	ldr	r1, [sp, #12]
 8007856:	f000 fafb 	bl	8007e50 <__multadd>
 800785a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800785c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007860:	9003      	str	r0, [sp, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8177 	beq.w	8007b56 <_dtoa_r+0xb6e>
 8007868:	4629      	mov	r1, r5
 800786a:	2300      	movs	r3, #0
 800786c:	220a      	movs	r2, #10
 800786e:	4648      	mov	r0, r9
 8007870:	f000 faee 	bl	8007e50 <__multadd>
 8007874:	f1bb 0f00 	cmp.w	fp, #0
 8007878:	4605      	mov	r5, r0
 800787a:	dc6f      	bgt.n	800795c <_dtoa_r+0x974>
 800787c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800787e:	2b02      	cmp	r3, #2
 8007880:	dc49      	bgt.n	8007916 <_dtoa_r+0x92e>
 8007882:	e06b      	b.n	800795c <_dtoa_r+0x974>
 8007884:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800788a:	e73c      	b.n	8007706 <_dtoa_r+0x71e>
 800788c:	3fe00000 	.word	0x3fe00000
 8007890:	40240000 	.word	0x40240000
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	1e5c      	subs	r4, r3, #1
 8007898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789a:	42a3      	cmp	r3, r4
 800789c:	db09      	blt.n	80078b2 <_dtoa_r+0x8ca>
 800789e:	1b1c      	subs	r4, r3, r4
 80078a0:	9b08      	ldr	r3, [sp, #32]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f6bf af30 	bge.w	8007708 <_dtoa_r+0x720>
 80078a8:	9b04      	ldr	r3, [sp, #16]
 80078aa:	9a08      	ldr	r2, [sp, #32]
 80078ac:	1a9e      	subs	r6, r3, r2
 80078ae:	2300      	movs	r3, #0
 80078b0:	e72b      	b.n	800770a <_dtoa_r+0x722>
 80078b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078b6:	1ae3      	subs	r3, r4, r3
 80078b8:	441a      	add	r2, r3
 80078ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80078bc:	9e04      	ldr	r6, [sp, #16]
 80078be:	2400      	movs	r4, #0
 80078c0:	9b08      	ldr	r3, [sp, #32]
 80078c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80078c4:	e721      	b.n	800770a <_dtoa_r+0x722>
 80078c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078c8:	9e04      	ldr	r6, [sp, #16]
 80078ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078cc:	e728      	b.n	8007720 <_dtoa_r+0x738>
 80078ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078d2:	e751      	b.n	8007778 <_dtoa_r+0x790>
 80078d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078d6:	9903      	ldr	r1, [sp, #12]
 80078d8:	e750      	b.n	800777c <_dtoa_r+0x794>
 80078da:	f8cd 800c 	str.w	r8, [sp, #12]
 80078de:	e751      	b.n	8007784 <_dtoa_r+0x79c>
 80078e0:	2300      	movs	r3, #0
 80078e2:	e779      	b.n	80077d8 <_dtoa_r+0x7f0>
 80078e4:	9b06      	ldr	r3, [sp, #24]
 80078e6:	e777      	b.n	80077d8 <_dtoa_r+0x7f0>
 80078e8:	2300      	movs	r3, #0
 80078ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ec:	e779      	b.n	80077e2 <_dtoa_r+0x7fa>
 80078ee:	d093      	beq.n	8007818 <_dtoa_r+0x830>
 80078f0:	9a04      	ldr	r2, [sp, #16]
 80078f2:	331c      	adds	r3, #28
 80078f4:	441a      	add	r2, r3
 80078f6:	9204      	str	r2, [sp, #16]
 80078f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078fa:	441e      	add	r6, r3
 80078fc:	441a      	add	r2, r3
 80078fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007900:	e78a      	b.n	8007818 <_dtoa_r+0x830>
 8007902:	4603      	mov	r3, r0
 8007904:	e7f4      	b.n	80078f0 <_dtoa_r+0x908>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	46b8      	mov	r8, r7
 800790a:	2b00      	cmp	r3, #0
 800790c:	dc20      	bgt.n	8007950 <_dtoa_r+0x968>
 800790e:	469b      	mov	fp, r3
 8007910:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007912:	2b02      	cmp	r3, #2
 8007914:	dd1e      	ble.n	8007954 <_dtoa_r+0x96c>
 8007916:	f1bb 0f00 	cmp.w	fp, #0
 800791a:	f47f adb1 	bne.w	8007480 <_dtoa_r+0x498>
 800791e:	4621      	mov	r1, r4
 8007920:	465b      	mov	r3, fp
 8007922:	2205      	movs	r2, #5
 8007924:	4648      	mov	r0, r9
 8007926:	f000 fa93 	bl	8007e50 <__multadd>
 800792a:	4601      	mov	r1, r0
 800792c:	4604      	mov	r4, r0
 800792e:	9803      	ldr	r0, [sp, #12]
 8007930:	f000 fc9e 	bl	8008270 <__mcmp>
 8007934:	2800      	cmp	r0, #0
 8007936:	f77f ada3 	ble.w	8007480 <_dtoa_r+0x498>
 800793a:	4656      	mov	r6, sl
 800793c:	2331      	movs	r3, #49	@ 0x31
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	f806 3b01 	strb.w	r3, [r6], #1
 8007946:	e59f      	b.n	8007488 <_dtoa_r+0x4a0>
 8007948:	46b8      	mov	r8, r7
 800794a:	9c08      	ldr	r4, [sp, #32]
 800794c:	4625      	mov	r5, r4
 800794e:	e7f4      	b.n	800793a <_dtoa_r+0x952>
 8007950:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8101 	beq.w	8007b5e <_dtoa_r+0xb76>
 800795c:	2e00      	cmp	r6, #0
 800795e:	dd05      	ble.n	800796c <_dtoa_r+0x984>
 8007960:	4629      	mov	r1, r5
 8007962:	4632      	mov	r2, r6
 8007964:	4648      	mov	r0, r9
 8007966:	f000 fc17 	bl	8008198 <__lshift>
 800796a:	4605      	mov	r5, r0
 800796c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796e:	2b00      	cmp	r3, #0
 8007970:	d05c      	beq.n	8007a2c <_dtoa_r+0xa44>
 8007972:	4648      	mov	r0, r9
 8007974:	6869      	ldr	r1, [r5, #4]
 8007976:	f000 fa09 	bl	8007d8c <_Balloc>
 800797a:	4606      	mov	r6, r0
 800797c:	b928      	cbnz	r0, 800798a <_dtoa_r+0x9a2>
 800797e:	4602      	mov	r2, r0
 8007980:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007984:	4b80      	ldr	r3, [pc, #512]	@ (8007b88 <_dtoa_r+0xba0>)
 8007986:	f7ff bb43 	b.w	8007010 <_dtoa_r+0x28>
 800798a:	692a      	ldr	r2, [r5, #16]
 800798c:	f105 010c 	add.w	r1, r5, #12
 8007990:	3202      	adds	r2, #2
 8007992:	0092      	lsls	r2, r2, #2
 8007994:	300c      	adds	r0, #12
 8007996:	f000 ff9d 	bl	80088d4 <memcpy>
 800799a:	2201      	movs	r2, #1
 800799c:	4631      	mov	r1, r6
 800799e:	4648      	mov	r0, r9
 80079a0:	f000 fbfa 	bl	8008198 <__lshift>
 80079a4:	462f      	mov	r7, r5
 80079a6:	4605      	mov	r5, r0
 80079a8:	f10a 0301 	add.w	r3, sl, #1
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	eb0a 030b 	add.w	r3, sl, fp
 80079b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b4:	9b06      	ldr	r3, [sp, #24]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	4621      	mov	r1, r4
 80079c0:	9803      	ldr	r0, [sp, #12]
 80079c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80079c6:	f7ff fa86 	bl	8006ed6 <quorem>
 80079ca:	4603      	mov	r3, r0
 80079cc:	4639      	mov	r1, r7
 80079ce:	3330      	adds	r3, #48	@ 0x30
 80079d0:	9006      	str	r0, [sp, #24]
 80079d2:	9803      	ldr	r0, [sp, #12]
 80079d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079d6:	f000 fc4b 	bl	8008270 <__mcmp>
 80079da:	462a      	mov	r2, r5
 80079dc:	9008      	str	r0, [sp, #32]
 80079de:	4621      	mov	r1, r4
 80079e0:	4648      	mov	r0, r9
 80079e2:	f000 fc61 	bl	80082a8 <__mdiff>
 80079e6:	68c2      	ldr	r2, [r0, #12]
 80079e8:	4606      	mov	r6, r0
 80079ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ec:	bb02      	cbnz	r2, 8007a30 <_dtoa_r+0xa48>
 80079ee:	4601      	mov	r1, r0
 80079f0:	9803      	ldr	r0, [sp, #12]
 80079f2:	f000 fc3d 	bl	8008270 <__mcmp>
 80079f6:	4602      	mov	r2, r0
 80079f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079fa:	4631      	mov	r1, r6
 80079fc:	4648      	mov	r0, r9
 80079fe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007a02:	f000 fa03 	bl	8007e0c <_Bfree>
 8007a06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a0a:	9e04      	ldr	r6, [sp, #16]
 8007a0c:	ea42 0103 	orr.w	r1, r2, r3
 8007a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a12:	4319      	orrs	r1, r3
 8007a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a16:	d10d      	bne.n	8007a34 <_dtoa_r+0xa4c>
 8007a18:	2b39      	cmp	r3, #57	@ 0x39
 8007a1a:	d027      	beq.n	8007a6c <_dtoa_r+0xa84>
 8007a1c:	9a08      	ldr	r2, [sp, #32]
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	dd01      	ble.n	8007a26 <_dtoa_r+0xa3e>
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	3331      	adds	r3, #49	@ 0x31
 8007a26:	f88b 3000 	strb.w	r3, [fp]
 8007a2a:	e52e      	b.n	800748a <_dtoa_r+0x4a2>
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	e7b9      	b.n	80079a4 <_dtoa_r+0x9bc>
 8007a30:	2201      	movs	r2, #1
 8007a32:	e7e2      	b.n	80079fa <_dtoa_r+0xa12>
 8007a34:	9908      	ldr	r1, [sp, #32]
 8007a36:	2900      	cmp	r1, #0
 8007a38:	db04      	blt.n	8007a44 <_dtoa_r+0xa5c>
 8007a3a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007a3c:	4301      	orrs	r1, r0
 8007a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a40:	4301      	orrs	r1, r0
 8007a42:	d120      	bne.n	8007a86 <_dtoa_r+0xa9e>
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	ddee      	ble.n	8007a26 <_dtoa_r+0xa3e>
 8007a48:	2201      	movs	r2, #1
 8007a4a:	9903      	ldr	r1, [sp, #12]
 8007a4c:	4648      	mov	r0, r9
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	f000 fba2 	bl	8008198 <__lshift>
 8007a54:	4621      	mov	r1, r4
 8007a56:	9003      	str	r0, [sp, #12]
 8007a58:	f000 fc0a 	bl	8008270 <__mcmp>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	dc02      	bgt.n	8007a68 <_dtoa_r+0xa80>
 8007a62:	d1e0      	bne.n	8007a26 <_dtoa_r+0xa3e>
 8007a64:	07da      	lsls	r2, r3, #31
 8007a66:	d5de      	bpl.n	8007a26 <_dtoa_r+0xa3e>
 8007a68:	2b39      	cmp	r3, #57	@ 0x39
 8007a6a:	d1da      	bne.n	8007a22 <_dtoa_r+0xa3a>
 8007a6c:	2339      	movs	r3, #57	@ 0x39
 8007a6e:	f88b 3000 	strb.w	r3, [fp]
 8007a72:	4633      	mov	r3, r6
 8007a74:	461e      	mov	r6, r3
 8007a76:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	2a39      	cmp	r2, #57	@ 0x39
 8007a7e:	d04e      	beq.n	8007b1e <_dtoa_r+0xb36>
 8007a80:	3201      	adds	r2, #1
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e501      	b.n	800748a <_dtoa_r+0x4a2>
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	dd03      	ble.n	8007a92 <_dtoa_r+0xaaa>
 8007a8a:	2b39      	cmp	r3, #57	@ 0x39
 8007a8c:	d0ee      	beq.n	8007a6c <_dtoa_r+0xa84>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	e7c9      	b.n	8007a26 <_dtoa_r+0xa3e>
 8007a92:	9a04      	ldr	r2, [sp, #16]
 8007a94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a9a:	428a      	cmp	r2, r1
 8007a9c:	d028      	beq.n	8007af0 <_dtoa_r+0xb08>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	9903      	ldr	r1, [sp, #12]
 8007aa4:	4648      	mov	r0, r9
 8007aa6:	f000 f9d3 	bl	8007e50 <__multadd>
 8007aaa:	42af      	cmp	r7, r5
 8007aac:	9003      	str	r0, [sp, #12]
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	f04f 020a 	mov.w	r2, #10
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	4648      	mov	r0, r9
 8007aba:	d107      	bne.n	8007acc <_dtoa_r+0xae4>
 8007abc:	f000 f9c8 	bl	8007e50 <__multadd>
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	e777      	b.n	80079bc <_dtoa_r+0x9d4>
 8007acc:	f000 f9c0 	bl	8007e50 <__multadd>
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4648      	mov	r0, r9
 8007ada:	f000 f9b9 	bl	8007e50 <__multadd>
 8007ade:	4605      	mov	r5, r0
 8007ae0:	e7f0      	b.n	8007ac4 <_dtoa_r+0xadc>
 8007ae2:	f1bb 0f00 	cmp.w	fp, #0
 8007ae6:	bfcc      	ite	gt
 8007ae8:	465e      	movgt	r6, fp
 8007aea:	2601      	movle	r6, #1
 8007aec:	2700      	movs	r7, #0
 8007aee:	4456      	add	r6, sl
 8007af0:	2201      	movs	r2, #1
 8007af2:	9903      	ldr	r1, [sp, #12]
 8007af4:	4648      	mov	r0, r9
 8007af6:	9304      	str	r3, [sp, #16]
 8007af8:	f000 fb4e 	bl	8008198 <__lshift>
 8007afc:	4621      	mov	r1, r4
 8007afe:	9003      	str	r0, [sp, #12]
 8007b00:	f000 fbb6 	bl	8008270 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dcb4      	bgt.n	8007a72 <_dtoa_r+0xa8a>
 8007b08:	d102      	bne.n	8007b10 <_dtoa_r+0xb28>
 8007b0a:	9b04      	ldr	r3, [sp, #16]
 8007b0c:	07db      	lsls	r3, r3, #31
 8007b0e:	d4b0      	bmi.n	8007a72 <_dtoa_r+0xa8a>
 8007b10:	4633      	mov	r3, r6
 8007b12:	461e      	mov	r6, r3
 8007b14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b18:	2a30      	cmp	r2, #48	@ 0x30
 8007b1a:	d0fa      	beq.n	8007b12 <_dtoa_r+0xb2a>
 8007b1c:	e4b5      	b.n	800748a <_dtoa_r+0x4a2>
 8007b1e:	459a      	cmp	sl, r3
 8007b20:	d1a8      	bne.n	8007a74 <_dtoa_r+0xa8c>
 8007b22:	2331      	movs	r3, #49	@ 0x31
 8007b24:	f108 0801 	add.w	r8, r8, #1
 8007b28:	f88a 3000 	strb.w	r3, [sl]
 8007b2c:	e4ad      	b.n	800748a <_dtoa_r+0x4a2>
 8007b2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007b8c <_dtoa_r+0xba4>
 8007b34:	b11b      	cbz	r3, 8007b3e <_dtoa_r+0xb56>
 8007b36:	f10a 0308 	add.w	r3, sl, #8
 8007b3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	4650      	mov	r0, sl
 8007b40:	b017      	add	sp, #92	@ 0x5c
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f77f ae2e 	ble.w	80077aa <_dtoa_r+0x7c2>
 8007b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b52:	2001      	movs	r0, #1
 8007b54:	e64d      	b.n	80077f2 <_dtoa_r+0x80a>
 8007b56:	f1bb 0f00 	cmp.w	fp, #0
 8007b5a:	f77f aed9 	ble.w	8007910 <_dtoa_r+0x928>
 8007b5e:	4656      	mov	r6, sl
 8007b60:	4621      	mov	r1, r4
 8007b62:	9803      	ldr	r0, [sp, #12]
 8007b64:	f7ff f9b7 	bl	8006ed6 <quorem>
 8007b68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b70:	eba6 020a 	sub.w	r2, r6, sl
 8007b74:	4593      	cmp	fp, r2
 8007b76:	ddb4      	ble.n	8007ae2 <_dtoa_r+0xafa>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	9903      	ldr	r1, [sp, #12]
 8007b80:	f000 f966 	bl	8007e50 <__multadd>
 8007b84:	9003      	str	r0, [sp, #12]
 8007b86:	e7eb      	b.n	8007b60 <_dtoa_r+0xb78>
 8007b88:	0800982e 	.word	0x0800982e
 8007b8c:	080097b2 	.word	0x080097b2

08007b90 <_free_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4605      	mov	r5, r0
 8007b94:	2900      	cmp	r1, #0
 8007b96:	d040      	beq.n	8007c1a <_free_r+0x8a>
 8007b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9c:	1f0c      	subs	r4, r1, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfb8      	it	lt
 8007ba2:	18e4      	addlt	r4, r4, r3
 8007ba4:	f000 f8e6 	bl	8007d74 <__malloc_lock>
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c1c <_free_r+0x8c>)
 8007baa:	6813      	ldr	r3, [r2, #0]
 8007bac:	b933      	cbnz	r3, 8007bbc <_free_r+0x2c>
 8007bae:	6063      	str	r3, [r4, #4]
 8007bb0:	6014      	str	r4, [r2, #0]
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb8:	f000 b8e2 	b.w	8007d80 <__malloc_unlock>
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d908      	bls.n	8007bd2 <_free_r+0x42>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	1821      	adds	r1, r4, r0
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf01      	itttt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	1809      	addeq	r1, r1, r0
 8007bce:	6021      	streq	r1, [r4, #0]
 8007bd0:	e7ed      	b.n	8007bae <_free_r+0x1e>
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b10b      	cbz	r3, 8007bdc <_free_r+0x4c>
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	d9fa      	bls.n	8007bd2 <_free_r+0x42>
 8007bdc:	6811      	ldr	r1, [r2, #0]
 8007bde:	1850      	adds	r0, r2, r1
 8007be0:	42a0      	cmp	r0, r4
 8007be2:	d10b      	bne.n	8007bfc <_free_r+0x6c>
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	4401      	add	r1, r0
 8007be8:	1850      	adds	r0, r2, r1
 8007bea:	4283      	cmp	r3, r0
 8007bec:	6011      	str	r1, [r2, #0]
 8007bee:	d1e0      	bne.n	8007bb2 <_free_r+0x22>
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	4408      	add	r0, r1
 8007bf6:	6010      	str	r0, [r2, #0]
 8007bf8:	6053      	str	r3, [r2, #4]
 8007bfa:	e7da      	b.n	8007bb2 <_free_r+0x22>
 8007bfc:	d902      	bls.n	8007c04 <_free_r+0x74>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	e7d6      	b.n	8007bb2 <_free_r+0x22>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	1821      	adds	r1, r4, r0
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	bf01      	itttt	eq
 8007c0c:	6819      	ldreq	r1, [r3, #0]
 8007c0e:	685b      	ldreq	r3, [r3, #4]
 8007c10:	1809      	addeq	r1, r1, r0
 8007c12:	6021      	streq	r1, [r4, #0]
 8007c14:	6063      	str	r3, [r4, #4]
 8007c16:	6054      	str	r4, [r2, #4]
 8007c18:	e7cb      	b.n	8007bb2 <_free_r+0x22>
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000948 	.word	0x20000948

08007c20 <malloc>:
 8007c20:	4b02      	ldr	r3, [pc, #8]	@ (8007c2c <malloc+0xc>)
 8007c22:	4601      	mov	r1, r0
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f000 b825 	b.w	8007c74 <_malloc_r>
 8007c2a:	bf00      	nop
 8007c2c:	20000050 	.word	0x20000050

08007c30 <sbrk_aligned>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4e0f      	ldr	r6, [pc, #60]	@ (8007c70 <sbrk_aligned+0x40>)
 8007c34:	460c      	mov	r4, r1
 8007c36:	6831      	ldr	r1, [r6, #0]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	b911      	cbnz	r1, 8007c42 <sbrk_aligned+0x12>
 8007c3c:	f000 fe3a 	bl	80088b4 <_sbrk_r>
 8007c40:	6030      	str	r0, [r6, #0]
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fe35 	bl	80088b4 <_sbrk_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d103      	bne.n	8007c56 <sbrk_aligned+0x26>
 8007c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007c52:	4620      	mov	r0, r4
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	1cc4      	adds	r4, r0, #3
 8007c58:	f024 0403 	bic.w	r4, r4, #3
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d0f8      	beq.n	8007c52 <sbrk_aligned+0x22>
 8007c60:	1a21      	subs	r1, r4, r0
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 fe26 	bl	80088b4 <_sbrk_r>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d1f2      	bne.n	8007c52 <sbrk_aligned+0x22>
 8007c6c:	e7ef      	b.n	8007c4e <sbrk_aligned+0x1e>
 8007c6e:	bf00      	nop
 8007c70:	20000944 	.word	0x20000944

08007c74 <_malloc_r>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	1ccd      	adds	r5, r1, #3
 8007c7a:	f025 0503 	bic.w	r5, r5, #3
 8007c7e:	3508      	adds	r5, #8
 8007c80:	2d0c      	cmp	r5, #12
 8007c82:	bf38      	it	cc
 8007c84:	250c      	movcc	r5, #12
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	4606      	mov	r6, r0
 8007c8a:	db01      	blt.n	8007c90 <_malloc_r+0x1c>
 8007c8c:	42a9      	cmp	r1, r5
 8007c8e:	d904      	bls.n	8007c9a <_malloc_r+0x26>
 8007c90:	230c      	movs	r3, #12
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	2000      	movs	r0, #0
 8007c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d70 <_malloc_r+0xfc>
 8007c9e:	f000 f869 	bl	8007d74 <__malloc_lock>
 8007ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	bb44      	cbnz	r4, 8007cfc <_malloc_r+0x88>
 8007caa:	4629      	mov	r1, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff ffbf 	bl	8007c30 <sbrk_aligned>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	d158      	bne.n	8007d6a <_malloc_r+0xf6>
 8007cb8:	f8d8 4000 	ldr.w	r4, [r8]
 8007cbc:	4627      	mov	r7, r4
 8007cbe:	2f00      	cmp	r7, #0
 8007cc0:	d143      	bne.n	8007d4a <_malloc_r+0xd6>
 8007cc2:	2c00      	cmp	r4, #0
 8007cc4:	d04b      	beq.n	8007d5e <_malloc_r+0xea>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4630      	mov	r0, r6
 8007ccc:	eb04 0903 	add.w	r9, r4, r3
 8007cd0:	f000 fdf0 	bl	80088b4 <_sbrk_r>
 8007cd4:	4581      	cmp	r9, r0
 8007cd6:	d142      	bne.n	8007d5e <_malloc_r+0xea>
 8007cd8:	6821      	ldr	r1, [r4, #0]
 8007cda:	4630      	mov	r0, r6
 8007cdc:	1a6d      	subs	r5, r5, r1
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7ff ffa6 	bl	8007c30 <sbrk_aligned>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d03a      	beq.n	8007d5e <_malloc_r+0xea>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	442b      	add	r3, r5
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	bb62      	cbnz	r2, 8007d50 <_malloc_r+0xdc>
 8007cf6:	f8c8 7000 	str.w	r7, [r8]
 8007cfa:	e00f      	b.n	8007d1c <_malloc_r+0xa8>
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	1b52      	subs	r2, r2, r5
 8007d00:	d420      	bmi.n	8007d44 <_malloc_r+0xd0>
 8007d02:	2a0b      	cmp	r2, #11
 8007d04:	d917      	bls.n	8007d36 <_malloc_r+0xc2>
 8007d06:	1961      	adds	r1, r4, r5
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	6025      	str	r5, [r4, #0]
 8007d0c:	bf18      	it	ne
 8007d0e:	6059      	strne	r1, [r3, #4]
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	bf08      	it	eq
 8007d14:	f8c8 1000 	streq.w	r1, [r8]
 8007d18:	5162      	str	r2, [r4, r5]
 8007d1a:	604b      	str	r3, [r1, #4]
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 f82f 	bl	8007d80 <__malloc_unlock>
 8007d22:	f104 000b 	add.w	r0, r4, #11
 8007d26:	1d23      	adds	r3, r4, #4
 8007d28:	f020 0007 	bic.w	r0, r0, #7
 8007d2c:	1ac2      	subs	r2, r0, r3
 8007d2e:	bf1c      	itt	ne
 8007d30:	1a1b      	subne	r3, r3, r0
 8007d32:	50a3      	strne	r3, [r4, r2]
 8007d34:	e7af      	b.n	8007c96 <_malloc_r+0x22>
 8007d36:	6862      	ldr	r2, [r4, #4]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	bf0c      	ite	eq
 8007d3c:	f8c8 2000 	streq.w	r2, [r8]
 8007d40:	605a      	strne	r2, [r3, #4]
 8007d42:	e7eb      	b.n	8007d1c <_malloc_r+0xa8>
 8007d44:	4623      	mov	r3, r4
 8007d46:	6864      	ldr	r4, [r4, #4]
 8007d48:	e7ae      	b.n	8007ca8 <_malloc_r+0x34>
 8007d4a:	463c      	mov	r4, r7
 8007d4c:	687f      	ldr	r7, [r7, #4]
 8007d4e:	e7b6      	b.n	8007cbe <_malloc_r+0x4a>
 8007d50:	461a      	mov	r2, r3
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d1fb      	bne.n	8007d50 <_malloc_r+0xdc>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6053      	str	r3, [r2, #4]
 8007d5c:	e7de      	b.n	8007d1c <_malloc_r+0xa8>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	4630      	mov	r0, r6
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	f000 f80c 	bl	8007d80 <__malloc_unlock>
 8007d68:	e794      	b.n	8007c94 <_malloc_r+0x20>
 8007d6a:	6005      	str	r5, [r0, #0]
 8007d6c:	e7d6      	b.n	8007d1c <_malloc_r+0xa8>
 8007d6e:	bf00      	nop
 8007d70:	20000948 	.word	0x20000948

08007d74 <__malloc_lock>:
 8007d74:	4801      	ldr	r0, [pc, #4]	@ (8007d7c <__malloc_lock+0x8>)
 8007d76:	f7ff b89e 	b.w	8006eb6 <__retarget_lock_acquire_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	20000940 	.word	0x20000940

08007d80 <__malloc_unlock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	@ (8007d88 <__malloc_unlock+0x8>)
 8007d82:	f7ff b899 	b.w	8006eb8 <__retarget_lock_release_recursive>
 8007d86:	bf00      	nop
 8007d88:	20000940 	.word	0x20000940

08007d8c <_Balloc>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	69c6      	ldr	r6, [r0, #28]
 8007d90:	4604      	mov	r4, r0
 8007d92:	460d      	mov	r5, r1
 8007d94:	b976      	cbnz	r6, 8007db4 <_Balloc+0x28>
 8007d96:	2010      	movs	r0, #16
 8007d98:	f7ff ff42 	bl	8007c20 <malloc>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	61e0      	str	r0, [r4, #28]
 8007da0:	b920      	cbnz	r0, 8007dac <_Balloc+0x20>
 8007da2:	216b      	movs	r1, #107	@ 0x6b
 8007da4:	4b17      	ldr	r3, [pc, #92]	@ (8007e04 <_Balloc+0x78>)
 8007da6:	4818      	ldr	r0, [pc, #96]	@ (8007e08 <_Balloc+0x7c>)
 8007da8:	f000 fda2 	bl	80088f0 <__assert_func>
 8007dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007db0:	6006      	str	r6, [r0, #0]
 8007db2:	60c6      	str	r6, [r0, #12]
 8007db4:	69e6      	ldr	r6, [r4, #28]
 8007db6:	68f3      	ldr	r3, [r6, #12]
 8007db8:	b183      	cbz	r3, 8007ddc <_Balloc+0x50>
 8007dba:	69e3      	ldr	r3, [r4, #28]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dc2:	b9b8      	cbnz	r0, 8007df4 <_Balloc+0x68>
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8007dca:	1d72      	adds	r2, r6, #5
 8007dcc:	4620      	mov	r0, r4
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	f000 fdac 	bl	800892c <_calloc_r>
 8007dd4:	b160      	cbz	r0, 8007df0 <_Balloc+0x64>
 8007dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dda:	e00e      	b.n	8007dfa <_Balloc+0x6e>
 8007ddc:	2221      	movs	r2, #33	@ 0x21
 8007dde:	2104      	movs	r1, #4
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 fda3 	bl	800892c <_calloc_r>
 8007de6:	69e3      	ldr	r3, [r4, #28]
 8007de8:	60f0      	str	r0, [r6, #12]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e4      	bne.n	8007dba <_Balloc+0x2e>
 8007df0:	2000      	movs	r0, #0
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	6802      	ldr	r2, [r0, #0]
 8007df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e00:	e7f7      	b.n	8007df2 <_Balloc+0x66>
 8007e02:	bf00      	nop
 8007e04:	080097bf 	.word	0x080097bf
 8007e08:	0800983f 	.word	0x0800983f

08007e0c <_Bfree>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	69c6      	ldr	r6, [r0, #28]
 8007e10:	4605      	mov	r5, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	b976      	cbnz	r6, 8007e34 <_Bfree+0x28>
 8007e16:	2010      	movs	r0, #16
 8007e18:	f7ff ff02 	bl	8007c20 <malloc>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	61e8      	str	r0, [r5, #28]
 8007e20:	b920      	cbnz	r0, 8007e2c <_Bfree+0x20>
 8007e22:	218f      	movs	r1, #143	@ 0x8f
 8007e24:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <_Bfree+0x3c>)
 8007e26:	4809      	ldr	r0, [pc, #36]	@ (8007e4c <_Bfree+0x40>)
 8007e28:	f000 fd62 	bl	80088f0 <__assert_func>
 8007e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e30:	6006      	str	r6, [r0, #0]
 8007e32:	60c6      	str	r6, [r0, #12]
 8007e34:	b13c      	cbz	r4, 8007e46 <_Bfree+0x3a>
 8007e36:	69eb      	ldr	r3, [r5, #28]
 8007e38:	6862      	ldr	r2, [r4, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e40:	6021      	str	r1, [r4, #0]
 8007e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	080097bf 	.word	0x080097bf
 8007e4c:	0800983f 	.word	0x0800983f

08007e50 <__multadd>:
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	4607      	mov	r7, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	461e      	mov	r6, r3
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	690d      	ldr	r5, [r1, #16]
 8007e5e:	f101 0c14 	add.w	ip, r1, #20
 8007e62:	f8dc 3000 	ldr.w	r3, [ip]
 8007e66:	3001      	adds	r0, #1
 8007e68:	b299      	uxth	r1, r3
 8007e6a:	fb02 6101 	mla	r1, r2, r1, r6
 8007e6e:	0c1e      	lsrs	r6, r3, #16
 8007e70:	0c0b      	lsrs	r3, r1, #16
 8007e72:	fb02 3306 	mla	r3, r2, r6, r3
 8007e76:	b289      	uxth	r1, r1
 8007e78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e7c:	4285      	cmp	r5, r0
 8007e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e82:	f84c 1b04 	str.w	r1, [ip], #4
 8007e86:	dcec      	bgt.n	8007e62 <__multadd+0x12>
 8007e88:	b30e      	cbz	r6, 8007ece <__multadd+0x7e>
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	42ab      	cmp	r3, r5
 8007e8e:	dc19      	bgt.n	8007ec4 <__multadd+0x74>
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	4638      	mov	r0, r7
 8007e94:	3101      	adds	r1, #1
 8007e96:	f7ff ff79 	bl	8007d8c <_Balloc>
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	b928      	cbnz	r0, 8007eaa <__multadd+0x5a>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	21ba      	movs	r1, #186	@ 0xba
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <__multadd+0x84>)
 8007ea4:	480c      	ldr	r0, [pc, #48]	@ (8007ed8 <__multadd+0x88>)
 8007ea6:	f000 fd23 	bl	80088f0 <__assert_func>
 8007eaa:	6922      	ldr	r2, [r4, #16]
 8007eac:	f104 010c 	add.w	r1, r4, #12
 8007eb0:	3202      	adds	r2, #2
 8007eb2:	0092      	lsls	r2, r2, #2
 8007eb4:	300c      	adds	r0, #12
 8007eb6:	f000 fd0d 	bl	80088d4 <memcpy>
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff ffa5 	bl	8007e0c <_Bfree>
 8007ec2:	4644      	mov	r4, r8
 8007ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ec8:	3501      	adds	r5, #1
 8007eca:	615e      	str	r6, [r3, #20]
 8007ecc:	6125      	str	r5, [r4, #16]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed4:	0800982e 	.word	0x0800982e
 8007ed8:	0800983f 	.word	0x0800983f

08007edc <__hi0bits>:
 8007edc:	4603      	mov	r3, r0
 8007ede:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ee2:	bf3a      	itte	cc
 8007ee4:	0403      	lslcc	r3, r0, #16
 8007ee6:	2010      	movcc	r0, #16
 8007ee8:	2000      	movcs	r0, #0
 8007eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eee:	bf3c      	itt	cc
 8007ef0:	021b      	lslcc	r3, r3, #8
 8007ef2:	3008      	addcc	r0, #8
 8007ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ef8:	bf3c      	itt	cc
 8007efa:	011b      	lslcc	r3, r3, #4
 8007efc:	3004      	addcc	r0, #4
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	bf3c      	itt	cc
 8007f04:	009b      	lslcc	r3, r3, #2
 8007f06:	3002      	addcc	r0, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db05      	blt.n	8007f18 <__hi0bits+0x3c>
 8007f0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f10:	f100 0001 	add.w	r0, r0, #1
 8007f14:	bf08      	it	eq
 8007f16:	2020      	moveq	r0, #32
 8007f18:	4770      	bx	lr

08007f1a <__lo0bits>:
 8007f1a:	6803      	ldr	r3, [r0, #0]
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f013 0007 	ands.w	r0, r3, #7
 8007f22:	d00b      	beq.n	8007f3c <__lo0bits+0x22>
 8007f24:	07d9      	lsls	r1, r3, #31
 8007f26:	d421      	bmi.n	8007f6c <__lo0bits+0x52>
 8007f28:	0798      	lsls	r0, r3, #30
 8007f2a:	bf49      	itett	mi
 8007f2c:	085b      	lsrmi	r3, r3, #1
 8007f2e:	089b      	lsrpl	r3, r3, #2
 8007f30:	2001      	movmi	r0, #1
 8007f32:	6013      	strmi	r3, [r2, #0]
 8007f34:	bf5c      	itt	pl
 8007f36:	2002      	movpl	r0, #2
 8007f38:	6013      	strpl	r3, [r2, #0]
 8007f3a:	4770      	bx	lr
 8007f3c:	b299      	uxth	r1, r3
 8007f3e:	b909      	cbnz	r1, 8007f44 <__lo0bits+0x2a>
 8007f40:	2010      	movs	r0, #16
 8007f42:	0c1b      	lsrs	r3, r3, #16
 8007f44:	b2d9      	uxtb	r1, r3
 8007f46:	b909      	cbnz	r1, 8007f4c <__lo0bits+0x32>
 8007f48:	3008      	adds	r0, #8
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	0719      	lsls	r1, r3, #28
 8007f4e:	bf04      	itt	eq
 8007f50:	091b      	lsreq	r3, r3, #4
 8007f52:	3004      	addeq	r0, #4
 8007f54:	0799      	lsls	r1, r3, #30
 8007f56:	bf04      	itt	eq
 8007f58:	089b      	lsreq	r3, r3, #2
 8007f5a:	3002      	addeq	r0, #2
 8007f5c:	07d9      	lsls	r1, r3, #31
 8007f5e:	d403      	bmi.n	8007f68 <__lo0bits+0x4e>
 8007f60:	085b      	lsrs	r3, r3, #1
 8007f62:	f100 0001 	add.w	r0, r0, #1
 8007f66:	d003      	beq.n	8007f70 <__lo0bits+0x56>
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	4770      	bx	lr
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	4770      	bx	lr
 8007f70:	2020      	movs	r0, #32
 8007f72:	4770      	bx	lr

08007f74 <__i2b>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	460c      	mov	r4, r1
 8007f78:	2101      	movs	r1, #1
 8007f7a:	f7ff ff07 	bl	8007d8c <_Balloc>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	b928      	cbnz	r0, 8007f8e <__i2b+0x1a>
 8007f82:	f240 1145 	movw	r1, #325	@ 0x145
 8007f86:	4b04      	ldr	r3, [pc, #16]	@ (8007f98 <__i2b+0x24>)
 8007f88:	4804      	ldr	r0, [pc, #16]	@ (8007f9c <__i2b+0x28>)
 8007f8a:	f000 fcb1 	bl	80088f0 <__assert_func>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	6144      	str	r4, [r0, #20]
 8007f92:	6103      	str	r3, [r0, #16]
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	bf00      	nop
 8007f98:	0800982e 	.word	0x0800982e
 8007f9c:	0800983f 	.word	0x0800983f

08007fa0 <__multiply>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	4617      	mov	r7, r2
 8007fa6:	690a      	ldr	r2, [r1, #16]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4689      	mov	r9, r1
 8007fac:	429a      	cmp	r2, r3
 8007fae:	bfa2      	ittt	ge
 8007fb0:	463b      	movge	r3, r7
 8007fb2:	460f      	movge	r7, r1
 8007fb4:	4699      	movge	r9, r3
 8007fb6:	693d      	ldr	r5, [r7, #16]
 8007fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	eb05 060a 	add.w	r6, r5, sl
 8007fc4:	42b3      	cmp	r3, r6
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	bfb8      	it	lt
 8007fca:	3101      	addlt	r1, #1
 8007fcc:	f7ff fede 	bl	8007d8c <_Balloc>
 8007fd0:	b930      	cbnz	r0, 8007fe0 <__multiply+0x40>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fd8:	4b40      	ldr	r3, [pc, #256]	@ (80080dc <__multiply+0x13c>)
 8007fda:	4841      	ldr	r0, [pc, #260]	@ (80080e0 <__multiply+0x140>)
 8007fdc:	f000 fc88 	bl	80088f0 <__assert_func>
 8007fe0:	f100 0414 	add.w	r4, r0, #20
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007fec:	4573      	cmp	r3, lr
 8007fee:	d320      	bcc.n	8008032 <__multiply+0x92>
 8007ff0:	f107 0814 	add.w	r8, r7, #20
 8007ff4:	f109 0114 	add.w	r1, r9, #20
 8007ff8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ffc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008000:	9302      	str	r3, [sp, #8]
 8008002:	1beb      	subs	r3, r5, r7
 8008004:	3b15      	subs	r3, #21
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	3304      	adds	r3, #4
 800800c:	3715      	adds	r7, #21
 800800e:	42bd      	cmp	r5, r7
 8008010:	bf38      	it	cc
 8008012:	2304      	movcc	r3, #4
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	9103      	str	r1, [sp, #12]
 800801a:	428b      	cmp	r3, r1
 800801c:	d80c      	bhi.n	8008038 <__multiply+0x98>
 800801e:	2e00      	cmp	r6, #0
 8008020:	dd03      	ble.n	800802a <__multiply+0x8a>
 8008022:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008026:	2b00      	cmp	r3, #0
 8008028:	d055      	beq.n	80080d6 <__multiply+0x136>
 800802a:	6106      	str	r6, [r0, #16]
 800802c:	b005      	add	sp, #20
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	f843 2b04 	str.w	r2, [r3], #4
 8008036:	e7d9      	b.n	8007fec <__multiply+0x4c>
 8008038:	f8b1 a000 	ldrh.w	sl, [r1]
 800803c:	f1ba 0f00 	cmp.w	sl, #0
 8008040:	d01f      	beq.n	8008082 <__multiply+0xe2>
 8008042:	46c4      	mov	ip, r8
 8008044:	46a1      	mov	r9, r4
 8008046:	2700      	movs	r7, #0
 8008048:	f85c 2b04 	ldr.w	r2, [ip], #4
 800804c:	f8d9 3000 	ldr.w	r3, [r9]
 8008050:	fa1f fb82 	uxth.w	fp, r2
 8008054:	b29b      	uxth	r3, r3
 8008056:	fb0a 330b 	mla	r3, sl, fp, r3
 800805a:	443b      	add	r3, r7
 800805c:	f8d9 7000 	ldr.w	r7, [r9]
 8008060:	0c12      	lsrs	r2, r2, #16
 8008062:	0c3f      	lsrs	r7, r7, #16
 8008064:	fb0a 7202 	mla	r2, sl, r2, r7
 8008068:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800806c:	b29b      	uxth	r3, r3
 800806e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008072:	4565      	cmp	r5, ip
 8008074:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008078:	f849 3b04 	str.w	r3, [r9], #4
 800807c:	d8e4      	bhi.n	8008048 <__multiply+0xa8>
 800807e:	9b01      	ldr	r3, [sp, #4]
 8008080:	50e7      	str	r7, [r4, r3]
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	3104      	adds	r1, #4
 8008086:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800808a:	f1b9 0f00 	cmp.w	r9, #0
 800808e:	d020      	beq.n	80080d2 <__multiply+0x132>
 8008090:	4647      	mov	r7, r8
 8008092:	46a4      	mov	ip, r4
 8008094:	f04f 0a00 	mov.w	sl, #0
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	f8b7 b000 	ldrh.w	fp, [r7]
 800809e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	fb09 220b 	mla	r2, r9, fp, r2
 80080a8:	4452      	add	r2, sl
 80080aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ae:	f84c 3b04 	str.w	r3, [ip], #4
 80080b2:	f857 3b04 	ldr.w	r3, [r7], #4
 80080b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ba:	f8bc 3000 	ldrh.w	r3, [ip]
 80080be:	42bd      	cmp	r5, r7
 80080c0:	fb09 330a 	mla	r3, r9, sl, r3
 80080c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80080c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080cc:	d8e5      	bhi.n	800809a <__multiply+0xfa>
 80080ce:	9a01      	ldr	r2, [sp, #4]
 80080d0:	50a3      	str	r3, [r4, r2]
 80080d2:	3404      	adds	r4, #4
 80080d4:	e79f      	b.n	8008016 <__multiply+0x76>
 80080d6:	3e01      	subs	r6, #1
 80080d8:	e7a1      	b.n	800801e <__multiply+0x7e>
 80080da:	bf00      	nop
 80080dc:	0800982e 	.word	0x0800982e
 80080e0:	0800983f 	.word	0x0800983f

080080e4 <__pow5mult>:
 80080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e8:	4615      	mov	r5, r2
 80080ea:	f012 0203 	ands.w	r2, r2, #3
 80080ee:	4607      	mov	r7, r0
 80080f0:	460e      	mov	r6, r1
 80080f2:	d007      	beq.n	8008104 <__pow5mult+0x20>
 80080f4:	4c25      	ldr	r4, [pc, #148]	@ (800818c <__pow5mult+0xa8>)
 80080f6:	3a01      	subs	r2, #1
 80080f8:	2300      	movs	r3, #0
 80080fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080fe:	f7ff fea7 	bl	8007e50 <__multadd>
 8008102:	4606      	mov	r6, r0
 8008104:	10ad      	asrs	r5, r5, #2
 8008106:	d03d      	beq.n	8008184 <__pow5mult+0xa0>
 8008108:	69fc      	ldr	r4, [r7, #28]
 800810a:	b97c      	cbnz	r4, 800812c <__pow5mult+0x48>
 800810c:	2010      	movs	r0, #16
 800810e:	f7ff fd87 	bl	8007c20 <malloc>
 8008112:	4602      	mov	r2, r0
 8008114:	61f8      	str	r0, [r7, #28]
 8008116:	b928      	cbnz	r0, 8008124 <__pow5mult+0x40>
 8008118:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800811c:	4b1c      	ldr	r3, [pc, #112]	@ (8008190 <__pow5mult+0xac>)
 800811e:	481d      	ldr	r0, [pc, #116]	@ (8008194 <__pow5mult+0xb0>)
 8008120:	f000 fbe6 	bl	80088f0 <__assert_func>
 8008124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008128:	6004      	str	r4, [r0, #0]
 800812a:	60c4      	str	r4, [r0, #12]
 800812c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008134:	b94c      	cbnz	r4, 800814a <__pow5mult+0x66>
 8008136:	f240 2171 	movw	r1, #625	@ 0x271
 800813a:	4638      	mov	r0, r7
 800813c:	f7ff ff1a 	bl	8007f74 <__i2b>
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	f8c8 0008 	str.w	r0, [r8, #8]
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	07eb      	lsls	r3, r5, #31
 8008150:	d50a      	bpl.n	8008168 <__pow5mult+0x84>
 8008152:	4631      	mov	r1, r6
 8008154:	4622      	mov	r2, r4
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ff22 	bl	8007fa0 <__multiply>
 800815c:	4680      	mov	r8, r0
 800815e:	4631      	mov	r1, r6
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff fe53 	bl	8007e0c <_Bfree>
 8008166:	4646      	mov	r6, r8
 8008168:	106d      	asrs	r5, r5, #1
 800816a:	d00b      	beq.n	8008184 <__pow5mult+0xa0>
 800816c:	6820      	ldr	r0, [r4, #0]
 800816e:	b938      	cbnz	r0, 8008180 <__pow5mult+0x9c>
 8008170:	4622      	mov	r2, r4
 8008172:	4621      	mov	r1, r4
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff13 	bl	8007fa0 <__multiply>
 800817a:	6020      	str	r0, [r4, #0]
 800817c:	f8c0 9000 	str.w	r9, [r0]
 8008180:	4604      	mov	r4, r0
 8008182:	e7e4      	b.n	800814e <__pow5mult+0x6a>
 8008184:	4630      	mov	r0, r6
 8008186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818a:	bf00      	nop
 800818c:	080098f0 	.word	0x080098f0
 8008190:	080097bf 	.word	0x080097bf
 8008194:	0800983f 	.word	0x0800983f

08008198 <__lshift>:
 8008198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	460c      	mov	r4, r1
 800819e:	4607      	mov	r7, r0
 80081a0:	4691      	mov	r9, r2
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	6849      	ldr	r1, [r1, #4]
 80081a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081b0:	f108 0601 	add.w	r6, r8, #1
 80081b4:	42b3      	cmp	r3, r6
 80081b6:	db0b      	blt.n	80081d0 <__lshift+0x38>
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff fde7 	bl	8007d8c <_Balloc>
 80081be:	4605      	mov	r5, r0
 80081c0:	b948      	cbnz	r0, 80081d6 <__lshift+0x3e>
 80081c2:	4602      	mov	r2, r0
 80081c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081c8:	4b27      	ldr	r3, [pc, #156]	@ (8008268 <__lshift+0xd0>)
 80081ca:	4828      	ldr	r0, [pc, #160]	@ (800826c <__lshift+0xd4>)
 80081cc:	f000 fb90 	bl	80088f0 <__assert_func>
 80081d0:	3101      	adds	r1, #1
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	e7ee      	b.n	80081b4 <__lshift+0x1c>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f100 0114 	add.w	r1, r0, #20
 80081dc:	f100 0210 	add.w	r2, r0, #16
 80081e0:	4618      	mov	r0, r3
 80081e2:	4553      	cmp	r3, sl
 80081e4:	db33      	blt.n	800824e <__lshift+0xb6>
 80081e6:	6920      	ldr	r0, [r4, #16]
 80081e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081ec:	f104 0314 	add.w	r3, r4, #20
 80081f0:	f019 091f 	ands.w	r9, r9, #31
 80081f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081fc:	d02b      	beq.n	8008256 <__lshift+0xbe>
 80081fe:	468a      	mov	sl, r1
 8008200:	2200      	movs	r2, #0
 8008202:	f1c9 0e20 	rsb	lr, r9, #32
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	fa00 f009 	lsl.w	r0, r0, r9
 800820c:	4310      	orrs	r0, r2
 800820e:	f84a 0b04 	str.w	r0, [sl], #4
 8008212:	f853 2b04 	ldr.w	r2, [r3], #4
 8008216:	459c      	cmp	ip, r3
 8008218:	fa22 f20e 	lsr.w	r2, r2, lr
 800821c:	d8f3      	bhi.n	8008206 <__lshift+0x6e>
 800821e:	ebac 0304 	sub.w	r3, ip, r4
 8008222:	3b15      	subs	r3, #21
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	3304      	adds	r3, #4
 800822a:	f104 0015 	add.w	r0, r4, #21
 800822e:	4560      	cmp	r0, ip
 8008230:	bf88      	it	hi
 8008232:	2304      	movhi	r3, #4
 8008234:	50ca      	str	r2, [r1, r3]
 8008236:	b10a      	cbz	r2, 800823c <__lshift+0xa4>
 8008238:	f108 0602 	add.w	r6, r8, #2
 800823c:	3e01      	subs	r6, #1
 800823e:	4638      	mov	r0, r7
 8008240:	4621      	mov	r1, r4
 8008242:	612e      	str	r6, [r5, #16]
 8008244:	f7ff fde2 	bl	8007e0c <_Bfree>
 8008248:	4628      	mov	r0, r5
 800824a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008252:	3301      	adds	r3, #1
 8008254:	e7c5      	b.n	80081e2 <__lshift+0x4a>
 8008256:	3904      	subs	r1, #4
 8008258:	f853 2b04 	ldr.w	r2, [r3], #4
 800825c:	459c      	cmp	ip, r3
 800825e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008262:	d8f9      	bhi.n	8008258 <__lshift+0xc0>
 8008264:	e7ea      	b.n	800823c <__lshift+0xa4>
 8008266:	bf00      	nop
 8008268:	0800982e 	.word	0x0800982e
 800826c:	0800983f 	.word	0x0800983f

08008270 <__mcmp>:
 8008270:	4603      	mov	r3, r0
 8008272:	690a      	ldr	r2, [r1, #16]
 8008274:	6900      	ldr	r0, [r0, #16]
 8008276:	b530      	push	{r4, r5, lr}
 8008278:	1a80      	subs	r0, r0, r2
 800827a:	d10e      	bne.n	800829a <__mcmp+0x2a>
 800827c:	3314      	adds	r3, #20
 800827e:	3114      	adds	r1, #20
 8008280:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008284:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008288:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800828c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008290:	4295      	cmp	r5, r2
 8008292:	d003      	beq.n	800829c <__mcmp+0x2c>
 8008294:	d205      	bcs.n	80082a2 <__mcmp+0x32>
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	bd30      	pop	{r4, r5, pc}
 800829c:	42a3      	cmp	r3, r4
 800829e:	d3f3      	bcc.n	8008288 <__mcmp+0x18>
 80082a0:	e7fb      	b.n	800829a <__mcmp+0x2a>
 80082a2:	2001      	movs	r0, #1
 80082a4:	e7f9      	b.n	800829a <__mcmp+0x2a>
	...

080082a8 <__mdiff>:
 80082a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	4689      	mov	r9, r1
 80082ae:	4606      	mov	r6, r0
 80082b0:	4611      	mov	r1, r2
 80082b2:	4648      	mov	r0, r9
 80082b4:	4614      	mov	r4, r2
 80082b6:	f7ff ffdb 	bl	8008270 <__mcmp>
 80082ba:	1e05      	subs	r5, r0, #0
 80082bc:	d112      	bne.n	80082e4 <__mdiff+0x3c>
 80082be:	4629      	mov	r1, r5
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff fd63 	bl	8007d8c <_Balloc>
 80082c6:	4602      	mov	r2, r0
 80082c8:	b928      	cbnz	r0, 80082d6 <__mdiff+0x2e>
 80082ca:	f240 2137 	movw	r1, #567	@ 0x237
 80082ce:	4b3e      	ldr	r3, [pc, #248]	@ (80083c8 <__mdiff+0x120>)
 80082d0:	483e      	ldr	r0, [pc, #248]	@ (80083cc <__mdiff+0x124>)
 80082d2:	f000 fb0d 	bl	80088f0 <__assert_func>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082dc:	4610      	mov	r0, r2
 80082de:	b003      	add	sp, #12
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	bfbc      	itt	lt
 80082e6:	464b      	movlt	r3, r9
 80082e8:	46a1      	movlt	r9, r4
 80082ea:	4630      	mov	r0, r6
 80082ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082f0:	bfba      	itte	lt
 80082f2:	461c      	movlt	r4, r3
 80082f4:	2501      	movlt	r5, #1
 80082f6:	2500      	movge	r5, #0
 80082f8:	f7ff fd48 	bl	8007d8c <_Balloc>
 80082fc:	4602      	mov	r2, r0
 80082fe:	b918      	cbnz	r0, 8008308 <__mdiff+0x60>
 8008300:	f240 2145 	movw	r1, #581	@ 0x245
 8008304:	4b30      	ldr	r3, [pc, #192]	@ (80083c8 <__mdiff+0x120>)
 8008306:	e7e3      	b.n	80082d0 <__mdiff+0x28>
 8008308:	f100 0b14 	add.w	fp, r0, #20
 800830c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008310:	f109 0310 	add.w	r3, r9, #16
 8008314:	60c5      	str	r5, [r0, #12]
 8008316:	f04f 0c00 	mov.w	ip, #0
 800831a:	f109 0514 	add.w	r5, r9, #20
 800831e:	46d9      	mov	r9, fp
 8008320:	6926      	ldr	r6, [r4, #16]
 8008322:	f104 0e14 	add.w	lr, r4, #20
 8008326:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800832a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008336:	f853 af04 	ldr.w	sl, [r3, #4]!
 800833a:	b281      	uxth	r1, r0
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	fa1f f38a 	uxth.w	r3, sl
 8008342:	1a5b      	subs	r3, r3, r1
 8008344:	0c00      	lsrs	r0, r0, #16
 8008346:	4463      	add	r3, ip
 8008348:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800834c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008350:	b29b      	uxth	r3, r3
 8008352:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008356:	4576      	cmp	r6, lr
 8008358:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800835c:	f849 3b04 	str.w	r3, [r9], #4
 8008360:	d8e6      	bhi.n	8008330 <__mdiff+0x88>
 8008362:	1b33      	subs	r3, r6, r4
 8008364:	3b15      	subs	r3, #21
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	3415      	adds	r4, #21
 800836c:	3304      	adds	r3, #4
 800836e:	42a6      	cmp	r6, r4
 8008370:	bf38      	it	cc
 8008372:	2304      	movcc	r3, #4
 8008374:	441d      	add	r5, r3
 8008376:	445b      	add	r3, fp
 8008378:	461e      	mov	r6, r3
 800837a:	462c      	mov	r4, r5
 800837c:	4544      	cmp	r4, r8
 800837e:	d30e      	bcc.n	800839e <__mdiff+0xf6>
 8008380:	f108 0103 	add.w	r1, r8, #3
 8008384:	1b49      	subs	r1, r1, r5
 8008386:	f021 0103 	bic.w	r1, r1, #3
 800838a:	3d03      	subs	r5, #3
 800838c:	45a8      	cmp	r8, r5
 800838e:	bf38      	it	cc
 8008390:	2100      	movcc	r1, #0
 8008392:	440b      	add	r3, r1
 8008394:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008398:	b199      	cbz	r1, 80083c2 <__mdiff+0x11a>
 800839a:	6117      	str	r7, [r2, #16]
 800839c:	e79e      	b.n	80082dc <__mdiff+0x34>
 800839e:	46e6      	mov	lr, ip
 80083a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80083a4:	fa1f fc81 	uxth.w	ip, r1
 80083a8:	44f4      	add	ip, lr
 80083aa:	0c08      	lsrs	r0, r1, #16
 80083ac:	4471      	add	r1, lr
 80083ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80083b2:	b289      	uxth	r1, r1
 80083b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083bc:	f846 1b04 	str.w	r1, [r6], #4
 80083c0:	e7dc      	b.n	800837c <__mdiff+0xd4>
 80083c2:	3f01      	subs	r7, #1
 80083c4:	e7e6      	b.n	8008394 <__mdiff+0xec>
 80083c6:	bf00      	nop
 80083c8:	0800982e 	.word	0x0800982e
 80083cc:	0800983f 	.word	0x0800983f

080083d0 <__d2b>:
 80083d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80083d4:	2101      	movs	r1, #1
 80083d6:	4690      	mov	r8, r2
 80083d8:	4699      	mov	r9, r3
 80083da:	9e08      	ldr	r6, [sp, #32]
 80083dc:	f7ff fcd6 	bl	8007d8c <_Balloc>
 80083e0:	4604      	mov	r4, r0
 80083e2:	b930      	cbnz	r0, 80083f2 <__d2b+0x22>
 80083e4:	4602      	mov	r2, r0
 80083e6:	f240 310f 	movw	r1, #783	@ 0x30f
 80083ea:	4b23      	ldr	r3, [pc, #140]	@ (8008478 <__d2b+0xa8>)
 80083ec:	4823      	ldr	r0, [pc, #140]	@ (800847c <__d2b+0xac>)
 80083ee:	f000 fa7f 	bl	80088f0 <__assert_func>
 80083f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083fa:	b10d      	cbz	r5, 8008400 <__d2b+0x30>
 80083fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f1b8 0300 	subs.w	r3, r8, #0
 8008406:	d024      	beq.n	8008452 <__d2b+0x82>
 8008408:	4668      	mov	r0, sp
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	f7ff fd85 	bl	8007f1a <__lo0bits>
 8008410:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008414:	b1d8      	cbz	r0, 800844e <__d2b+0x7e>
 8008416:	f1c0 0320 	rsb	r3, r0, #32
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	430b      	orrs	r3, r1
 8008420:	40c2      	lsrs	r2, r0
 8008422:	6163      	str	r3, [r4, #20]
 8008424:	9201      	str	r2, [sp, #4]
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bf0c      	ite	eq
 800842c:	2201      	moveq	r2, #1
 800842e:	2202      	movne	r2, #2
 8008430:	61a3      	str	r3, [r4, #24]
 8008432:	6122      	str	r2, [r4, #16]
 8008434:	b1ad      	cbz	r5, 8008462 <__d2b+0x92>
 8008436:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800843a:	4405      	add	r5, r0
 800843c:	6035      	str	r5, [r6, #0]
 800843e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008444:	6018      	str	r0, [r3, #0]
 8008446:	4620      	mov	r0, r4
 8008448:	b002      	add	sp, #8
 800844a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800844e:	6161      	str	r1, [r4, #20]
 8008450:	e7e9      	b.n	8008426 <__d2b+0x56>
 8008452:	a801      	add	r0, sp, #4
 8008454:	f7ff fd61 	bl	8007f1a <__lo0bits>
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	6163      	str	r3, [r4, #20]
 800845e:	3020      	adds	r0, #32
 8008460:	e7e7      	b.n	8008432 <__d2b+0x62>
 8008462:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008466:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	6918      	ldr	r0, [r3, #16]
 800846e:	f7ff fd35 	bl	8007edc <__hi0bits>
 8008472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008476:	e7e4      	b.n	8008442 <__d2b+0x72>
 8008478:	0800982e 	.word	0x0800982e
 800847c:	0800983f 	.word	0x0800983f

08008480 <__ssputs_r>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	461f      	mov	r7, r3
 8008486:	688e      	ldr	r6, [r1, #8]
 8008488:	4682      	mov	sl, r0
 800848a:	42be      	cmp	r6, r7
 800848c:	460c      	mov	r4, r1
 800848e:	4690      	mov	r8, r2
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	d82d      	bhi.n	80084f0 <__ssputs_r+0x70>
 8008494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800849c:	d026      	beq.n	80084ec <__ssputs_r+0x6c>
 800849e:	6965      	ldr	r5, [r4, #20]
 80084a0:	6909      	ldr	r1, [r1, #16]
 80084a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084a6:	eba3 0901 	sub.w	r9, r3, r1
 80084aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ae:	1c7b      	adds	r3, r7, #1
 80084b0:	444b      	add	r3, r9
 80084b2:	106d      	asrs	r5, r5, #1
 80084b4:	429d      	cmp	r5, r3
 80084b6:	bf38      	it	cc
 80084b8:	461d      	movcc	r5, r3
 80084ba:	0553      	lsls	r3, r2, #21
 80084bc:	d527      	bpl.n	800850e <__ssputs_r+0x8e>
 80084be:	4629      	mov	r1, r5
 80084c0:	f7ff fbd8 	bl	8007c74 <_malloc_r>
 80084c4:	4606      	mov	r6, r0
 80084c6:	b360      	cbz	r0, 8008522 <__ssputs_r+0xa2>
 80084c8:	464a      	mov	r2, r9
 80084ca:	6921      	ldr	r1, [r4, #16]
 80084cc:	f000 fa02 	bl	80088d4 <memcpy>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	6126      	str	r6, [r4, #16]
 80084de:	444e      	add	r6, r9
 80084e0:	6026      	str	r6, [r4, #0]
 80084e2:	463e      	mov	r6, r7
 80084e4:	6165      	str	r5, [r4, #20]
 80084e6:	eba5 0509 	sub.w	r5, r5, r9
 80084ea:	60a5      	str	r5, [r4, #8]
 80084ec:	42be      	cmp	r6, r7
 80084ee:	d900      	bls.n	80084f2 <__ssputs_r+0x72>
 80084f0:	463e      	mov	r6, r7
 80084f2:	4632      	mov	r2, r6
 80084f4:	4641      	mov	r1, r8
 80084f6:	6820      	ldr	r0, [r4, #0]
 80084f8:	f000 f9c2 	bl	8008880 <memmove>
 80084fc:	2000      	movs	r0, #0
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	1b9b      	subs	r3, r3, r6
 8008502:	60a3      	str	r3, [r4, #8]
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	4433      	add	r3, r6
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850e:	462a      	mov	r2, r5
 8008510:	f000 fa32 	bl	8008978 <_realloc_r>
 8008514:	4606      	mov	r6, r0
 8008516:	2800      	cmp	r0, #0
 8008518:	d1e0      	bne.n	80084dc <__ssputs_r+0x5c>
 800851a:	4650      	mov	r0, sl
 800851c:	6921      	ldr	r1, [r4, #16]
 800851e:	f7ff fb37 	bl	8007b90 <_free_r>
 8008522:	230c      	movs	r3, #12
 8008524:	f8ca 3000 	str.w	r3, [sl]
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	e7e9      	b.n	800850a <__ssputs_r+0x8a>
	...

08008538 <_svfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	4698      	mov	r8, r3
 800853e:	898b      	ldrh	r3, [r1, #12]
 8008540:	4607      	mov	r7, r0
 8008542:	061b      	lsls	r3, r3, #24
 8008544:	460d      	mov	r5, r1
 8008546:	4614      	mov	r4, r2
 8008548:	b09d      	sub	sp, #116	@ 0x74
 800854a:	d510      	bpl.n	800856e <_svfiprintf_r+0x36>
 800854c:	690b      	ldr	r3, [r1, #16]
 800854e:	b973      	cbnz	r3, 800856e <_svfiprintf_r+0x36>
 8008550:	2140      	movs	r1, #64	@ 0x40
 8008552:	f7ff fb8f 	bl	8007c74 <_malloc_r>
 8008556:	6028      	str	r0, [r5, #0]
 8008558:	6128      	str	r0, [r5, #16]
 800855a:	b930      	cbnz	r0, 800856a <_svfiprintf_r+0x32>
 800855c:	230c      	movs	r3, #12
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	b01d      	add	sp, #116	@ 0x74
 8008566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800856a:	2340      	movs	r3, #64	@ 0x40
 800856c:	616b      	str	r3, [r5, #20]
 800856e:	2300      	movs	r3, #0
 8008570:	9309      	str	r3, [sp, #36]	@ 0x24
 8008572:	2320      	movs	r3, #32
 8008574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008578:	2330      	movs	r3, #48	@ 0x30
 800857a:	f04f 0901 	mov.w	r9, #1
 800857e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008582:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800871c <_svfiprintf_r+0x1e4>
 8008586:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800858a:	4623      	mov	r3, r4
 800858c:	469a      	mov	sl, r3
 800858e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008592:	b10a      	cbz	r2, 8008598 <_svfiprintf_r+0x60>
 8008594:	2a25      	cmp	r2, #37	@ 0x25
 8008596:	d1f9      	bne.n	800858c <_svfiprintf_r+0x54>
 8008598:	ebba 0b04 	subs.w	fp, sl, r4
 800859c:	d00b      	beq.n	80085b6 <_svfiprintf_r+0x7e>
 800859e:	465b      	mov	r3, fp
 80085a0:	4622      	mov	r2, r4
 80085a2:	4629      	mov	r1, r5
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ff6b 	bl	8008480 <__ssputs_r>
 80085aa:	3001      	adds	r0, #1
 80085ac:	f000 80a7 	beq.w	80086fe <_svfiprintf_r+0x1c6>
 80085b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085b2:	445a      	add	r2, fp
 80085b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80085b6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 809f 	beq.w	80086fe <_svfiprintf_r+0x1c6>
 80085c0:	2300      	movs	r3, #0
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295
 80085c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ca:	f10a 0a01 	add.w	sl, sl, #1
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085d8:	4654      	mov	r4, sl
 80085da:	2205      	movs	r2, #5
 80085dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e0:	484e      	ldr	r0, [pc, #312]	@ (800871c <_svfiprintf_r+0x1e4>)
 80085e2:	f7fe fc6a 	bl	8006eba <memchr>
 80085e6:	9a04      	ldr	r2, [sp, #16]
 80085e8:	b9d8      	cbnz	r0, 8008622 <_svfiprintf_r+0xea>
 80085ea:	06d0      	lsls	r0, r2, #27
 80085ec:	bf44      	itt	mi
 80085ee:	2320      	movmi	r3, #32
 80085f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085f4:	0711      	lsls	r1, r2, #28
 80085f6:	bf44      	itt	mi
 80085f8:	232b      	movmi	r3, #43	@ 0x2b
 80085fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008602:	2b2a      	cmp	r3, #42	@ 0x2a
 8008604:	d015      	beq.n	8008632 <_svfiprintf_r+0xfa>
 8008606:	4654      	mov	r4, sl
 8008608:	2000      	movs	r0, #0
 800860a:	f04f 0c0a 	mov.w	ip, #10
 800860e:	9a07      	ldr	r2, [sp, #28]
 8008610:	4621      	mov	r1, r4
 8008612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008616:	3b30      	subs	r3, #48	@ 0x30
 8008618:	2b09      	cmp	r3, #9
 800861a:	d94b      	bls.n	80086b4 <_svfiprintf_r+0x17c>
 800861c:	b1b0      	cbz	r0, 800864c <_svfiprintf_r+0x114>
 800861e:	9207      	str	r2, [sp, #28]
 8008620:	e014      	b.n	800864c <_svfiprintf_r+0x114>
 8008622:	eba0 0308 	sub.w	r3, r0, r8
 8008626:	fa09 f303 	lsl.w	r3, r9, r3
 800862a:	4313      	orrs	r3, r2
 800862c:	46a2      	mov	sl, r4
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	e7d2      	b.n	80085d8 <_svfiprintf_r+0xa0>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	1d19      	adds	r1, r3, #4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	9103      	str	r1, [sp, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfbb      	ittet	lt
 800863e:	425b      	neglt	r3, r3
 8008640:	f042 0202 	orrlt.w	r2, r2, #2
 8008644:	9307      	strge	r3, [sp, #28]
 8008646:	9307      	strlt	r3, [sp, #28]
 8008648:	bfb8      	it	lt
 800864a:	9204      	strlt	r2, [sp, #16]
 800864c:	7823      	ldrb	r3, [r4, #0]
 800864e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008650:	d10a      	bne.n	8008668 <_svfiprintf_r+0x130>
 8008652:	7863      	ldrb	r3, [r4, #1]
 8008654:	2b2a      	cmp	r3, #42	@ 0x2a
 8008656:	d132      	bne.n	80086be <_svfiprintf_r+0x186>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	3402      	adds	r4, #2
 800865c:	1d1a      	adds	r2, r3, #4
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	9203      	str	r2, [sp, #12]
 8008662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008720 <_svfiprintf_r+0x1e8>
 800866c:	2203      	movs	r2, #3
 800866e:	4650      	mov	r0, sl
 8008670:	7821      	ldrb	r1, [r4, #0]
 8008672:	f7fe fc22 	bl	8006eba <memchr>
 8008676:	b138      	cbz	r0, 8008688 <_svfiprintf_r+0x150>
 8008678:	2240      	movs	r2, #64	@ 0x40
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	eba0 000a 	sub.w	r0, r0, sl
 8008680:	4082      	lsls	r2, r0
 8008682:	4313      	orrs	r3, r2
 8008684:	3401      	adds	r4, #1
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868c:	2206      	movs	r2, #6
 800868e:	4825      	ldr	r0, [pc, #148]	@ (8008724 <_svfiprintf_r+0x1ec>)
 8008690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008694:	f7fe fc11 	bl	8006eba <memchr>
 8008698:	2800      	cmp	r0, #0
 800869a:	d036      	beq.n	800870a <_svfiprintf_r+0x1d2>
 800869c:	4b22      	ldr	r3, [pc, #136]	@ (8008728 <_svfiprintf_r+0x1f0>)
 800869e:	bb1b      	cbnz	r3, 80086e8 <_svfiprintf_r+0x1b0>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	3307      	adds	r3, #7
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	3308      	adds	r3, #8
 80086aa:	9303      	str	r3, [sp, #12]
 80086ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ae:	4433      	add	r3, r6
 80086b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b2:	e76a      	b.n	800858a <_svfiprintf_r+0x52>
 80086b4:	460c      	mov	r4, r1
 80086b6:	2001      	movs	r0, #1
 80086b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086bc:	e7a8      	b.n	8008610 <_svfiprintf_r+0xd8>
 80086be:	2300      	movs	r3, #0
 80086c0:	f04f 0c0a 	mov.w	ip, #10
 80086c4:	4619      	mov	r1, r3
 80086c6:	3401      	adds	r4, #1
 80086c8:	9305      	str	r3, [sp, #20]
 80086ca:	4620      	mov	r0, r4
 80086cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d0:	3a30      	subs	r2, #48	@ 0x30
 80086d2:	2a09      	cmp	r2, #9
 80086d4:	d903      	bls.n	80086de <_svfiprintf_r+0x1a6>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0c6      	beq.n	8008668 <_svfiprintf_r+0x130>
 80086da:	9105      	str	r1, [sp, #20]
 80086dc:	e7c4      	b.n	8008668 <_svfiprintf_r+0x130>
 80086de:	4604      	mov	r4, r0
 80086e0:	2301      	movs	r3, #1
 80086e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086e6:	e7f0      	b.n	80086ca <_svfiprintf_r+0x192>
 80086e8:	ab03      	add	r3, sp, #12
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	462a      	mov	r2, r5
 80086ee:	4638      	mov	r0, r7
 80086f0:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <_svfiprintf_r+0x1f4>)
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	f7fd fe7e 	bl	80063f4 <_printf_float>
 80086f8:	1c42      	adds	r2, r0, #1
 80086fa:	4606      	mov	r6, r0
 80086fc:	d1d6      	bne.n	80086ac <_svfiprintf_r+0x174>
 80086fe:	89ab      	ldrh	r3, [r5, #12]
 8008700:	065b      	lsls	r3, r3, #25
 8008702:	f53f af2d 	bmi.w	8008560 <_svfiprintf_r+0x28>
 8008706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008708:	e72c      	b.n	8008564 <_svfiprintf_r+0x2c>
 800870a:	ab03      	add	r3, sp, #12
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	462a      	mov	r2, r5
 8008710:	4638      	mov	r0, r7
 8008712:	4b06      	ldr	r3, [pc, #24]	@ (800872c <_svfiprintf_r+0x1f4>)
 8008714:	a904      	add	r1, sp, #16
 8008716:	f7fe f90b 	bl	8006930 <_printf_i>
 800871a:	e7ed      	b.n	80086f8 <_svfiprintf_r+0x1c0>
 800871c:	08009898 	.word	0x08009898
 8008720:	0800989e 	.word	0x0800989e
 8008724:	080098a2 	.word	0x080098a2
 8008728:	080063f5 	.word	0x080063f5
 800872c:	08008481 	.word	0x08008481

08008730 <__sflush_r>:
 8008730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	0716      	lsls	r6, r2, #28
 8008738:	4605      	mov	r5, r0
 800873a:	460c      	mov	r4, r1
 800873c:	d454      	bmi.n	80087e8 <__sflush_r+0xb8>
 800873e:	684b      	ldr	r3, [r1, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	dc02      	bgt.n	800874a <__sflush_r+0x1a>
 8008744:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	dd48      	ble.n	80087dc <__sflush_r+0xac>
 800874a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800874c:	2e00      	cmp	r6, #0
 800874e:	d045      	beq.n	80087dc <__sflush_r+0xac>
 8008750:	2300      	movs	r3, #0
 8008752:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008756:	682f      	ldr	r7, [r5, #0]
 8008758:	6a21      	ldr	r1, [r4, #32]
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	d030      	beq.n	80087c0 <__sflush_r+0x90>
 800875e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	0759      	lsls	r1, r3, #29
 8008764:	d505      	bpl.n	8008772 <__sflush_r+0x42>
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	1ad2      	subs	r2, r2, r3
 800876a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800876c:	b10b      	cbz	r3, 8008772 <__sflush_r+0x42>
 800876e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008770:	1ad2      	subs	r2, r2, r3
 8008772:	2300      	movs	r3, #0
 8008774:	4628      	mov	r0, r5
 8008776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008778:	6a21      	ldr	r1, [r4, #32]
 800877a:	47b0      	blx	r6
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	d106      	bne.n	8008790 <__sflush_r+0x60>
 8008782:	6829      	ldr	r1, [r5, #0]
 8008784:	291d      	cmp	r1, #29
 8008786:	d82b      	bhi.n	80087e0 <__sflush_r+0xb0>
 8008788:	4a28      	ldr	r2, [pc, #160]	@ (800882c <__sflush_r+0xfc>)
 800878a:	40ca      	lsrs	r2, r1
 800878c:	07d6      	lsls	r6, r2, #31
 800878e:	d527      	bpl.n	80087e0 <__sflush_r+0xb0>
 8008790:	2200      	movs	r2, #0
 8008792:	6062      	str	r2, [r4, #4]
 8008794:	6922      	ldr	r2, [r4, #16]
 8008796:	04d9      	lsls	r1, r3, #19
 8008798:	6022      	str	r2, [r4, #0]
 800879a:	d504      	bpl.n	80087a6 <__sflush_r+0x76>
 800879c:	1c42      	adds	r2, r0, #1
 800879e:	d101      	bne.n	80087a4 <__sflush_r+0x74>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b903      	cbnz	r3, 80087a6 <__sflush_r+0x76>
 80087a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80087a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087a8:	602f      	str	r7, [r5, #0]
 80087aa:	b1b9      	cbz	r1, 80087dc <__sflush_r+0xac>
 80087ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d002      	beq.n	80087ba <__sflush_r+0x8a>
 80087b4:	4628      	mov	r0, r5
 80087b6:	f7ff f9eb 	bl	8007b90 <_free_r>
 80087ba:	2300      	movs	r3, #0
 80087bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80087be:	e00d      	b.n	80087dc <__sflush_r+0xac>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b0      	blx	r6
 80087c6:	4602      	mov	r2, r0
 80087c8:	1c50      	adds	r0, r2, #1
 80087ca:	d1c9      	bne.n	8008760 <__sflush_r+0x30>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0c6      	beq.n	8008760 <__sflush_r+0x30>
 80087d2:	2b1d      	cmp	r3, #29
 80087d4:	d001      	beq.n	80087da <__sflush_r+0xaa>
 80087d6:	2b16      	cmp	r3, #22
 80087d8:	d11d      	bne.n	8008816 <__sflush_r+0xe6>
 80087da:	602f      	str	r7, [r5, #0]
 80087dc:	2000      	movs	r0, #0
 80087de:	e021      	b.n	8008824 <__sflush_r+0xf4>
 80087e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e4:	b21b      	sxth	r3, r3
 80087e6:	e01a      	b.n	800881e <__sflush_r+0xee>
 80087e8:	690f      	ldr	r7, [r1, #16]
 80087ea:	2f00      	cmp	r7, #0
 80087ec:	d0f6      	beq.n	80087dc <__sflush_r+0xac>
 80087ee:	0793      	lsls	r3, r2, #30
 80087f0:	bf18      	it	ne
 80087f2:	2300      	movne	r3, #0
 80087f4:	680e      	ldr	r6, [r1, #0]
 80087f6:	bf08      	it	eq
 80087f8:	694b      	ldreq	r3, [r1, #20]
 80087fa:	1bf6      	subs	r6, r6, r7
 80087fc:	600f      	str	r7, [r1, #0]
 80087fe:	608b      	str	r3, [r1, #8]
 8008800:	2e00      	cmp	r6, #0
 8008802:	ddeb      	ble.n	80087dc <__sflush_r+0xac>
 8008804:	4633      	mov	r3, r6
 8008806:	463a      	mov	r2, r7
 8008808:	4628      	mov	r0, r5
 800880a:	6a21      	ldr	r1, [r4, #32]
 800880c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008810:	47e0      	blx	ip
 8008812:	2800      	cmp	r0, #0
 8008814:	dc07      	bgt.n	8008826 <__sflush_r+0xf6>
 8008816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008826:	4407      	add	r7, r0
 8008828:	1a36      	subs	r6, r6, r0
 800882a:	e7e9      	b.n	8008800 <__sflush_r+0xd0>
 800882c:	20400001 	.word	0x20400001

08008830 <_fflush_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	690b      	ldr	r3, [r1, #16]
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b913      	cbnz	r3, 8008840 <_fflush_r+0x10>
 800883a:	2500      	movs	r5, #0
 800883c:	4628      	mov	r0, r5
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	b118      	cbz	r0, 800884a <_fflush_r+0x1a>
 8008842:	6a03      	ldr	r3, [r0, #32]
 8008844:	b90b      	cbnz	r3, 800884a <_fflush_r+0x1a>
 8008846:	f7fe fa1d 	bl	8006c84 <__sinit>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f3      	beq.n	800883a <_fflush_r+0xa>
 8008852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008854:	07d0      	lsls	r0, r2, #31
 8008856:	d404      	bmi.n	8008862 <_fflush_r+0x32>
 8008858:	0599      	lsls	r1, r3, #22
 800885a:	d402      	bmi.n	8008862 <_fflush_r+0x32>
 800885c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885e:	f7fe fb2a 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8008862:	4628      	mov	r0, r5
 8008864:	4621      	mov	r1, r4
 8008866:	f7ff ff63 	bl	8008730 <__sflush_r>
 800886a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800886c:	4605      	mov	r5, r0
 800886e:	07da      	lsls	r2, r3, #31
 8008870:	d4e4      	bmi.n	800883c <_fflush_r+0xc>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4e1      	bmi.n	800883c <_fflush_r+0xc>
 8008878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800887a:	f7fe fb1d 	bl	8006eb8 <__retarget_lock_release_recursive>
 800887e:	e7dd      	b.n	800883c <_fflush_r+0xc>

08008880 <memmove>:
 8008880:	4288      	cmp	r0, r1
 8008882:	b510      	push	{r4, lr}
 8008884:	eb01 0402 	add.w	r4, r1, r2
 8008888:	d902      	bls.n	8008890 <memmove+0x10>
 800888a:	4284      	cmp	r4, r0
 800888c:	4623      	mov	r3, r4
 800888e:	d807      	bhi.n	80088a0 <memmove+0x20>
 8008890:	1e43      	subs	r3, r0, #1
 8008892:	42a1      	cmp	r1, r4
 8008894:	d008      	beq.n	80088a8 <memmove+0x28>
 8008896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800889a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800889e:	e7f8      	b.n	8008892 <memmove+0x12>
 80088a0:	4601      	mov	r1, r0
 80088a2:	4402      	add	r2, r0
 80088a4:	428a      	cmp	r2, r1
 80088a6:	d100      	bne.n	80088aa <memmove+0x2a>
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088b2:	e7f7      	b.n	80088a4 <memmove+0x24>

080088b4 <_sbrk_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	2300      	movs	r3, #0
 80088b8:	4d05      	ldr	r5, [pc, #20]	@ (80088d0 <_sbrk_r+0x1c>)
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	f7f9 fe4a 	bl	8002558 <_sbrk>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_sbrk_r+0x1a>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_sbrk_r+0x1a>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	2000093c 	.word	0x2000093c

080088d4 <memcpy>:
 80088d4:	440a      	add	r2, r1
 80088d6:	4291      	cmp	r1, r2
 80088d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088dc:	d100      	bne.n	80088e0 <memcpy+0xc>
 80088de:	4770      	bx	lr
 80088e0:	b510      	push	{r4, lr}
 80088e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e6:	4291      	cmp	r1, r2
 80088e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ec:	d1f9      	bne.n	80088e2 <memcpy+0xe>
 80088ee:	bd10      	pop	{r4, pc}

080088f0 <__assert_func>:
 80088f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088f2:	4614      	mov	r4, r2
 80088f4:	461a      	mov	r2, r3
 80088f6:	4b09      	ldr	r3, [pc, #36]	@ (800891c <__assert_func+0x2c>)
 80088f8:	4605      	mov	r5, r0
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68d8      	ldr	r0, [r3, #12]
 80088fe:	b14c      	cbz	r4, 8008914 <__assert_func+0x24>
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <__assert_func+0x30>)
 8008902:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008906:	9100      	str	r1, [sp, #0]
 8008908:	462b      	mov	r3, r5
 800890a:	4906      	ldr	r1, [pc, #24]	@ (8008924 <__assert_func+0x34>)
 800890c:	f000 f870 	bl	80089f0 <fiprintf>
 8008910:	f000 f880 	bl	8008a14 <abort>
 8008914:	4b04      	ldr	r3, [pc, #16]	@ (8008928 <__assert_func+0x38>)
 8008916:	461c      	mov	r4, r3
 8008918:	e7f3      	b.n	8008902 <__assert_func+0x12>
 800891a:	bf00      	nop
 800891c:	20000050 	.word	0x20000050
 8008920:	080098b3 	.word	0x080098b3
 8008924:	080098c0 	.word	0x080098c0
 8008928:	080098ee 	.word	0x080098ee

0800892c <_calloc_r>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	fba1 5402 	umull	r5, r4, r1, r2
 8008932:	b934      	cbnz	r4, 8008942 <_calloc_r+0x16>
 8008934:	4629      	mov	r1, r5
 8008936:	f7ff f99d 	bl	8007c74 <_malloc_r>
 800893a:	4606      	mov	r6, r0
 800893c:	b928      	cbnz	r0, 800894a <_calloc_r+0x1e>
 800893e:	4630      	mov	r0, r6
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	220c      	movs	r2, #12
 8008944:	2600      	movs	r6, #0
 8008946:	6002      	str	r2, [r0, #0]
 8008948:	e7f9      	b.n	800893e <_calloc_r+0x12>
 800894a:	462a      	mov	r2, r5
 800894c:	4621      	mov	r1, r4
 800894e:	f7fe fa34 	bl	8006dba <memset>
 8008952:	e7f4      	b.n	800893e <_calloc_r+0x12>

08008954 <__ascii_mbtowc>:
 8008954:	b082      	sub	sp, #8
 8008956:	b901      	cbnz	r1, 800895a <__ascii_mbtowc+0x6>
 8008958:	a901      	add	r1, sp, #4
 800895a:	b142      	cbz	r2, 800896e <__ascii_mbtowc+0x1a>
 800895c:	b14b      	cbz	r3, 8008972 <__ascii_mbtowc+0x1e>
 800895e:	7813      	ldrb	r3, [r2, #0]
 8008960:	600b      	str	r3, [r1, #0]
 8008962:	7812      	ldrb	r2, [r2, #0]
 8008964:	1e10      	subs	r0, r2, #0
 8008966:	bf18      	it	ne
 8008968:	2001      	movne	r0, #1
 800896a:	b002      	add	sp, #8
 800896c:	4770      	bx	lr
 800896e:	4610      	mov	r0, r2
 8008970:	e7fb      	b.n	800896a <__ascii_mbtowc+0x16>
 8008972:	f06f 0001 	mvn.w	r0, #1
 8008976:	e7f8      	b.n	800896a <__ascii_mbtowc+0x16>

08008978 <_realloc_r>:
 8008978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897c:	4607      	mov	r7, r0
 800897e:	4614      	mov	r4, r2
 8008980:	460d      	mov	r5, r1
 8008982:	b921      	cbnz	r1, 800898e <_realloc_r+0x16>
 8008984:	4611      	mov	r1, r2
 8008986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	f7ff b973 	b.w	8007c74 <_malloc_r>
 800898e:	b92a      	cbnz	r2, 800899c <_realloc_r+0x24>
 8008990:	f7ff f8fe 	bl	8007b90 <_free_r>
 8008994:	4625      	mov	r5, r4
 8008996:	4628      	mov	r0, r5
 8008998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899c:	f000 f841 	bl	8008a22 <_malloc_usable_size_r>
 80089a0:	4284      	cmp	r4, r0
 80089a2:	4606      	mov	r6, r0
 80089a4:	d802      	bhi.n	80089ac <_realloc_r+0x34>
 80089a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089aa:	d8f4      	bhi.n	8008996 <_realloc_r+0x1e>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7ff f960 	bl	8007c74 <_malloc_r>
 80089b4:	4680      	mov	r8, r0
 80089b6:	b908      	cbnz	r0, 80089bc <_realloc_r+0x44>
 80089b8:	4645      	mov	r5, r8
 80089ba:	e7ec      	b.n	8008996 <_realloc_r+0x1e>
 80089bc:	42b4      	cmp	r4, r6
 80089be:	4622      	mov	r2, r4
 80089c0:	4629      	mov	r1, r5
 80089c2:	bf28      	it	cs
 80089c4:	4632      	movcs	r2, r6
 80089c6:	f7ff ff85 	bl	80088d4 <memcpy>
 80089ca:	4629      	mov	r1, r5
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff f8df 	bl	8007b90 <_free_r>
 80089d2:	e7f1      	b.n	80089b8 <_realloc_r+0x40>

080089d4 <__ascii_wctomb>:
 80089d4:	4603      	mov	r3, r0
 80089d6:	4608      	mov	r0, r1
 80089d8:	b141      	cbz	r1, 80089ec <__ascii_wctomb+0x18>
 80089da:	2aff      	cmp	r2, #255	@ 0xff
 80089dc:	d904      	bls.n	80089e8 <__ascii_wctomb+0x14>
 80089de:	228a      	movs	r2, #138	@ 0x8a
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	4770      	bx	lr
 80089e8:	2001      	movs	r0, #1
 80089ea:	700a      	strb	r2, [r1, #0]
 80089ec:	4770      	bx	lr
	...

080089f0 <fiprintf>:
 80089f0:	b40e      	push	{r1, r2, r3}
 80089f2:	b503      	push	{r0, r1, lr}
 80089f4:	4601      	mov	r1, r0
 80089f6:	ab03      	add	r3, sp, #12
 80089f8:	4805      	ldr	r0, [pc, #20]	@ (8008a10 <fiprintf+0x20>)
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	f000 f83d 	bl	8008a80 <_vfiprintf_r>
 8008a06:	b002      	add	sp, #8
 8008a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a0c:	b003      	add	sp, #12
 8008a0e:	4770      	bx	lr
 8008a10:	20000050 	.word	0x20000050

08008a14 <abort>:
 8008a14:	2006      	movs	r0, #6
 8008a16:	b508      	push	{r3, lr}
 8008a18:	f000 fa06 	bl	8008e28 <raise>
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	f7f9 fd42 	bl	80024a6 <_exit>

08008a22 <_malloc_usable_size_r>:
 8008a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a26:	1f18      	subs	r0, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	bfbc      	itt	lt
 8008a2c:	580b      	ldrlt	r3, [r1, r0]
 8008a2e:	18c0      	addlt	r0, r0, r3
 8008a30:	4770      	bx	lr

08008a32 <__sfputc_r>:
 8008a32:	6893      	ldr	r3, [r2, #8]
 8008a34:	b410      	push	{r4}
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	6093      	str	r3, [r2, #8]
 8008a3c:	da07      	bge.n	8008a4e <__sfputc_r+0x1c>
 8008a3e:	6994      	ldr	r4, [r2, #24]
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	db01      	blt.n	8008a48 <__sfputc_r+0x16>
 8008a44:	290a      	cmp	r1, #10
 8008a46:	d102      	bne.n	8008a4e <__sfputc_r+0x1c>
 8008a48:	bc10      	pop	{r4}
 8008a4a:	f000 b931 	b.w	8008cb0 <__swbuf_r>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	1c58      	adds	r0, r3, #1
 8008a52:	6010      	str	r0, [r2, #0]
 8008a54:	7019      	strb	r1, [r3, #0]
 8008a56:	4608      	mov	r0, r1
 8008a58:	bc10      	pop	{r4}
 8008a5a:	4770      	bx	lr

08008a5c <__sfputs_r>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460f      	mov	r7, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	18d5      	adds	r5, r2, r3
 8008a66:	42ac      	cmp	r4, r5
 8008a68:	d101      	bne.n	8008a6e <__sfputs_r+0x12>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	e007      	b.n	8008a7e <__sfputs_r+0x22>
 8008a6e:	463a      	mov	r2, r7
 8008a70:	4630      	mov	r0, r6
 8008a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a76:	f7ff ffdc 	bl	8008a32 <__sfputc_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d1f3      	bne.n	8008a66 <__sfputs_r+0xa>
 8008a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a80 <_vfiprintf_r>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	460d      	mov	r5, r1
 8008a86:	4614      	mov	r4, r2
 8008a88:	4698      	mov	r8, r3
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	b09d      	sub	sp, #116	@ 0x74
 8008a8e:	b118      	cbz	r0, 8008a98 <_vfiprintf_r+0x18>
 8008a90:	6a03      	ldr	r3, [r0, #32]
 8008a92:	b90b      	cbnz	r3, 8008a98 <_vfiprintf_r+0x18>
 8008a94:	f7fe f8f6 	bl	8006c84 <__sinit>
 8008a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a9a:	07d9      	lsls	r1, r3, #31
 8008a9c:	d405      	bmi.n	8008aaa <_vfiprintf_r+0x2a>
 8008a9e:	89ab      	ldrh	r3, [r5, #12]
 8008aa0:	059a      	lsls	r2, r3, #22
 8008aa2:	d402      	bmi.n	8008aaa <_vfiprintf_r+0x2a>
 8008aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aa6:	f7fe fa06 	bl	8006eb6 <__retarget_lock_acquire_recursive>
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	071b      	lsls	r3, r3, #28
 8008aae:	d501      	bpl.n	8008ab4 <_vfiprintf_r+0x34>
 8008ab0:	692b      	ldr	r3, [r5, #16]
 8008ab2:	b99b      	cbnz	r3, 8008adc <_vfiprintf_r+0x5c>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 f938 	bl	8008d2c <__swsetup_r>
 8008abc:	b170      	cbz	r0, 8008adc <_vfiprintf_r+0x5c>
 8008abe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ac0:	07dc      	lsls	r4, r3, #31
 8008ac2:	d504      	bpl.n	8008ace <_vfiprintf_r+0x4e>
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	b01d      	add	sp, #116	@ 0x74
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	89ab      	ldrh	r3, [r5, #12]
 8008ad0:	0598      	lsls	r0, r3, #22
 8008ad2:	d4f7      	bmi.n	8008ac4 <_vfiprintf_r+0x44>
 8008ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ad6:	f7fe f9ef 	bl	8006eb8 <__retarget_lock_release_recursive>
 8008ada:	e7f3      	b.n	8008ac4 <_vfiprintf_r+0x44>
 8008adc:	2300      	movs	r3, #0
 8008ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ae6:	2330      	movs	r3, #48	@ 0x30
 8008ae8:	f04f 0901 	mov.w	r9, #1
 8008aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008c9c <_vfiprintf_r+0x21c>
 8008af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008af8:	4623      	mov	r3, r4
 8008afa:	469a      	mov	sl, r3
 8008afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b00:	b10a      	cbz	r2, 8008b06 <_vfiprintf_r+0x86>
 8008b02:	2a25      	cmp	r2, #37	@ 0x25
 8008b04:	d1f9      	bne.n	8008afa <_vfiprintf_r+0x7a>
 8008b06:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0a:	d00b      	beq.n	8008b24 <_vfiprintf_r+0xa4>
 8008b0c:	465b      	mov	r3, fp
 8008b0e:	4622      	mov	r2, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff ffa2 	bl	8008a5c <__sfputs_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f000 80a7 	beq.w	8008c6c <_vfiprintf_r+0x1ec>
 8008b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b20:	445a      	add	r2, fp
 8008b22:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b24:	f89a 3000 	ldrb.w	r3, [sl]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 809f 	beq.w	8008c6c <_vfiprintf_r+0x1ec>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b38:	f10a 0a01 	add.w	sl, sl, #1
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b44:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b46:	4654      	mov	r4, sl
 8008b48:	2205      	movs	r2, #5
 8008b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4e:	4853      	ldr	r0, [pc, #332]	@ (8008c9c <_vfiprintf_r+0x21c>)
 8008b50:	f7fe f9b3 	bl	8006eba <memchr>
 8008b54:	9a04      	ldr	r2, [sp, #16]
 8008b56:	b9d8      	cbnz	r0, 8008b90 <_vfiprintf_r+0x110>
 8008b58:	06d1      	lsls	r1, r2, #27
 8008b5a:	bf44      	itt	mi
 8008b5c:	2320      	movmi	r3, #32
 8008b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b62:	0713      	lsls	r3, r2, #28
 8008b64:	bf44      	itt	mi
 8008b66:	232b      	movmi	r3, #43	@ 0x2b
 8008b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b72:	d015      	beq.n	8008ba0 <_vfiprintf_r+0x120>
 8008b74:	4654      	mov	r4, sl
 8008b76:	2000      	movs	r0, #0
 8008b78:	f04f 0c0a 	mov.w	ip, #10
 8008b7c:	9a07      	ldr	r2, [sp, #28]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b84:	3b30      	subs	r3, #48	@ 0x30
 8008b86:	2b09      	cmp	r3, #9
 8008b88:	d94b      	bls.n	8008c22 <_vfiprintf_r+0x1a2>
 8008b8a:	b1b0      	cbz	r0, 8008bba <_vfiprintf_r+0x13a>
 8008b8c:	9207      	str	r2, [sp, #28]
 8008b8e:	e014      	b.n	8008bba <_vfiprintf_r+0x13a>
 8008b90:	eba0 0308 	sub.w	r3, r0, r8
 8008b94:	fa09 f303 	lsl.w	r3, r9, r3
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	46a2      	mov	sl, r4
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	e7d2      	b.n	8008b46 <_vfiprintf_r+0xc6>
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	1d19      	adds	r1, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	9103      	str	r1, [sp, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bfbb      	ittet	lt
 8008bac:	425b      	neglt	r3, r3
 8008bae:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb2:	9307      	strge	r3, [sp, #28]
 8008bb4:	9307      	strlt	r3, [sp, #28]
 8008bb6:	bfb8      	it	lt
 8008bb8:	9204      	strlt	r2, [sp, #16]
 8008bba:	7823      	ldrb	r3, [r4, #0]
 8008bbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bbe:	d10a      	bne.n	8008bd6 <_vfiprintf_r+0x156>
 8008bc0:	7863      	ldrb	r3, [r4, #1]
 8008bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bc4:	d132      	bne.n	8008c2c <_vfiprintf_r+0x1ac>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	3402      	adds	r4, #2
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	9203      	str	r2, [sp, #12]
 8008bd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd4:	9305      	str	r3, [sp, #20]
 8008bd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008ca0 <_vfiprintf_r+0x220>
 8008bda:	2203      	movs	r2, #3
 8008bdc:	4650      	mov	r0, sl
 8008bde:	7821      	ldrb	r1, [r4, #0]
 8008be0:	f7fe f96b 	bl	8006eba <memchr>
 8008be4:	b138      	cbz	r0, 8008bf6 <_vfiprintf_r+0x176>
 8008be6:	2240      	movs	r2, #64	@ 0x40
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	eba0 000a 	sub.w	r0, r0, sl
 8008bee:	4082      	lsls	r2, r0
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	3401      	adds	r4, #1
 8008bf4:	9304      	str	r3, [sp, #16]
 8008bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfa:	2206      	movs	r2, #6
 8008bfc:	4829      	ldr	r0, [pc, #164]	@ (8008ca4 <_vfiprintf_r+0x224>)
 8008bfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c02:	f7fe f95a 	bl	8006eba <memchr>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d03f      	beq.n	8008c8a <_vfiprintf_r+0x20a>
 8008c0a:	4b27      	ldr	r3, [pc, #156]	@ (8008ca8 <_vfiprintf_r+0x228>)
 8008c0c:	bb1b      	cbnz	r3, 8008c56 <_vfiprintf_r+0x1d6>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	3307      	adds	r3, #7
 8008c12:	f023 0307 	bic.w	r3, r3, #7
 8008c16:	3308      	adds	r3, #8
 8008c18:	9303      	str	r3, [sp, #12]
 8008c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1c:	443b      	add	r3, r7
 8008c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c20:	e76a      	b.n	8008af8 <_vfiprintf_r+0x78>
 8008c22:	460c      	mov	r4, r1
 8008c24:	2001      	movs	r0, #1
 8008c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2a:	e7a8      	b.n	8008b7e <_vfiprintf_r+0xfe>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f04f 0c0a 	mov.w	ip, #10
 8008c32:	4619      	mov	r1, r3
 8008c34:	3401      	adds	r4, #1
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c3e:	3a30      	subs	r2, #48	@ 0x30
 8008c40:	2a09      	cmp	r2, #9
 8008c42:	d903      	bls.n	8008c4c <_vfiprintf_r+0x1cc>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0c6      	beq.n	8008bd6 <_vfiprintf_r+0x156>
 8008c48:	9105      	str	r1, [sp, #20]
 8008c4a:	e7c4      	b.n	8008bd6 <_vfiprintf_r+0x156>
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	2301      	movs	r3, #1
 8008c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c54:	e7f0      	b.n	8008c38 <_vfiprintf_r+0x1b8>
 8008c56:	ab03      	add	r3, sp, #12
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <_vfiprintf_r+0x22c>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	f7fd fbc7 	bl	80063f4 <_printf_float>
 8008c66:	4607      	mov	r7, r0
 8008c68:	1c78      	adds	r0, r7, #1
 8008c6a:	d1d6      	bne.n	8008c1a <_vfiprintf_r+0x19a>
 8008c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	d405      	bmi.n	8008c7e <_vfiprintf_r+0x1fe>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	059a      	lsls	r2, r3, #22
 8008c76:	d402      	bmi.n	8008c7e <_vfiprintf_r+0x1fe>
 8008c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c7a:	f7fe f91d 	bl	8006eb8 <__retarget_lock_release_recursive>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	065b      	lsls	r3, r3, #25
 8008c82:	f53f af1f 	bmi.w	8008ac4 <_vfiprintf_r+0x44>
 8008c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c88:	e71e      	b.n	8008ac8 <_vfiprintf_r+0x48>
 8008c8a:	ab03      	add	r3, sp, #12
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	462a      	mov	r2, r5
 8008c90:	4630      	mov	r0, r6
 8008c92:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <_vfiprintf_r+0x22c>)
 8008c94:	a904      	add	r1, sp, #16
 8008c96:	f7fd fe4b 	bl	8006930 <_printf_i>
 8008c9a:	e7e4      	b.n	8008c66 <_vfiprintf_r+0x1e6>
 8008c9c:	08009898 	.word	0x08009898
 8008ca0:	0800989e 	.word	0x0800989e
 8008ca4:	080098a2 	.word	0x080098a2
 8008ca8:	080063f5 	.word	0x080063f5
 8008cac:	08008a5d 	.word	0x08008a5d

08008cb0 <__swbuf_r>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	460e      	mov	r6, r1
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	b118      	cbz	r0, 8008cc2 <__swbuf_r+0x12>
 8008cba:	6a03      	ldr	r3, [r0, #32]
 8008cbc:	b90b      	cbnz	r3, 8008cc2 <__swbuf_r+0x12>
 8008cbe:	f7fd ffe1 	bl	8006c84 <__sinit>
 8008cc2:	69a3      	ldr	r3, [r4, #24]
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	071a      	lsls	r2, r3, #28
 8008cca:	d501      	bpl.n	8008cd0 <__swbuf_r+0x20>
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	b943      	cbnz	r3, 8008ce2 <__swbuf_r+0x32>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 f82a 	bl	8008d2c <__swsetup_r>
 8008cd8:	b118      	cbz	r0, 8008ce2 <__swbuf_r+0x32>
 8008cda:	f04f 37ff 	mov.w	r7, #4294967295
 8008cde:	4638      	mov	r0, r7
 8008ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	6922      	ldr	r2, [r4, #16]
 8008ce6:	b2f6      	uxtb	r6, r6
 8008ce8:	1a98      	subs	r0, r3, r2
 8008cea:	6963      	ldr	r3, [r4, #20]
 8008cec:	4637      	mov	r7, r6
 8008cee:	4283      	cmp	r3, r0
 8008cf0:	dc05      	bgt.n	8008cfe <__swbuf_r+0x4e>
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7ff fd9b 	bl	8008830 <_fflush_r>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d1ed      	bne.n	8008cda <__swbuf_r+0x2a>
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	6022      	str	r2, [r4, #0]
 8008d0a:	701e      	strb	r6, [r3, #0]
 8008d0c:	6962      	ldr	r2, [r4, #20]
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d004      	beq.n	8008d1e <__swbuf_r+0x6e>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	07db      	lsls	r3, r3, #31
 8008d18:	d5e1      	bpl.n	8008cde <__swbuf_r+0x2e>
 8008d1a:	2e0a      	cmp	r6, #10
 8008d1c:	d1df      	bne.n	8008cde <__swbuf_r+0x2e>
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f7ff fd85 	bl	8008830 <_fflush_r>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0d9      	beq.n	8008cde <__swbuf_r+0x2e>
 8008d2a:	e7d6      	b.n	8008cda <__swbuf_r+0x2a>

08008d2c <__swsetup_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4b29      	ldr	r3, [pc, #164]	@ (8008dd4 <__swsetup_r+0xa8>)
 8008d30:	4605      	mov	r5, r0
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	460c      	mov	r4, r1
 8008d36:	b118      	cbz	r0, 8008d40 <__swsetup_r+0x14>
 8008d38:	6a03      	ldr	r3, [r0, #32]
 8008d3a:	b90b      	cbnz	r3, 8008d40 <__swsetup_r+0x14>
 8008d3c:	f7fd ffa2 	bl	8006c84 <__sinit>
 8008d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d44:	0719      	lsls	r1, r3, #28
 8008d46:	d422      	bmi.n	8008d8e <__swsetup_r+0x62>
 8008d48:	06da      	lsls	r2, r3, #27
 8008d4a:	d407      	bmi.n	8008d5c <__swsetup_r+0x30>
 8008d4c:	2209      	movs	r2, #9
 8008d4e:	602a      	str	r2, [r5, #0]
 8008d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	e033      	b.n	8008dc4 <__swsetup_r+0x98>
 8008d5c:	0758      	lsls	r0, r3, #29
 8008d5e:	d512      	bpl.n	8008d86 <__swsetup_r+0x5a>
 8008d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d62:	b141      	cbz	r1, 8008d76 <__swsetup_r+0x4a>
 8008d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d68:	4299      	cmp	r1, r3
 8008d6a:	d002      	beq.n	8008d72 <__swsetup_r+0x46>
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f7fe ff0f 	bl	8007b90 <_free_r>
 8008d72:	2300      	movs	r3, #0
 8008d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	6063      	str	r3, [r4, #4]
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	f043 0308 	orr.w	r3, r3, #8
 8008d8c:	81a3      	strh	r3, [r4, #12]
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	b94b      	cbnz	r3, 8008da6 <__swsetup_r+0x7a>
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d9c:	d003      	beq.n	8008da6 <__swsetup_r+0x7a>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f000 f882 	bl	8008eaa <__smakebuf_r>
 8008da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008daa:	f013 0201 	ands.w	r2, r3, #1
 8008dae:	d00a      	beq.n	8008dc6 <__swsetup_r+0x9a>
 8008db0:	2200      	movs	r2, #0
 8008db2:	60a2      	str	r2, [r4, #8]
 8008db4:	6962      	ldr	r2, [r4, #20]
 8008db6:	4252      	negs	r2, r2
 8008db8:	61a2      	str	r2, [r4, #24]
 8008dba:	6922      	ldr	r2, [r4, #16]
 8008dbc:	b942      	cbnz	r2, 8008dd0 <__swsetup_r+0xa4>
 8008dbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008dc2:	d1c5      	bne.n	8008d50 <__swsetup_r+0x24>
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	0799      	lsls	r1, r3, #30
 8008dc8:	bf58      	it	pl
 8008dca:	6962      	ldrpl	r2, [r4, #20]
 8008dcc:	60a2      	str	r2, [r4, #8]
 8008dce:	e7f4      	b.n	8008dba <__swsetup_r+0x8e>
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e7f7      	b.n	8008dc4 <__swsetup_r+0x98>
 8008dd4:	20000050 	.word	0x20000050

08008dd8 <_raise_r>:
 8008dd8:	291f      	cmp	r1, #31
 8008dda:	b538      	push	{r3, r4, r5, lr}
 8008ddc:	4605      	mov	r5, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	d904      	bls.n	8008dec <_raise_r+0x14>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008dee:	b112      	cbz	r2, 8008df6 <_raise_r+0x1e>
 8008df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008df4:	b94b      	cbnz	r3, 8008e0a <_raise_r+0x32>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f830 	bl	8008e5c <_getpid_r>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e06:	f000 b817 	b.w	8008e38 <_kill_r>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d00a      	beq.n	8008e24 <_raise_r+0x4c>
 8008e0e:	1c59      	adds	r1, r3, #1
 8008e10:	d103      	bne.n	8008e1a <_raise_r+0x42>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7e7      	b.n	8008dea <_raise_r+0x12>
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e22:	4798      	blx	r3
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7e0      	b.n	8008dea <_raise_r+0x12>

08008e28 <raise>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	@ (8008e34 <raise+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f7ff bfd3 	b.w	8008dd8 <_raise_r>
 8008e32:	bf00      	nop
 8008e34:	20000050 	.word	0x20000050

08008e38 <_kill_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4d06      	ldr	r5, [pc, #24]	@ (8008e58 <_kill_r+0x20>)
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	f7f9 fb1e 	bl	8002486 <_kill>
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d102      	bne.n	8008e54 <_kill_r+0x1c>
 8008e4e:	682b      	ldr	r3, [r5, #0]
 8008e50:	b103      	cbz	r3, 8008e54 <_kill_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	bf00      	nop
 8008e58:	2000093c 	.word	0x2000093c

08008e5c <_getpid_r>:
 8008e5c:	f7f9 bb0c 	b.w	8002478 <_getpid>

08008e60 <__swhatbuf_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460c      	mov	r4, r1
 8008e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e68:	4615      	mov	r5, r2
 8008e6a:	2900      	cmp	r1, #0
 8008e6c:	461e      	mov	r6, r3
 8008e6e:	b096      	sub	sp, #88	@ 0x58
 8008e70:	da0c      	bge.n	8008e8c <__swhatbuf_r+0x2c>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	2100      	movs	r1, #0
 8008e76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e7a:	bf14      	ite	ne
 8008e7c:	2340      	movne	r3, #64	@ 0x40
 8008e7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e82:	2000      	movs	r0, #0
 8008e84:	6031      	str	r1, [r6, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	b016      	add	sp, #88	@ 0x58
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	466a      	mov	r2, sp
 8008e8e:	f000 f849 	bl	8008f24 <_fstat_r>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	dbed      	blt.n	8008e72 <__swhatbuf_r+0x12>
 8008e96:	9901      	ldr	r1, [sp, #4]
 8008e98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ea0:	4259      	negs	r1, r3
 8008ea2:	4159      	adcs	r1, r3
 8008ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea8:	e7eb      	b.n	8008e82 <__swhatbuf_r+0x22>

08008eaa <__smakebuf_r>:
 8008eaa:	898b      	ldrh	r3, [r1, #12]
 8008eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eae:	079d      	lsls	r5, r3, #30
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	d507      	bpl.n	8008ec6 <__smakebuf_r+0x1c>
 8008eb6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	6163      	str	r3, [r4, #20]
 8008ec2:	b003      	add	sp, #12
 8008ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	ab01      	add	r3, sp, #4
 8008eca:	f7ff ffc9 	bl	8008e60 <__swhatbuf_r>
 8008ece:	9f00      	ldr	r7, [sp, #0]
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7fe fecd 	bl	8007c74 <_malloc_r>
 8008eda:	b948      	cbnz	r0, 8008ef0 <__smakebuf_r+0x46>
 8008edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ee0:	059a      	lsls	r2, r3, #22
 8008ee2:	d4ee      	bmi.n	8008ec2 <__smakebuf_r+0x18>
 8008ee4:	f023 0303 	bic.w	r3, r3, #3
 8008ee8:	f043 0302 	orr.w	r3, r3, #2
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	e7e2      	b.n	8008eb6 <__smakebuf_r+0xc>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	6020      	str	r0, [r4, #0]
 8008f00:	b15b      	cbz	r3, 8008f1a <__smakebuf_r+0x70>
 8008f02:	4630      	mov	r0, r6
 8008f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f08:	f000 f81e 	bl	8008f48 <_isatty_r>
 8008f0c:	b128      	cbz	r0, 8008f1a <__smakebuf_r+0x70>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f023 0303 	bic.w	r3, r3, #3
 8008f14:	f043 0301 	orr.w	r3, r3, #1
 8008f18:	81a3      	strh	r3, [r4, #12]
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	431d      	orrs	r5, r3
 8008f1e:	81a5      	strh	r5, [r4, #12]
 8008f20:	e7cf      	b.n	8008ec2 <__smakebuf_r+0x18>
	...

08008f24 <_fstat_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	2300      	movs	r3, #0
 8008f28:	4d06      	ldr	r5, [pc, #24]	@ (8008f44 <_fstat_r+0x20>)
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	4611      	mov	r1, r2
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	f7f9 faeb 	bl	800250c <_fstat>
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	d102      	bne.n	8008f40 <_fstat_r+0x1c>
 8008f3a:	682b      	ldr	r3, [r5, #0]
 8008f3c:	b103      	cbz	r3, 8008f40 <_fstat_r+0x1c>
 8008f3e:	6023      	str	r3, [r4, #0]
 8008f40:	bd38      	pop	{r3, r4, r5, pc}
 8008f42:	bf00      	nop
 8008f44:	2000093c 	.word	0x2000093c

08008f48 <_isatty_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4d05      	ldr	r5, [pc, #20]	@ (8008f64 <_isatty_r+0x1c>)
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7f9 fae9 	bl	800252a <_isatty>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_isatty_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_isatty_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	2000093c 	.word	0x2000093c

08008f68 <_init>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr

08008f74 <_fini>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	bf00      	nop
 8008f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7a:	bc08      	pop	{r3}
 8008f7c:	469e      	mov	lr, r3
 8008f7e:	4770      	bx	lr
