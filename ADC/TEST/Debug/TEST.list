
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003948  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a9c  08003a9c  0000503c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a9c  08003a9c  0000503c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a9c  08003a9c  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a9c  08003a9c  00004a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003aa0  08003aa0  00004aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08003aa4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000003c  08003ae0  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003ae0  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c750  00000000  00000000  00005065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  000117b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00013448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a35  00000000  00000000  00014148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001810c  00000000  00000000  00014b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e065  00000000  00000000  0002cc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f302  00000000  00000000  0003acee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9ff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003740  00000000  00000000  000ca034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000cd774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a3c 	.word	0x08003a3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003a3c 	.word	0x08003a3c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <prinLedStatus>:
uint16_t pins[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin,
                     LED5_Pin, LED6_Pin, LED7_Pin, LED8_Pin};
//----------------------------------------------------------------------
uint8_t Ledstatus;
void prinLedStatus()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  for (int i = 0; i < 8; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e025      	b.n	80006ac <prinLedStatus+0x58>
  {
	if (Ledstatus & (1 << i))
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <prinLedStatus+0x68>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	fa42 f303 	asr.w	r3, r2, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00c      	beq.n	800068e <prinLedStatus+0x3a>
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <prinLedStatus+0x6c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800067c:	4a11      	ldr	r2, [pc, #68]	@ (80006c4 <prinLedStatus+0x70>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	f001 fd61 	bl	800214e <HAL_GPIO_WritePin>
 800068c:	e00b      	b.n	80006a6 <prinLedStatus+0x52>
	}else
	{
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 800068e:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <prinLedStatus+0x6c>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000696:	4a0b      	ldr	r2, [pc, #44]	@ (80006c4 <prinLedStatus+0x70>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	f001 fd54 	bl	800214e <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	ddd6      	ble.n	8000660 <prinLedStatus+0xc>
	}
  }

}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200001a8 	.word	0x200001a8
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000020 	.word	0x20000020

080006c8 <HandleButtons>:
//-----------------------------------------------------------------------------
void HandleButtons(uint16_t GPIO_Pin)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
    if (Ledstatus == 0)
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <HandleButtons+0x64>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <HandleButtons+0x18>
    {
        Ledstatus = 1;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HandleButtons+0x64>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == BTN1_Pin)
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d10d      	bne.n	8000702 <HandleButtons+0x3a>
    {
        Ledstatus <<= 1;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HandleButtons+0x64>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HandleButtons+0x64>)
 80006f0:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 1;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <HandleButtons+0x64>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d113      	bne.n	8000722 <HandleButtons+0x5a>
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HandleButtons+0x64>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
    else if (GPIO_Pin == BTN2_Pin)
    {
        Ledstatus >>= 1;
        if (Ledstatus == 0) Ledstatus = 0x80;
    }
}
 8000700:	e00f      	b.n	8000722 <HandleButtons+0x5a>
    else if (GPIO_Pin == BTN2_Pin)
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d10c      	bne.n	8000722 <HandleButtons+0x5a>
        Ledstatus >>= 1;
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <HandleButtons+0x64>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HandleButtons+0x64>)
 8000712:	701a      	strb	r2, [r3, #0]
        if (Ledstatus == 0) Ledstatus = 0x80;
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HandleButtons+0x64>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <HandleButtons+0x5a>
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <HandleButtons+0x64>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	200001a8 	.word	0x200001a8

08000730 <HAL_GPIO_EXTI_Callback>:


//--------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t PGIO_Pin)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
	HandleButtons(PGIO_Pin);
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffc3 	bl	80006c8 <HandleButtons>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <handlSlideSwitch>:
//--------------------------------------------------------------------------

void handlSlideSwitch()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 8000752:	2101      	movs	r1, #1
 8000754:	480b      	ldr	r0, [pc, #44]	@ (8000784 <handlSlideSwitch+0x38>)
 8000756:	f001 fce3 	bl	8002120 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d105      	bne.n	8000770 <handlSlideSwitch+0x24>
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <handlSlideSwitch+0x38>)
 800076a:	f001 fcf0 	bl	800214e <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
	}
}
 800076e:	e004      	b.n	800077a <handlSlideSwitch+0x2e>
		HAL_GPIO_WritePin(LEDR_GPIO_Port,LEDR_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2110      	movs	r1, #16
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <handlSlideSwitch+0x38>)
 8000776:	f001 fcea 	bl	800214e <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40011000 	.word	0x40011000

08000788 <Buzzer_SetDuty>:
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, g); // Зелёный
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, b); // Синий
}
//---------------------------------------------------------------------------

void Buzzer_SetDuty(uint16_t duty) {
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
    if (duty > htim2.Init.Period) duty = htim2.Init.Period;
 8000792:	88fa      	ldrh	r2, [r7, #6]
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <Buzzer_SetDuty+0x2c>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d902      	bls.n	80007a2 <Buzzer_SetDuty+0x1a>
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <Buzzer_SetDuty+0x2c>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <Buzzer_SetDuty+0x2c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000088 	.word	0x20000088

080007b8 <handlSlideToBuzzer>:


//--------------------------------------------------------------------------
void handlSlideToBuzzer()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	GPIO_PinState btnState = HAL_GPIO_ReadPin(SlideSwitch_GPIO_Port, SlideSwitch_Pin);
 80007be:	2101      	movs	r1, #1
 80007c0:	480e      	ldr	r0, [pc, #56]	@ (80007fc <handlSlideToBuzzer+0x44>)
 80007c2:	f001 fcad 	bl	8002120 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	if (btnState == GPIO_PIN_SET)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10c      	bne.n	80007ea <handlSlideToBuzzer+0x32>
	{
		 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	480b      	ldr	r0, [pc, #44]	@ (8000800 <handlSlideToBuzzer+0x48>)
 80007d4:	f002 fab8 	bl	8002d48 <HAL_TIM_PWM_Start>
		 Buzzer_SetDuty( (htim2.Init.Period + 1) / 2 );
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <handlSlideToBuzzer+0x48>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	085b      	lsrs	r3, r3, #1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffd0 	bl	8000788 <Buzzer_SetDuty>
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	}
}
 80007e8:	e003      	b.n	80007f2 <handlSlideToBuzzer+0x3a>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <handlSlideToBuzzer+0x48>)
 80007ee:	f002 fb4d 	bl	8002e8c <HAL_TIM_PWM_Stop>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40011000 	.word	0x40011000
 8000800:	20000088 	.word	0x20000088

08000804 <UpdateEncoder>:
const uint8_t led_sequence[8] = {1, 3, 7, 15, 31, 63, 127, 255};
uint16_t adc_value = 0;
//-------------------------------------------------------------------------

void UpdateEncoder()
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
	static uint16_t last_cnt = 0;
	    uint16_t curr_cnt = TIM3->CNT;
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <UpdateEncoder+0xbc>)
 800080c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800080e:	80bb      	strh	r3, [r7, #4]
	    int16_t diff = curr_cnt - last_cnt;
 8000810:	4b2c      	ldr	r3, [pc, #176]	@ (80008c4 <UpdateEncoder+0xc0>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	88ba      	ldrh	r2, [r7, #4]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	b29b      	uxth	r3, r3
 800081a:	80fb      	strh	r3, [r7, #6]

	    // Обработка переполнения с ARR = 30
	    if(diff > 15) {
 800081c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	dd04      	ble.n	800082e <UpdateEncoder+0x2a>
	        diff -= 30;
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	3b1e      	subs	r3, #30
 8000828:	b29b      	uxth	r3, r3
 800082a:	80fb      	strh	r3, [r7, #6]
 800082c:	e008      	b.n	8000840 <UpdateEncoder+0x3c>
	    }
	    else if(diff < -15) {
 800082e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000832:	f113 0f0f 	cmn.w	r3, #15
 8000836:	da03      	bge.n	8000840 <UpdateEncoder+0x3c>
	        diff += 30;
 8000838:	88fb      	ldrh	r3, [r7, #6]
 800083a:	331e      	adds	r3, #30
 800083c:	b29b      	uxth	r3, r3
 800083e:	80fb      	strh	r3, [r7, #6]
	    }

	    encoder_value += diff;
 8000840:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000844:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <UpdateEncoder+0xc4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4413      	add	r3, r2
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <UpdateEncoder+0xc4>)
 800084c:	6013      	str	r3, [r2, #0]
	    last_cnt = curr_cnt;
 800084e:	4a1d      	ldr	r2, [pc, #116]	@ (80008c4 <UpdateEncoder+0xc0>)
 8000850:	88bb      	ldrh	r3, [r7, #4]
 8000852:	8013      	strh	r3, [r2, #0]

	    // Изменяем индекс только при значительном изменении положения
	    static int8_t accumulated_diff = 0;
	    accumulated_diff += diff;
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <UpdateEncoder+0xc8>)
 800085a:	f993 3000 	ldrsb.w	r3, [r3]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	b25a      	sxtb	r2, r3
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <UpdateEncoder+0xc8>)
 8000868:	701a      	strb	r2, [r3, #0]

	    if(accumulated_diff >= 4) { // Порог срабатывания +
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <UpdateEncoder+0xc8>)
 800086c:	f993 3000 	ldrsb.w	r3, [r3]
 8000870:	2b03      	cmp	r3, #3
 8000872:	dd0d      	ble.n	8000890 <UpdateEncoder+0x8c>
	        if(active_leds < 7) active_leds++;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <UpdateEncoder+0xcc>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b06      	cmp	r3, #6
 800087a:	d805      	bhi.n	8000888 <UpdateEncoder+0x84>
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <UpdateEncoder+0xcc>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <UpdateEncoder+0xcc>)
 8000886:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <UpdateEncoder+0xc8>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
	        if(active_leds > 0) active_leds--;
	        accumulated_diff = 0;
	    }

}
 800088e:	e012      	b.n	80008b6 <UpdateEncoder+0xb2>
	    else if(accumulated_diff <= -4) { // Порог срабатывания -
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <UpdateEncoder+0xc8>)
 8000892:	f993 3000 	ldrsb.w	r3, [r3]
 8000896:	f113 0f03 	cmn.w	r3, #3
 800089a:	da0c      	bge.n	80008b6 <UpdateEncoder+0xb2>
	        if(active_leds > 0) active_leds--;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <UpdateEncoder+0xcc>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d005      	beq.n	80008b0 <UpdateEncoder+0xac>
 80008a4:	4b0a      	ldr	r3, [pc, #40]	@ (80008d0 <UpdateEncoder+0xcc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <UpdateEncoder+0xcc>)
 80008ae:	701a      	strb	r2, [r3, #0]
	        accumulated_diff = 0;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <UpdateEncoder+0xc8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40000400 	.word	0x40000400
 80008c4:	200001b4 	.word	0x200001b4
 80008c8:	200001ac 	.word	0x200001ac
 80008cc:	200001b6 	.word	0x200001b6
 80008d0:	200001b0 	.word	0x200001b0

080008d4 <HandlAdctoLed>:


//-------------------------------------------------------------------------

int HandlAdctoLed(float value)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	int index = (int)(value / 0.5f); // шаг 0.5 В
 80008dc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fdf5 	bl	80004d0 <__aeabi_fdiv>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe8d 	bl	8000608 <__aeabi_f2iz>
 80008ee:	4603      	mov	r3, r0
 80008f0:	60fb      	str	r3, [r7, #12]
	if(index > 7) index = 7;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	dd01      	ble.n	80008fc <HandlAdctoLed+0x28>
 80008f8:	2307      	movs	r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]
	return led_sequence[index];
 80008fc:	4a03      	ldr	r2, [pc, #12]	@ (800090c <HandlAdctoLed+0x38>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08003a54 	.word	0x08003a54

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fce3 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f85f 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f000 fa37 	bl	8000d90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000922:	f000 fa0b 	bl	8000d3c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000926:	f000 f8ef 	bl	8000b08 <MX_TIM2_Init>
  MX_TIM4_Init();
 800092a:	f000 f999 	bl	8000c60 <MX_TIM4_Init>
  MX_TIM3_Init();
 800092e:	f000 f943 	bl	8000bb8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000932:	f000 f8ab 	bl	8000a8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000936:	213c      	movs	r1, #60	@ 0x3c
 8000938:	4821      	ldr	r0, [pc, #132]	@ (80009c0 <main+0xb0>)
 800093a:	f002 fbad 	bl	8003098 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800093e:	2100      	movs	r1, #0
 8000940:	4820      	ldr	r0, [pc, #128]	@ (80009c4 <main+0xb4>)
 8000942:	f002 fa01 	bl	8002d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000946:	2104      	movs	r1, #4
 8000948:	481e      	ldr	r0, [pc, #120]	@ (80009c4 <main+0xb4>)
 800094a:	f002 f9fd 	bl	8002d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800094e:	2108      	movs	r1, #8
 8000950:	481c      	ldr	r0, [pc, #112]	@ (80009c4 <main+0xb4>)
 8000952:	f002 f9f9 	bl	8002d48 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000956:	481c      	ldr	r0, [pc, #112]	@ (80009c8 <main+0xb8>)
 8000958:	f000 fdfc 	bl	8001554 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Ledstatus = 0;
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <main+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  UpdateEncoder();
 8000962:	f7ff ff4f 	bl	8000804 <UpdateEncoder>

	  // Управляем светодиодами в зависимости от положения энкодера
	  //Ledstatus = active_leds;
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000966:	f04f 31ff 	mov.w	r1, #4294967295
 800096a:	4817      	ldr	r0, [pc, #92]	@ (80009c8 <main+0xb8>)
 800096c:	f000 fea0 	bl	80016b0 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000970:	4815      	ldr	r0, [pc, #84]	@ (80009c8 <main+0xb8>)
 8000972:	f000 ffa3 	bl	80018bc <HAL_ADC_GetValue>
 8000976:	4603      	mov	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <main+0xc0>)
 800097c:	801a      	strh	r2, [r3, #0]
	  float voltage = (adc_value * 3.3f) / 4095.0f;
 800097e:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <main+0xc0>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fc9c 	bl	80002c0 <__aeabi_i2f>
 8000988:	4603      	mov	r3, r0
 800098a:	4912      	ldr	r1, [pc, #72]	@ (80009d4 <main+0xc4>)
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fceb 	bl	8000368 <__aeabi_fmul>
 8000992:	4603      	mov	r3, r0
 8000994:	4910      	ldr	r1, [pc, #64]	@ (80009d8 <main+0xc8>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fd9a 	bl	80004d0 <__aeabi_fdiv>
 800099c:	4603      	mov	r3, r0
 800099e:	607b      	str	r3, [r7, #4]
	  Ledstatus = HandlAdctoLed(voltage);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff97 	bl	80008d4 <HandlAdctoLed>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <main+0xbc>)
 80009ac:	701a      	strb	r2, [r3, #0]
	  prinLedStatus();
 80009ae:	f7ff fe51 	bl	8000654 <prinLedStatus>
	  handlSlideSwitch();
 80009b2:	f7ff fecb 	bl	800074c <handlSlideSwitch>


	  handlSlideToBuzzer();
 80009b6:	f7ff feff 	bl	80007b8 <handlSlideToBuzzer>
  {
 80009ba:	bf00      	nop
 80009bc:	e7d1      	b.n	8000962 <main+0x52>
 80009be:	bf00      	nop
 80009c0:	200000d0 	.word	0x200000d0
 80009c4:	20000118 	.word	0x20000118
 80009c8:	20000058 	.word	0x20000058
 80009cc:	200001a8 	.word	0x200001a8
 80009d0:	200001b2 	.word	0x200001b2
 80009d4:	40533333 	.word	0x40533333
 80009d8:	457ff000 	.word	0x457ff000

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	@ 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	2228      	movs	r2, #40	@ 0x28
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fffa 	bl	80039e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	2301      	movs	r3, #1
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a14:	2310      	movs	r3, #16
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a20:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fbc0 	bl	80021b0 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a36:	f000 fa43 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2102      	movs	r1, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fe2c 	bl	80026b4 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a62:	f000 fa2d 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a66:	2302      	movs	r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000a6a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 ffac 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a7e:	f000 fa1f 	bl	8000ec0 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	@ 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000a9e:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <MX_ADC1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000ab6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000aba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abc:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000aca:	f000 fc6b 	bl	80013a4 <HAL_ADC_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 f9f4 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_ADC1_Init+0x74>)
 8000aea:	f000 fef3 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000af4:	f000 f9e4 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000058 	.word	0x20000058
 8000b04:	40012400 	.word	0x40012400

08000b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b34:	223f      	movs	r2, #63	@ 0x3f
 8000b36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b40:	22f9      	movs	r2, #249	@ 0xf9
 8000b42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b50:	4818      	ldr	r0, [pc, #96]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b52:	f002 f8a9 	bl	8002ca8 <HAL_TIM_PWM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f9b0 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b70:	f002 fdfc 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000b7a:	f000 f9a1 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7e:	2360      	movs	r3, #96	@ 0x60
 8000b80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4807      	ldr	r0, [pc, #28]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000b96:	f002 fb0d 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ba0:	f000 f98e 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ba4:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <MX_TIM2_Init+0xac>)
 8000ba6:	f000 fa81 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000088 	.word	0x20000088

08000bb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	@ 0x30
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	2224      	movs	r2, #36	@ 0x24
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 ff0c 	bl	80039e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000bd6:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <MX_TIM3_Init+0xa4>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000be8:	221e      	movs	r2, #30
 8000bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000c24:	f002 f996 	bl	8002f54 <HAL_TIM_Encoder_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c2e:	f000 f947 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <MX_TIM3_Init+0xa0>)
 8000c40:	f002 fd94 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c4a:	f000 f939 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	@ 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000d0 	.word	0x200000d0
 8000c5c:	40000400 	.word	0x40000400

08000c60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000c84:	4a2c      	ldr	r2, [pc, #176]	@ (8000d38 <MX_TIM4_Init+0xd8>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000c8a:	223f      	movs	r2, #63	@ 0x3f
 8000c8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000c96:	22ff      	movs	r2, #255	@ 0xff
 8000c98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ca6:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000ca8:	f001 fffe 	bl	8002ca8 <HAL_TIM_PWM_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000cb2:	f000 f905 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481b      	ldr	r0, [pc, #108]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000cc6:	f002 fd51 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000cd0:	f000 f8f6 	bl	8000ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd4:	2360      	movs	r3, #96	@ 0x60
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4812      	ldr	r0, [pc, #72]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000cec:	f002 fa62 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cf6:	f000 f8e3 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000d02:	f002 fa57 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d0c:	f000 f8d8 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2208      	movs	r2, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000d18:	f002 fa4c 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8000d22:	f000 f8cd 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <MX_TIM4_Init+0xd4>)
 8000d28:	f000 f9c0 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	@ 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000118 	.word	0x20000118
 8000d38:	40000800 	.word	0x40000800

08000d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_USART1_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d74:	f002 fd58 	bl	8003828 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f89f 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000160 	.word	0x20000160
 8000d8c:	40013800 	.word	0x40013800

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	4b42      	ldr	r3, [pc, #264]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a41      	ldr	r2, [pc, #260]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0310 	and.w	r3, r3, #16
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b39      	ldr	r3, [pc, #228]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b36      	ldr	r3, [pc, #216]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a35      	ldr	r2, [pc, #212]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <MX_GPIO_Init+0x120>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8000df2:	4830      	ldr	r0, [pc, #192]	@ (8000eb4 <MX_GPIO_Init+0x124>)
 8000df4:	f001 f9ab 	bl	800214e <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	482e      	ldr	r0, [pc, #184]	@ (8000eb8 <MX_GPIO_Init+0x128>)
 8000dfe:	f001 f9a6 	bl	800214e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SlideSwitch_Pin */
  GPIO_InitStruct.Pin = SlideSwitch_Pin;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SlideSwitch_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	4828      	ldr	r0, [pc, #160]	@ (8000eb8 <MX_GPIO_Init+0x128>)
 8000e16:	f000 ffff 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_GPIO_Init+0x12c>)
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4822      	ldr	r0, [pc, #136]	@ (8000eb8 <MX_GPIO_Init+0x128>)
 8000e2e:	f000 fff3 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000e32:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8000e36:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481a      	ldr	r0, [pc, #104]	@ (8000eb4 <MX_GPIO_Init+0x124>)
 8000e4c:	f000 ffe4 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDR_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin;
 8000e50:	2310      	movs	r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDR_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <MX_GPIO_Init+0x128>)
 8000e68:	f000 ffd6 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_GPIO_Init+0x12c>)
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_GPIO_Init+0x128>)
 8000e82:	f000 ffc9 	bl	8001e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2007      	movs	r0, #7
 8000e8c:	f000 ff8d 	bl	8001daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e90:	2007      	movs	r0, #7
 8000e92:	f000 ffa6 	bl	8001de2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2008      	movs	r0, #8
 8000e9c:	f000 ff85 	bl	8001daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ea0:	2008      	movs	r0, #8
 8000ea2:	f000 ff9e 	bl	8001de2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	10110000 	.word	0x10110000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <Error_Handler+0x8>

08000ecc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_MspInit+0x5c>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <HAL_MspInit+0x5c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_MspInit+0x5c>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <HAL_MspInit+0x5c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_MspInit+0x60>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <HAL_MspInit+0x60>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000

08000f30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <HAL_ADC_MspInit+0x6c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d121      	bne.n	8000f94 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_ADC_MspInit+0x70>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <HAL_ADC_MspInit+0x70>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_ADC_MspInit+0x70>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_ADC_MspInit+0x70>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_ADC_MspInit+0x70>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_ADC_MspInit+0x70>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f80:	2301      	movs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	2303      	movs	r3, #3
 8000f86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <HAL_ADC_MspInit+0x74>)
 8000f90:	f000 ff42 	bl	8001e18 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012400 	.word	0x40012400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_TIM_PWM_MspInit+0x58>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a10      	ldr	r2, [pc, #64]	@ (8001000 <HAL_TIM_PWM_MspInit+0x58>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_TIM_PWM_MspInit+0x58>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fd2:	e010      	b.n	8000ff6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_TIM_PWM_MspInit+0x5c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_TIM_PWM_MspInit+0x58>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <HAL_TIM_PWM_MspInit+0x58>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <HAL_TIM_PWM_MspInit+0x58>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40000800 	.word	0x40000800

08001008 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	@ 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <HAL_TIM_Encoder_MspInit+0x94>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d135      	bne.n	8001094 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001028:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x98>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x98>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	61d3      	str	r3, [r2, #28]
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <HAL_TIM_Encoder_MspInit+0x98>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 8001058:	2330      	movs	r3, #48	@ 0x30
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800106c:	f000 fed4 	bl	8001e18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001092:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	@ 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40000400 	.word	0x40000400
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40010000 	.word	0x40010000

080010ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ca:	d12b      	bne.n	8001124 <HAL_TIM_MspPostInit+0x78>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <HAL_TIM_MspPostInit+0xbc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a25      	ldr	r2, [pc, #148]	@ (8001168 <HAL_TIM_MspPostInit+0xbc>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <HAL_TIM_MspPostInit+0xbc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	481c      	ldr	r0, [pc, #112]	@ (800116c <HAL_TIM_MspPostInit+0xc0>)
 80010fa:	f000 fe8d 	bl	8001e18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <HAL_TIM_MspPostInit+0xc4>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_TIM_MspPostInit+0xc4>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001122:	e01d      	b.n	8001160 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM4)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <HAL_TIM_MspPostInit+0xc8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d118      	bne.n	8001160 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_TIM_MspPostInit+0xbc>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <HAL_TIM_MspPostInit+0xbc>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_TIM_MspPostInit+0xbc>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001146:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <HAL_TIM_MspPostInit+0xcc>)
 800115c:	f000 fe5c 	bl	8001e18 <HAL_GPIO_Init>
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010000 	.word	0x40010000
 8001174:	40000800 	.word	0x40000800
 8001178:	40010c00 	.word	0x40010c00

0800117c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	@ (8001208 <HAL_UART_MspInit+0x8c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d131      	bne.n	8001200 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <HAL_UART_MspInit+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	@ (800120c <HAL_UART_MspInit+0x90>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_UART_MspInit+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_UART_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <HAL_UART_MspInit+0x90>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_UART_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <HAL_UART_MspInit+0x94>)
 80011e2:	f000 fe19 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_UART_MspInit+0x94>)
 80011fc:	f000 fe0c 	bl	8001e18 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <NMI_Handler+0x4>

0800121c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <MemManage_Handler+0x4>

0800122c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <UsageFault_Handler+0x4>

0800123c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f882 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001270:	2002      	movs	r0, #2
 8001272:	f000 ff85 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 800127e:	2004      	movs	r0, #4
 8001280:	f000 ff7e 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff fff8 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800129a:	490c      	ldr	r1, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b0:	4c09      	ldr	r4, [pc, #36]	@ (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f002 fb99 	bl	80039f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff fb25 	bl	8000910 <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80012d0:	08003aa4 	.word	0x08003aa4
  ldr r2, =_sbss
 80012d4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80012d8:	200001bc 	.word	0x200001bc

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <HAL_Init+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_Init+0x28>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 fd4f 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	200f      	movs	r0, #15
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fde6 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fd67 	bl	8001dfe <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 fd2f 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000030 	.word	0x20000030
 8001364:	20000038 	.word	0x20000038
 8001368:	20000034 	.word	0x20000034

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_IncTick+0x1c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_IncTick+0x20>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <HAL_IncTick+0x20>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000038 	.word	0x20000038
 800138c:	200001b8 	.word	0x200001b8

08001390 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	@ (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	200001b8 	.word	0x200001b8

080013a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0be      	b.n	8001544 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fda4 	bl	8000f30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fbc5 	bl	8001b78 <ADC_ConversionStop_Disable>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 8099 	bne.w	8001532 <HAL_ADC_Init+0x18e>
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 8095 	bne.w	8001532 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001410:	f023 0302 	bic.w	r3, r3, #2
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001424:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b1b      	ldrb	r3, [r3, #12]
 800142a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800142c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800143c:	d003      	beq.n	8001446 <HAL_ADC_Init+0xa2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <HAL_ADC_Init+0xa8>
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144a:	e000      	b.n	800144e <HAL_ADC_Init+0xaa>
 800144c:	2300      	movs	r3, #0
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d119      	bne.n	8001490 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7b1b      	ldrb	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	3b01      	subs	r3, #1
 800146a:	035a      	lsls	r2, r3, #13
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e00b      	b.n	8001490 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f043 0220 	orr.w	r2, r3, #32
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <HAL_ADC_Init+0x1a8>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_Init+0x126>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d104      	bne.n	80014d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	051b      	lsls	r3, r3, #20
 80014d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_ADC_Init+0x1ac>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800150e:	e018      	b.n	8001542 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	f023 0312 	bic.w	r3, r3, #18
 8001518:	f043 0210 	orr.w	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001530:	e007      	b.n	8001542 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001542:	7dfb      	ldrb	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	ffe1f7fd 	.word	0xffe1f7fd
 8001550:	ff1f0efe 	.word	0xff1f0efe

08001554 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_ADC_Start+0x1a>
 800156a:	2302      	movs	r3, #2
 800156c:	e098      	b.n	80016a0 <HAL_ADC_Start+0x14c>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 faa4 	bl	8001ac4 <ADC_Enable>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8087 	bne.w	8001696 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a41      	ldr	r2, [pc, #260]	@ (80016a8 <HAL_ADC_Start+0x154>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d105      	bne.n	80015b2 <HAL_ADC_Start+0x5e>
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <HAL_ADC_Start+0x158>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d115      	bne.n	80015de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d026      	beq.n	800161a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015dc:	e01d      	b.n	800161a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <HAL_ADC_Start+0x158>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d004      	beq.n	80015fe <HAL_ADC_Start+0xaa>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2b      	ldr	r2, [pc, #172]	@ (80016a8 <HAL_ADC_Start+0x154>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d10d      	bne.n	800161a <HAL_ADC_Start+0xc6>
 80015fe:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <HAL_ADC_Start+0x158>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001612:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	f023 0206 	bic.w	r2, r3, #6
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001632:	e002      	b.n	800163a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f06f 0202 	mvn.w	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001656:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800165a:	d113      	bne.n	8001684 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001660:	4a11      	ldr	r2, [pc, #68]	@ (80016a8 <HAL_ADC_Start+0x154>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d105      	bne.n	8001672 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_ADC_Start+0x158>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d108      	bne.n	8001684 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	e00c      	b.n	800169e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e003      	b.n	800169e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40012800 	.word	0x40012800
 80016ac:	40012400 	.word	0x40012400

080016b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016c6:	f7ff fe63 	bl	8001390 <HAL_GetTick>
 80016ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	f043 0220 	orr.w	r2, r3, #32
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0d3      	b.n	800189a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d131      	bne.n	8001764 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001706:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	d12a      	bne.n	8001764 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800170e:	e021      	b.n	8001754 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001716:	d01d      	beq.n	8001754 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_ADC_PollForConversion+0x7e>
 800171e:	f7ff fe37 	bl	8001390 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d212      	bcs.n	8001754 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0a2      	b.n	800189a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0d6      	beq.n	8001710 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001762:	e070      	b.n	8001846 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001764:	4b4f      	ldr	r3, [pc, #316]	@ (80018a4 <HAL_ADC_PollForConversion+0x1f4>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	2002      	movs	r0, #2
 800176a:	f001 f9e7 	bl	8002b3c <HAL_RCCEx_GetPeriphCLKFreq>
 800176e:	4603      	mov	r3, r0
 8001770:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6919      	ldr	r1, [r3, #16]
 800177a:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <HAL_ADC_PollForConversion+0x1f8>)
 800177c:	400b      	ands	r3, r1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x104>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68d9      	ldr	r1, [r3, #12]
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <HAL_ADC_PollForConversion+0x1fc>)
 800178a:	400b      	ands	r3, r1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x104>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	4b46      	ldr	r3, [pc, #280]	@ (80018b0 <HAL_ADC_PollForConversion+0x200>)
 8001798:	400b      	ands	r3, r1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x100>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68d9      	ldr	r1, [r3, #12]
 80017a4:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <HAL_ADC_PollForConversion+0x204>)
 80017a6:	400b      	ands	r3, r1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_PollForConversion+0x100>
 80017ac:	2314      	movs	r3, #20
 80017ae:	e020      	b.n	80017f2 <HAL_ADC_PollForConversion+0x142>
 80017b0:	2329      	movs	r3, #41	@ 0x29
 80017b2:	e01e      	b.n	80017f2 <HAL_ADC_PollForConversion+0x142>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6919      	ldr	r1, [r3, #16]
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_ADC_PollForConversion+0x200>)
 80017bc:	400b      	ands	r3, r1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <HAL_ADC_PollForConversion+0x120>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68d9      	ldr	r1, [r3, #12]
 80017c8:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <HAL_ADC_PollForConversion+0x204>)
 80017ca:	400b      	ands	r3, r1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <HAL_ADC_PollForConversion+0x13c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_ADC_PollForConversion+0x208>)
 80017d8:	400b      	ands	r3, r1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d108      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x140>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68d9      	ldr	r1, [r3, #12]
 80017e4:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <HAL_ADC_PollForConversion+0x208>)
 80017e6:	400b      	ands	r3, r1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x140>
 80017ec:	2354      	movs	r3, #84	@ 0x54
 80017ee:	e000      	b.n	80017f2 <HAL_ADC_PollForConversion+0x142>
 80017f0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017f8:	e021      	b.n	800183e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d01a      	beq.n	8001838 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <HAL_ADC_PollForConversion+0x168>
 8001808:	f7ff fdc2 	bl	8001390 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d20f      	bcs.n	8001838 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d90b      	bls.n	8001838 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e030      	b.n	800189a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	429a      	cmp	r2, r3
 8001844:	d8d9      	bhi.n	80017fa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f06f 0212 	mvn.w	r2, #18
 800184e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001866:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800186a:	d115      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001870:	2b00      	cmp	r3, #0
 8001872:	d111      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000030 	.word	0x20000030
 80018a8:	24924924 	.word	0x24924924
 80018ac:	00924924 	.word	0x00924924
 80018b0:	12492492 	.word	0x12492492
 80018b4:	00492492 	.word	0x00492492
 80018b8:	00249249 	.word	0x00249249

080018bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x20>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e0dc      	b.n	8001aae <HAL_ADC_ConfigChannel+0x1da>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b06      	cmp	r3, #6
 8001902:	d81c      	bhi.n	800193e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b05      	subs	r3, #5
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b05      	subs	r3, #5
 8001930:	fa00 f203 	lsl.w	r2, r0, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	635a      	str	r2, [r3, #52]	@ 0x34
 800193c:	e03c      	b.n	80019b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d81c      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b23      	subs	r3, #35	@ 0x23
 8001958:	221f      	movs	r2, #31
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	4019      	ands	r1, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b23      	subs	r3, #35	@ 0x23
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
 800197e:	e01b      	b.n	80019b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	@ 0x41
 8001992:	221f      	movs	r2, #31
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	4019      	ands	r1, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b41      	subs	r3, #65	@ 0x41
 80019ac:	fa00 f203 	lsl.w	r2, r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b09      	cmp	r3, #9
 80019be:	d91c      	bls.n	80019fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68d9      	ldr	r1, [r3, #12]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	3b1e      	subs	r3, #30
 80019d2:	2207      	movs	r2, #7
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	4019      	ands	r1, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6898      	ldr	r0, [r3, #8]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	3b1e      	subs	r3, #30
 80019ec:	fa00 f203 	lsl.w	r2, r0, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	e019      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4019      	ands	r1, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6898      	ldr	r0, [r3, #8]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d003      	beq.n	8001a3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d132      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d125      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d126      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d11a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_ADC_ConfigChannel+0x1e8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x1b2>
 8001a92:	e007      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40012400 	.word	0x40012400
 8001abc:	20000030 	.word	0x20000030
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d040      	beq.n	8001b64 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0201 	orr.w	r2, r2, #1
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <ADC_Enable+0xac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <ADC_Enable+0xb0>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9b      	lsrs	r3, r3, #18
 8001afe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b00:	e002      	b.n	8001b08 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0e:	f7ff fc3f 	bl	8001390 <HAL_GetTick>
 8001b12:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b14:	e01f      	b.n	8001b56 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b16:	f7ff fc3b 	bl	8001390 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d918      	bls.n	8001b56 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d011      	beq.n	8001b56 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e007      	b.n	8001b66 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d1d8      	bne.n	8001b16 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000030 	.word	0x20000030
 8001b74:	431bde83 	.word	0x431bde83

08001b78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d12e      	bne.n	8001bf0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ba2:	f7ff fbf5 	bl	8001390 <HAL_GetTick>
 8001ba6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ba8:	e01b      	b.n	8001be2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001baa:	f7ff fbf1 	bl	8001390 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d914      	bls.n	8001be2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10d      	bne.n	8001be2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bca:	f043 0210 	orr.w	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d0dc      	beq.n	8001baa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4906      	ldr	r1, [pc, #24]	@ (8001c94 <__NVIC_EnableIRQ+0x34>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff90 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff2d 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff42 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff90 	bl	8001cec <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5f 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff35 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa2 	bl	8001d50 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b08b      	sub	sp, #44	@ 0x2c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e169      	b.n	8002100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8158 	bne.w	80020fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a9a      	ldr	r2, [pc, #616]	@ (80020b8 <HAL_GPIO_Init+0x2a0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d05e      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e54:	4a98      	ldr	r2, [pc, #608]	@ (80020b8 <HAL_GPIO_Init+0x2a0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d875      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e5a:	4a98      	ldr	r2, [pc, #608]	@ (80020bc <HAL_GPIO_Init+0x2a4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d058      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e60:	4a96      	ldr	r2, [pc, #600]	@ (80020bc <HAL_GPIO_Init+0x2a4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d86f      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e66:	4a96      	ldr	r2, [pc, #600]	@ (80020c0 <HAL_GPIO_Init+0x2a8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d052      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a94      	ldr	r2, [pc, #592]	@ (80020c0 <HAL_GPIO_Init+0x2a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d869      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e72:	4a94      	ldr	r2, [pc, #592]	@ (80020c4 <HAL_GPIO_Init+0x2ac>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d04c      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e78:	4a92      	ldr	r2, [pc, #584]	@ (80020c4 <HAL_GPIO_Init+0x2ac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d863      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e7e:	4a92      	ldr	r2, [pc, #584]	@ (80020c8 <HAL_GPIO_Init+0x2b0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d046      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e84:	4a90      	ldr	r2, [pc, #576]	@ (80020c8 <HAL_GPIO_Init+0x2b0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d85d      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d82a      	bhi.n	8001ee4 <HAL_GPIO_Init+0xcc>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d859      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e92:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <HAL_GPIO_Init+0x80>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001eed 	.word	0x08001eed
 8001ea0:	08001eff 	.word	0x08001eff
 8001ea4:	08001f41 	.word	0x08001f41
 8001ea8:	08001f47 	.word	0x08001f47
 8001eac:	08001f47 	.word	0x08001f47
 8001eb0:	08001f47 	.word	0x08001f47
 8001eb4:	08001f47 	.word	0x08001f47
 8001eb8:	08001f47 	.word	0x08001f47
 8001ebc:	08001f47 	.word	0x08001f47
 8001ec0:	08001f47 	.word	0x08001f47
 8001ec4:	08001f47 	.word	0x08001f47
 8001ec8:	08001f47 	.word	0x08001f47
 8001ecc:	08001f47 	.word	0x08001f47
 8001ed0:	08001f47 	.word	0x08001f47
 8001ed4:	08001f47 	.word	0x08001f47
 8001ed8:	08001f47 	.word	0x08001f47
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	4a79      	ldr	r2, [pc, #484]	@ (80020cc <HAL_GPIO_Init+0x2b4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eea:	e02c      	b.n	8001f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e029      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e024      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3308      	adds	r3, #8
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e01f      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e01a      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e013      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	611a      	str	r2, [r3, #16]
          break;
 8001f32:	e009      	b.n	8001f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	615a      	str	r2, [r3, #20]
          break;
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          break;
 8001f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	@ 0xff
 8001f4c:	d801      	bhi.n	8001f52 <HAL_GPIO_Init+0x13a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_Init+0x13e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2bff      	cmp	r3, #255	@ 0xff
 8001f5c:	d802      	bhi.n	8001f64 <HAL_GPIO_Init+0x14c>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x152>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	3b08      	subs	r3, #8
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	210f      	movs	r1, #15
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80b1 	beq.w	80020fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f98:	4b4d      	ldr	r3, [pc, #308]	@ (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb0:	4a48      	ldr	r2, [pc, #288]	@ (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a40      	ldr	r2, [pc, #256]	@ (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_GPIO_Init+0x1ec>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3f      	ldr	r2, [pc, #252]	@ (80020dc <HAL_GPIO_Init+0x2c4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1e8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1e4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3d      	ldr	r2, [pc, #244]	@ (80020e4 <HAL_GPIO_Init+0x2cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1e0>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8002004:	2300      	movs	r3, #0
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002016:	492f      	ldr	r1, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x2bc>)
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	492c      	ldr	r1, [pc, #176]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	4928      	ldr	r1, [pc, #160]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4922      	ldr	r1, [pc, #136]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	491e      	ldr	r1, [pc, #120]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4918      	ldr	r1, [pc, #96]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4914      	ldr	r1, [pc, #80]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d021      	beq.n	80020ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e021      	b.n	80020fa <HAL_GPIO_Init+0x2e2>
 80020b6:	bf00      	nop
 80020b8:	10320000 	.word	0x10320000
 80020bc:	10310000 	.word	0x10310000
 80020c0:	10220000 	.word	0x10220000
 80020c4:	10210000 	.word	0x10210000
 80020c8:	10120000 	.word	0x10120000
 80020cc:	10110000 	.word	0x10110000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010800 	.word	0x40010800
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40011400 	.word	0x40011400
 80020e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4909      	ldr	r1, [pc, #36]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f ae8e 	bne.w	8001e2c <HAL_GPIO_Init+0x14>
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	372c      	adds	r7, #44	@ 0x2c
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40010400 	.word	0x40010400

08002120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	807b      	strh	r3, [r7, #2]
 800215a:	4613      	mov	r3, r2
 800215c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215e:	787b      	ldrb	r3, [r7, #1]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800216a:	e003      	b.n	8002174 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	041a      	lsls	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	611a      	str	r2, [r3, #16]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
	...

08002180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fac6 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e272      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8087 	beq.w	80022de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d0:	4b92      	ldr	r3, [pc, #584]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d00c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021dc:	4b8f      	ldr	r3, [pc, #572]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d112      	bne.n	800220e <HAL_RCC_OscConfig+0x5e>
 80021e8:	4b8c      	ldr	r3, [pc, #560]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f4:	d10b      	bne.n	800220e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f6:	4b89      	ldr	r3, [pc, #548]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d06c      	beq.n	80022dc <HAL_RCC_OscConfig+0x12c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d168      	bne.n	80022dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e24c      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x76>
 8002218:	4b80      	ldr	r3, [pc, #512]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a7f      	ldr	r2, [pc, #508]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e02e      	b.n	8002284 <HAL_RCC_OscConfig+0xd4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x98>
 800222e:	4b7b      	ldr	r3, [pc, #492]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7a      	ldr	r2, [pc, #488]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b78      	ldr	r3, [pc, #480]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a77      	ldr	r2, [pc, #476]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e01d      	b.n	8002284 <HAL_RCC_OscConfig+0xd4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0xbc>
 8002252:	4b72      	ldr	r3, [pc, #456]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a71      	ldr	r2, [pc, #452]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6e      	ldr	r2, [pc, #440]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0xd4>
 800226c:	4b6b      	ldr	r3, [pc, #428]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6a      	ldr	r2, [pc, #424]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b68      	ldr	r3, [pc, #416]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a67      	ldr	r2, [pc, #412]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f880 	bl	8001390 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff f87c 	bl	8001390 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	@ 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e200      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b5d      	ldr	r3, [pc, #372]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0xe4>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff f86c 	bl	8001390 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff f868 	bl	8001390 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1ec      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	4b53      	ldr	r3, [pc, #332]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x10c>
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d063      	beq.n	80023b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ea:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f6:	4b49      	ldr	r3, [pc, #292]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d11c      	bne.n	800233c <HAL_RCC_OscConfig+0x18c>
 8002302:	4b46      	ldr	r3, [pc, #280]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d116      	bne.n	800233c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_RCC_OscConfig+0x176>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1c0      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b3d      	ldr	r3, [pc, #244]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4939      	ldr	r1, [pc, #228]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	e03a      	b.n	80023b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <HAL_RCC_OscConfig+0x270>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff f821 	bl	8001390 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002352:	f7ff f81d 	bl	8001390 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1a1      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4927      	ldr	r1, [pc, #156]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <HAL_RCC_OscConfig+0x270>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff f800 	bl	8001390 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002394:	f7fe fffc 	bl	8001390 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e180      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d03a      	beq.n	8002434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d019      	beq.n	80023fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_RCC_OscConfig+0x274>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023cc:	f7fe ffe0 	bl	8001390 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe ffdc 	bl	8001390 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e160      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f000 face 	bl	8002994 <RCC_Delay>
 80023f8:	e01c      	b.n	8002434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_RCC_OscConfig+0x274>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe ffc6 	bl	8001390 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002406:	e00f      	b.n	8002428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002408:	f7fe ffc2 	bl	8001390 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d908      	bls.n	8002428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e146      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	42420000 	.word	0x42420000
 8002424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b92      	ldr	r3, [pc, #584]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e9      	bne.n	8002408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a6 	beq.w	800258e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002446:	4b8b      	ldr	r3, [pc, #556]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10d      	bne.n	800246e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a87      	ldr	r2, [pc, #540]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b85      	ldr	r3, [pc, #532]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b82      	ldr	r3, [pc, #520]	@ (8002678 <HAL_RCC_OscConfig+0x4c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d118      	bne.n	80024ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247a:	4b7f      	ldr	r3, [pc, #508]	@ (8002678 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7e      	ldr	r2, [pc, #504]	@ (8002678 <HAL_RCC_OscConfig+0x4c8>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002486:	f7fe ff83 	bl	8001390 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7fe ff7f 	bl	8001390 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b64      	cmp	r3, #100	@ 0x64
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e103      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b75      	ldr	r3, [pc, #468]	@ (8002678 <HAL_RCC_OscConfig+0x4c8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x312>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	e02d      	b.n	800251e <HAL_RCC_OscConfig+0x36e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x334>
 80024ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a69      	ldr	r2, [pc, #420]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	4b67      	ldr	r3, [pc, #412]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a66      	ldr	r2, [pc, #408]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0304 	bic.w	r3, r3, #4
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	e01c      	b.n	800251e <HAL_RCC_OscConfig+0x36e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d10c      	bne.n	8002506 <HAL_RCC_OscConfig+0x356>
 80024ec:	4b61      	ldr	r3, [pc, #388]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a60      	ldr	r2, [pc, #384]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	e00b      	b.n	800251e <HAL_RCC_OscConfig+0x36e>
 8002506:	4b5b      	ldr	r3, [pc, #364]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a5a      	ldr	r2, [pc, #360]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	4b58      	ldr	r3, [pc, #352]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a57      	ldr	r2, [pc, #348]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d015      	beq.n	8002552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe ff33 	bl	8001390 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe ff2f 	bl	8001390 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0b1      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	4b4b      	ldr	r3, [pc, #300]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ee      	beq.n	800252e <HAL_RCC_OscConfig+0x37e>
 8002550:	e014      	b.n	800257c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002552:	f7fe ff1d 	bl	8001390 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7fe ff19 	bl	8001390 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e09b      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002570:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ee      	bne.n	800255a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d105      	bne.n	800258e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002582:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a3b      	ldr	r2, [pc, #236]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800258c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8087 	beq.w	80026a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002598:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d061      	beq.n	8002668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d146      	bne.n	800263a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b33      	ldr	r3, [pc, #204]	@ (800267c <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe feed 	bl	8001390 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe fee9 	bl	8001390 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e06d      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025cc:	4b29      	ldr	r3, [pc, #164]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e0:	d108      	bne.n	80025f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4921      	ldr	r1, [pc, #132]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a19      	ldr	r1, [r3, #32]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	430b      	orrs	r3, r1
 8002606:	491b      	ldr	r1, [pc, #108]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x4cc>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe febd 	bl	8001390 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe feb9 	bl	8001390 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e03d      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x46a>
 8002638:	e035      	b.n	80026a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <HAL_RCC_OscConfig+0x4cc>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fea6 	bl	8001390 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fea2 	bl	8001390 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e026      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x498>
 8002666:	e01e      	b.n	80026a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d107      	bne.n	8002680 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e019      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
 800267c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_RCC_OscConfig+0x500>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4965      	ldr	r1, [pc, #404]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800271a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a4:	f7fe fdf4 	bl	8001390 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe fdf0 	bl	8001390 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4922      	ldr	r1, [pc, #136]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	@ (800287c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <HAL_RCC_ClockConfig+0x1cc>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <HAL_RCC_ClockConfig+0x1d0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fd52 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	08003a5c 	.word	0x08003a5c
 8002880:	20000030 	.word	0x20000030
 8002884:	20000034 	.word	0x20000034

08002888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_RCC_GetSysClockFreq+0x94>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x30>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d003      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x36>
 80028b6:	e027      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b8:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	613b      	str	r3, [r7, #16]
      break;
 80028bc:	e027      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a17      	ldr	r2, [pc, #92]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d010      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028d6:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_RCC_GetSysClockFreq+0x94>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0c5b      	lsrs	r3, r3, #17
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	4a11      	ldr	r2, [pc, #68]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ea:	fb03 f202 	mul.w	r2, r3, r2
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e004      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	@ (800292c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	613b      	str	r3, [r7, #16]
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x98>)
 800290a:	613b      	str	r3, [r7, #16]
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	693b      	ldr	r3, [r7, #16]
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	007a1200 	.word	0x007a1200
 8002924:	08003a74 	.word	0x08003a74
 8002928:	08003a84 	.word	0x08003a84
 800292c:	003d0900 	.word	0x003d0900

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b02      	ldr	r3, [pc, #8]	@ (8002940 <HAL_RCC_GetHCLKFreq+0x10>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000030 	.word	0x20000030

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002948:	f7ff fff2 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	@ (8002968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	08003a6c 	.word	0x08003a6c

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002970:	f7ff ffde 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	@ (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	08003a6c 	.word	0x08003a6c

08002994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800299c:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <RCC_Delay+0x34>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	@ (80029cc <RCC_Delay+0x38>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b0:	bf00      	nop
  }
  while (Delay --);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <RCC_Delay+0x1c>
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000030 	.word	0x20000030
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d07d      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b49      	ldr	r3, [pc, #292]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a14:	2301      	movs	r3, #1
 8002a16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d118      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a24:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fcae 	bl	8001390 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fe fcaa 	bl	8001390 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	@ 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e06d      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a56:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02e      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d027      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a84:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a8a:	4a29      	ldr	r2, [pc, #164]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d014      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fc79 	bl	8001390 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe fc75 	bl	8001390 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e036      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ee      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4917      	ldr	r1, [pc, #92]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	490b      	ldr	r1, [pc, #44]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b12:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4904      	ldr	r1, [pc, #16]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	42420440 	.word	0x42420440

08002b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	f200 808a 	bhi.w	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d045      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d075      	beq.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b72:	e082      	b.n	8002c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002b74:	4b46      	ldr	r3, [pc, #280]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b7a:	4b45      	ldr	r3, [pc, #276]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d07b      	beq.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0c9b      	lsrs	r3, r3, #18
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a41      	ldr	r2, [pc, #260]	@ (8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0c5b      	lsrs	r3, r3, #17
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002bb8:	4a38      	ldr	r2, [pc, #224]	@ (8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be0:	d102      	bne.n	8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	61bb      	str	r3, [r7, #24]
      break;
 8002be6:	e04a      	b.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
      break;
 8002bf6:	e042      	b.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c08:	d108      	bne.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e01f      	b.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c26:	d109      	bne.n	8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002c34:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e00f      	b.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c46:	d11c      	bne.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d016      	beq.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002c54:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002c58:	61bb      	str	r3, [r7, #24]
      break;
 8002c5a:	e012      	b.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c5c:	e011      	b.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c5e:	f7ff fe85 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0b9b      	lsrs	r3, r3, #14
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	61bb      	str	r3, [r7, #24]
      break;
 8002c78:	e004      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002c82:	bf00      	nop
    }
  }
  return (frequency);
 8002c84:	69bb      	ldr	r3, [r7, #24]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08003a88 	.word	0x08003a88
 8002c98:	08003a98 	.word	0x08003a98
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	003d0900 	.word	0x003d0900
 8002ca4:	aaaaaaab 	.word	0xaaaaaaab

08002ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e041      	b.n	8002d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fe f96a 	bl	8000fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 fb26 	bl	8003338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x24>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e022      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d109      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x3e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e015      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x58>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e008      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e05e      	b.n	8002e78 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0x82>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc8:	e013      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0x92>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd8:	e00b      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xa2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de8:	e003      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fc92 	bl	8003724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1e      	ldr	r2, [pc, #120]	@ (8002e80 <HAL_TIM_PWM_Start+0x138>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	@ (8002e80 <HAL_TIM_PWM_Start+0x138>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIM_PWM_Start+0xfa>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIM_PWM_Start+0xfa>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <HAL_TIM_PWM_Start+0x13c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIM_PWM_Start+0xfa>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a12      	ldr	r2, [pc, #72]	@ (8002e88 <HAL_TIM_PWM_Start+0x140>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d111      	bne.n	8002e66 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d010      	beq.n	8002e76 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e64:	e007      	b.n	8002e76 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800

08002e8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	6839      	ldr	r1, [r7, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fc40 	bl	8003724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a29      	ldr	r2, [pc, #164]	@ (8002f50 <HAL_TIM_PWM_Stop+0xc4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d117      	bne.n	8002ede <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_TIM_PWM_Stop+0x52>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <HAL_TIM_PWM_Stop+0x52>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <HAL_TIM_PWM_Stop+0x82>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	f240 4344 	movw	r3, #1092	@ 0x444
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <HAL_TIM_PWM_Stop+0x82>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Stop+0x92>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f1c:	e013      	b.n	8002f46 <HAL_TIM_PWM_Stop+0xba>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Stop+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f2c:	e00b      	b.n	8002f46 <HAL_TIM_PWM_Stop+0xba>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_PWM_Stop+0xb2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f3c:	e003      	b.n	8002f46 <HAL_TIM_PWM_Stop+0xba>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00

08002f54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e093      	b.n	8003090 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe f843 	bl	8001008 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f98:	f023 0307 	bic.w	r3, r3, #7
 8002f9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f000 f9c5 	bl	8003338 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ff4:	f023 030c 	bic.w	r3, r3, #12
 8002ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003000:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	4313      	orrs	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	011a      	lsls	r2, r3, #4
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	4313      	orrs	r3, r2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4313      	orrs	r3, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d110      	bne.n	80030ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d102      	bne.n	80030d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030ce:	7b7b      	ldrb	r3, [r7, #13]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e069      	b.n	80031ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e8:	e031      	b.n	800314e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d110      	bne.n	8003112 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d102      	bne.n	80030fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030f6:	7b3b      	ldrb	r3, [r7, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e055      	b.n	80031ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003110:	e01d      	b.n	800314e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d108      	bne.n	800312a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003118:	7bbb      	ldrb	r3, [r7, #14]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800311e:	7b7b      	ldrb	r3, [r7, #13]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003124:	7b3b      	ldrb	r3, [r7, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e03e      	b.n	80031ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_TIM_Encoder_Start+0xc4>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d008      	beq.n	800316c <HAL_TIM_Encoder_Start+0xd4>
 800315a:	e00f      	b.n	800317c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fadd 	bl	8003724 <TIM_CCxChannelCmd>
      break;
 800316a:	e016      	b.n	800319a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	2104      	movs	r1, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fad5 	bl	8003724 <TIM_CCxChannelCmd>
      break;
 800317a:	e00e      	b.n	800319a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 facd 	bl	8003724 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	2104      	movs	r1, #4
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fac6 	bl	8003724 <TIM_CCxChannelCmd>
      break;
 8003198:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0ae      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	f200 809f 	bhi.w	8003320 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031e2:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	08003321 	.word	0x08003321
 80031f0:	08003321 	.word	0x08003321
 80031f4:	08003321 	.word	0x08003321
 80031f8:	0800325d 	.word	0x0800325d
 80031fc:	08003321 	.word	0x08003321
 8003200:	08003321 	.word	0x08003321
 8003204:	08003321 	.word	0x08003321
 8003208:	0800329f 	.word	0x0800329f
 800320c:	08003321 	.word	0x08003321
 8003210:	08003321 	.word	0x08003321
 8003214:	08003321 	.word	0x08003321
 8003218:	080032df 	.word	0x080032df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f8f6 	bl	8003414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6999      	ldr	r1, [r3, #24]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	619a      	str	r2, [r3, #24]
      break;
 800325a:	e064      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f93c 	bl	80034e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6999      	ldr	r1, [r3, #24]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	021a      	lsls	r2, r3, #8
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	619a      	str	r2, [r3, #24]
      break;
 800329c:	e043      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f985 	bl	80035b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0208 	orr.w	r2, r2, #8
 80032b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0204 	bic.w	r2, r2, #4
 80032c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69d9      	ldr	r1, [r3, #28]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	61da      	str	r2, [r3, #28]
      break;
 80032dc:	e023      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f9cf 	bl	8003688 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69d9      	ldr	r1, [r3, #28]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	61da      	str	r2, [r3, #28]
      break;
 800331e:	e002      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2f      	ldr	r2, [pc, #188]	@ (8003408 <TIM_Base_SetConfig+0xd0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003356:	d007      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a2c      	ldr	r2, [pc, #176]	@ (800340c <TIM_Base_SetConfig+0xd4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_Base_SetConfig+0x30>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a2b      	ldr	r2, [pc, #172]	@ (8003410 <TIM_Base_SetConfig+0xd8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d108      	bne.n	800337a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <TIM_Base_SetConfig+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1f      	ldr	r2, [pc, #124]	@ (800340c <TIM_Base_SetConfig+0xd4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1e      	ldr	r2, [pc, #120]	@ (8003410 <TIM_Base_SetConfig+0xd8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <TIM_Base_SetConfig+0xd0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  }
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800

08003414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f023 0201 	bic.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 0302 	bic.w	r3, r3, #2
 800345c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <TIM_OC1_SetConfig+0xc8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10c      	bne.n	800348a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0308 	bic.w	r3, r3, #8
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a13      	ldr	r2, [pc, #76]	@ (80034dc <TIM_OC1_SetConfig+0xc8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d111      	bne.n	80034b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40012c00 	.word	0x40012c00

080034e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	f023 0210 	bic.w	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800350e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0320 	bic.w	r3, r3, #32
 800352a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a1d      	ldr	r2, [pc, #116]	@ (80035b0 <TIM_OC2_SetConfig+0xd0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10d      	bne.n	800355c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800355a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <TIM_OC2_SetConfig+0xd0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d113      	bne.n	800358c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800356a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00

080035b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <TIM_OC3_SetConfig+0xd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10d      	bne.n	800362e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800362c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <TIM_OC3_SetConfig+0xd0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d113      	bne.n	800365e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00

08003688 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <TIM_OC4_SetConfig+0x98>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d109      	bne.n	80036fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	40012c00 	.word	0x40012c00

08003724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e046      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a16      	ldr	r2, [pc, #88]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a10      	ldr	r2, [pc, #64]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e042      	b.n	80038c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fc94 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	@ 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800386a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f82b 	bl	80038c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003902:	f023 030c 	bic.w	r3, r3, #12
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	430b      	orrs	r3, r1
 800390e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2c      	ldr	r2, [pc, #176]	@ (80039dc <UART_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7ff f81c 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	e002      	b.n	800393e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7ff f804 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 800393c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	4a22      	ldr	r2, [pc, #136]	@ (80039e0 <UART_SetConfig+0x118>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	095b      	lsrs	r3, r3, #5
 800395c:	0119      	lsls	r1, r3, #4
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f2f3 	udiv	r2, r2, r3
 8003974:	4b1a      	ldr	r3, [pc, #104]	@ (80039e0 <UART_SetConfig+0x118>)
 8003976:	fba3 0302 	umull	r0, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2064      	movs	r0, #100	@ 0x64
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	3332      	adds	r3, #50	@ 0x32
 8003988:	4a15      	ldr	r2, [pc, #84]	@ (80039e0 <UART_SetConfig+0x118>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003994:	4419      	add	r1, r3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <UART_SetConfig+0x118>)
 80039ae:	fba3 0302 	umull	r0, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2064      	movs	r0, #100	@ 0x64
 80039b6:	fb00 f303 	mul.w	r3, r0, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	3332      	adds	r3, #50	@ 0x32
 80039c0:	4a07      	ldr	r2, [pc, #28]	@ (80039e0 <UART_SetConfig+0x118>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 020f 	and.w	r2, r3, #15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	440a      	add	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40013800 	.word	0x40013800
 80039e0:	51eb851f 	.word	0x51eb851f

080039e4 <memset>:
 80039e4:	4603      	mov	r3, r0
 80039e6:	4402      	add	r2, r0
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d100      	bne.n	80039ee <memset+0xa>
 80039ec:	4770      	bx	lr
 80039ee:	f803 1b01 	strb.w	r1, [r3], #1
 80039f2:	e7f9      	b.n	80039e8 <memset+0x4>

080039f4 <__libc_init_array>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	2600      	movs	r6, #0
 80039f8:	4d0c      	ldr	r5, [pc, #48]	@ (8003a2c <__libc_init_array+0x38>)
 80039fa:	4c0d      	ldr	r4, [pc, #52]	@ (8003a30 <__libc_init_array+0x3c>)
 80039fc:	1b64      	subs	r4, r4, r5
 80039fe:	10a4      	asrs	r4, r4, #2
 8003a00:	42a6      	cmp	r6, r4
 8003a02:	d109      	bne.n	8003a18 <__libc_init_array+0x24>
 8003a04:	f000 f81a 	bl	8003a3c <_init>
 8003a08:	2600      	movs	r6, #0
 8003a0a:	4d0a      	ldr	r5, [pc, #40]	@ (8003a34 <__libc_init_array+0x40>)
 8003a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a38 <__libc_init_array+0x44>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	42a6      	cmp	r6, r4
 8003a14:	d105      	bne.n	8003a22 <__libc_init_array+0x2e>
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1c:	4798      	blx	r3
 8003a1e:	3601      	adds	r6, #1
 8003a20:	e7ee      	b.n	8003a00 <__libc_init_array+0xc>
 8003a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a26:	4798      	blx	r3
 8003a28:	3601      	adds	r6, #1
 8003a2a:	e7f2      	b.n	8003a12 <__libc_init_array+0x1e>
 8003a2c:	08003a9c 	.word	0x08003a9c
 8003a30:	08003a9c 	.word	0x08003a9c
 8003a34:	08003a9c 	.word	0x08003a9c
 8003a38:	08003aa0 	.word	0x08003aa0

08003a3c <_init>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr

08003a48 <_fini>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr
